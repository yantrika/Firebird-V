
Timer_Overflow_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  00000352  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000098  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013a  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008d  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000202  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014c  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ed       	ldi	r30, 0xDE	; 222
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 30       	cpi	r26, 0x01	; 1
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
 122:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:

unsigned char toggel = 0; //used as a variable for buzzer state toggel action

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 132:	a7 e2       	ldi	r26, 0x27	; 39
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e7 e2       	ldi	r30, 0x27	; 39
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 140:	a8 e2       	ldi	r26, 0x28	; 40
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e8 e2       	ldi	r30, 0x28	; 40
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8c 93       	st	X, r24
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <port_init>:

void port_init (void)
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 buzzer_pin_config();
 15c:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_pin_config>
}
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <buzzer_on>:

void buzzer_on (void)
{
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	0f 92       	push	r0
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 170:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 172:	e6 e2       	ldi	r30, 0x26	; 38
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 180:	e8 e2       	ldi	r30, 0x28	; 40
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	80 83       	st	Z, r24
}
 188:	0f 90       	pop	r0
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <buzzer_off>:

void buzzer_off (void)
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 19a:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 19c:	e6 e2       	ldi	r30, 0x26	; 38
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 1aa:	e8 e2       	ldi	r30, 0x28	; 40
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	80 83       	st	Z, r24
}
 1b2:	0f 90       	pop	r0
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <timer4_init>:
//TIMER4 initialize - prescale:1024
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Hz
// actual value:  1.000Hz (0.0%)
void timer4_init(void)
{
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
 1c2:	e1 ea       	ldi	r30, 0xA1	; 161
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	10 82       	st	Z, r1
 TCNT4H = 0x1F; //Counter higher 8 bit value
 1c8:	e5 ea       	ldi	r30, 0xA5	; 165
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	80 83       	st	Z, r24
 TCNT4L = 0x01; //Counter lower 8 bit value
 1d0:	e4 ea       	ldi	r30, 0xA4	; 164
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
 1d8:	e9 ea       	ldi	r30, 0xA9	; 169
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
 1de:	e8 ea       	ldi	r30, 0xA8	; 168
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
 1e4:	eb ea       	ldi	r30, 0xAB	; 171
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
 1ea:	ea ea       	ldi	r30, 0xAA	; 170
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
 1f0:	ed ea       	ldi	r30, 0xAD	; 173
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
 1f6:	ec ea       	ldi	r30, 0xAC	; 172
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
 1fc:	e7 ea       	ldi	r30, 0xA7	; 167
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
 202:	e6 ea       	ldi	r30, 0xA6	; 166
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	10 82       	st	Z, r1
 TCCR4A = 0x00; 
 208:	e0 ea       	ldi	r30, 0xA0	; 160
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	10 82       	st	Z, r1
 TCCR4C = 0x00;
 20e:	e2 ea       	ldi	r30, 0xA2	; 162
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	10 82       	st	Z, r1
 TCCR4B = 0x04; //start Timer
 214:	e1 ea       	ldi	r30, 0xA1	; 161
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	80 83       	st	Z, r24
}
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <__vector_45>:

//This ISR can be used to schedule events like refreshing ADC data, LCD data
ISR(TIMER4_OVF_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	00 90 5b 00 	lds	r0, 0x005B
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
 24a:	df 93       	push	r29
 24c:	cf 93       	push	r28
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 //TIMER4 has overflowed
 TCNT4H = 0x1F; //reload counter high value
 252:	e5 ea       	ldi	r30, 0xA5	; 165
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	80 83       	st	Z, r24
 TCNT4L = 0x01; //reload counter low value
 25a:	e4 ea       	ldi	r30, 0xA4	; 164
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24

 toggel = ~toggel;
 262:	80 91 00 02 	lds	r24, 0x0200
 266:	80 95       	com	r24
 268:	80 93 00 02 	sts	0x0200, r24

 if (toggel == 0)
 26c:	80 91 00 02 	lds	r24, 0x0200
 270:	88 23       	and	r24, r24
 272:	19 f4       	brne	.+6      	; 0x27a <__vector_45+0x58>
 {
  buzzer_on();
 274:	0e 94 b3 00 	call	0x166	; 0x166 <buzzer_on>
 278:	02 c0       	rjmp	.+4      	; 0x27e <__vector_45+0x5c>
 }
 else
 {
  buzzer_off();
 27a:	0e 94 c8 00 	call	0x190	; 0x190 <buzzer_off>
 }
} 
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	00 92 5b 00 	sts	0x005B, r0
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <init_devices>:

void init_devices(void)
{
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
 2b2:	f8 94       	cli
 port_init(); //Initializes all ports 
 2b4:	0e 94 aa 00 	call	0x154	; 0x154 <port_init>
 timer4_init();
 2b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <timer4_init>
 TIMSK4 = 0x01; //timer4 overflow interrupt enable
 2bc:	e2 e7       	ldi	r30, 0x72	; 114
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 83       	st	Z, r24
 sei();   //Enables the global interrupts
 2c4:	78 94       	sei
}
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <main>:

//Main Function
int main(void)
{
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 2d4:	0e 94 55 01 	call	0x2aa	; 0x2aa <init_devices>
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0xc>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
