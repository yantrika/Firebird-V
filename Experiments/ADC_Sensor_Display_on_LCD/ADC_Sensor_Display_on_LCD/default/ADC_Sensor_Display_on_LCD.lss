
ADC_Sensor_Display_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002c36  00002cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800308  00800308  00002dd2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c9  00000000  00000000  00002df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084d  00000000  00000000  00002fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000177  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6d  00000000  00000000  0000397f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000044ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e6 e3       	ldi	r30, 0x36	; 54
     17e:	fc e2       	ldi	r31, 0x2C	; 44
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a4 32       	cpi	r26, 0x24	; 36
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <main>
     1a4:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	26 e6       	ldi	r18, 0x66	; 102
     1f2:	36 e6       	ldi	r19, 0x66	; 102
     1f4:	46 e6       	ldi	r20, 0x66	; 102
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	80 e7       	ldi	r24, 0x70	; 112
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	26 e6       	ldi	r18, 0x66	; 102
     38a:	36 e6       	ldi	r19, 0x66	; 102
     38c:	46 e6       	ldi	r20, 0x66	; 102
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	80 e7       	ldi	r24, 0x70	; 112
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	26 e6       	ldi	r18, 0x66	; 102
     4fe:	36 e6       	ldi	r19, 0x66	; 102
     500:	46 e6       	ldi	r20, 0x66	; 102
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	80 e7       	ldi	r24, 0x70	; 112
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	26 e6       	ldi	r18, 0x66	; 102
     696:	36 e6       	ldi	r19, 0x66	; 102
     698:	46 e6       	ldi	r20, 0x66	; 102
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	80 e7       	ldi	r24, 0x70	; 112
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	26 e6       	ldi	r18, 0x66	; 102
     79c:	36 e6       	ldi	r19, 0x66	; 102
     79e:	46 e6       	ldi	r20, 0x66	; 102
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	80 e7       	ldi	r24, 0x70	; 112
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	26 e6       	ldi	r18, 0x66	; 102
     8b2:	36 e6       	ldi	r19, 0x66	; 102
     8b4:	46 e6       	ldi	r20, 0x66	; 102
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	80 e7       	ldi	r24, 0x70	; 112
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	26 e6       	ldi	r18, 0x66	; 102
     9a4:	36 e6       	ldi	r19, 0x66	; 102
     9a6:	46 e6       	ldi	r20, 0x66	; 102
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	80 e7       	ldi	r24, 0x70	; 112
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	26 e6       	ldi	r18, 0x66	; 102
     aba:	36 e6       	ldi	r19, 0x66	; 102
     abc:	46 e6       	ldi	r20, 0x66	; 102
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	80 e7       	ldi	r24, 0x70	; 112
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	26 e6       	ldi	r18, 0x66	; 102
     bd8:	36 e6       	ldi	r19, 0x66	; 102
     bda:	46 e6       	ldi	r20, 0x66	; 102
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	80 e7       	ldi	r24, 0x70	; 112
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	80 e7       	ldi	r24, 0x70	; 112
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	26 e6       	ldi	r18, 0x66	; 102
     e9c:	36 e6       	ldi	r19, 0x66	; 102
     e9e:	46 e6       	ldi	r20, 0x66	; 102
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	80 e7       	ldi	r24, 0x70	; 112
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	26 e6       	ldi	r18, 0x66	; 102
    1008:	36 e6       	ldi	r19, 0x66	; 102
    100a:	46 e6       	ldi	r20, 0x66	; 102
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	80 e7       	ldi	r24, 0x70	; 112
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	26 e6       	ldi	r18, 0x66	; 102
    1150:	36 e6       	ldi	r19, 0x66	; 102
    1152:	46 e6       	ldi	r20, 0x66	; 102
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 07 10 	call	0x200e	; 0x200e <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	80 e7       	ldi	r24, 0x70	; 112
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 09 03 	sts	0x0309, r25
    136e:	80 93 08 03 	sts	0x0308, r24
		lcd_wr_char(million);
    1372:	80 91 08 03 	lds	r24, 0x0308
    1376:	90 91 09 03 	lds	r25, 0x0309
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 10 03 	sts	0x0310, r25
    13a6:	80 93 0f 03 	sts	0x030F, r24
		thousand = temp%10 + 48;
    13aa:	80 91 0f 03 	lds	r24, 0x030F
    13ae:	90 91 10 03 	lds	r25, 0x0310
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 21 03 	sts	0x0321, r25
    13c2:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(thousand);
    13c6:	80 91 20 03 	lds	r24, 0x0320
    13ca:	90 91 21 03 	lds	r25, 0x0321
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 10 03 	sts	0x0310, r25
    13fa:	80 93 0f 03 	sts	0x030F, r24
		hundred = temp%10 + 48;
    13fe:	80 91 0f 03 	lds	r24, 0x030F
    1402:	90 91 10 03 	lds	r25, 0x0310
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 1c 03 	sts	0x031C, r25
    1416:	80 93 1b 03 	sts	0x031B, r24
		lcd_wr_char(hundred);
    141a:	80 91 1b 03 	lds	r24, 0x031B
    141e:	90 91 1c 03 	lds	r25, 0x031C
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 10 03 	sts	0x0310, r25
    144e:	80 93 0f 03 	sts	0x030F, r24
		tens = temp%10 + 48;
    1452:	80 91 0f 03 	lds	r24, 0x030F
    1456:	90 91 10 03 	lds	r25, 0x0310
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 1a 03 	sts	0x031A, r25
    146a:	80 93 19 03 	sts	0x0319, r24
		lcd_wr_char(tens);
    146e:	80 91 19 03 	lds	r24, 0x0319
    1472:	90 91 1a 03 	lds	r25, 0x031A
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 1f 03 	sts	0x031F, r25
    14a2:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(unit);
    14a6:	80 91 1e 03 	lds	r24, 0x031E
    14aa:	90 91 1f 03 	lds	r25, 0x031F
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <lcd_port_config>:
unsigned int value;
float BATT_Voltage, BATT_V;

//Function to configure LCD port
void lcd_port_config (void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    14dc:	a7 e2       	ldi	r26, 0x27	; 39
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e7 e2       	ldi	r30, 0x27	; 39
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	87 6f       	ori	r24, 0xF7	; 247
    14e8:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    14ea:	a8 e2       	ldi	r26, 0x28	; 40
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e2       	ldi	r30, 0x28	; 40
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 78       	andi	r24, 0x80	; 128
    14f6:	8c 93       	st	X, r24
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; //set PORTF direction as input
    1506:	e0 e3       	ldi	r30, 0x30	; 48
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	10 82       	st	Z, r1
 PORTF = 0x00; //set PORTF pins floating
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
 DDRK = 0x00; //set PORTK direction as input
    1512:	e7 e0       	ldi	r30, 0x07	; 7
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	10 82       	st	Z, r1
 PORTK = 0x00; //set PORTK pins floating
    1518:	e8 e0       	ldi	r30, 0x08	; 8
    151a:	f1 e0       	ldi	r31, 0x01	; 1
    151c:	10 82       	st	Z, r1
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    152c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <lcd_port_config>
	adc_pin_config();	
    1530:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <adc_pin_config>
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <adc_init>:

//Function to Initialize ADC
void adc_init()
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1542:	ea e7       	ldi	r30, 0x7A	; 122
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1548:	eb e7       	ldi	r30, 0x7B	; 123
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    154e:	ec e7       	ldi	r30, 0x7C	; 124
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	80 83       	st	Z, r24
	ACSR = 0x80;
    1556:	e0 e5       	ldi	r30, 0x50	; 80
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    155e:	ea e7       	ldi	r30, 0x7A	; 122
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	86 e8       	ldi	r24, 0x86	; 134
    1564:	80 83       	st	Z, r24
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <ADC_Conversion>:



//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	0f 92       	push	r0
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 30       	cpi	r24, 0x08	; 8
    157e:	20 f0       	brcs	.+8      	; 0x1588 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1580:	eb e7       	ldi	r30, 0x7B	; 123
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	88 e0       	ldi	r24, 0x08	; 8
    1586:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	87 70       	andi	r24, 0x07	; 7
    158c:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    158e:	ec e7       	ldi	r30, 0x7C	; 124
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1598:	aa e7       	ldi	r26, 0x7A	; 122
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ea e7       	ldi	r30, 0x7A	; 122
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    15a6:	ea e7       	ldi	r30, 0x7A	; 122
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	80 71       	andi	r24, 0x10	; 16
    15b2:	90 70       	andi	r25, 0x00	; 0
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	b9 f3       	breq	.-18     	; 0x15a6 <ADC_Conversion+0x3a>
	a=ADCH;
    15b8:	e9 e7       	ldi	r30, 0x79	; 121
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    15c0:	aa e7       	ldi	r26, 0x7A	; 122
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ea e7       	ldi	r30, 0x7A	; 122
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 61       	ori	r24, 0x10	; 16
    15cc:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    15ce:	eb e7       	ldi	r30, 0x7B	; 123
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	10 82       	st	Z, r1
	return a;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <print_sensor>:


// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <print_sensor+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6a 83       	std	Y+2, r22	; 0x02
    15ee:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ADC_Conversion(channel);
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	0e 94 b6 0a 	call	0x156c	; 0x156c <ADC_Conversion>
    15f6:	80 93 12 03 	sts	0x0312, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    15fa:	80 91 12 03 	lds	r24, 0x0312
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	6a 81       	ldd	r22, Y+2	; 0x02
    1606:	a9 01       	movw	r20, r18
    1608:	23 e0       	ldi	r18, 0x03	; 3
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <Sharp_GP2D12_estimation>:


// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	27 97       	sbiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__floatunsisf>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	2f ee       	ldi	r18, 0xEF	; 239
    164e:	39 ec       	ldi	r19, 0xC9	; 201
    1650:	43 e9       	ldi	r20, 0x93	; 147
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 a2 13 	call	0x2744	; 0x2744 <pow>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9c 01       	movw	r18, r24
    165e:	ad 01       	movw	r20, r26
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	9f e3       	ldi	r25, 0x3F	; 63
    1668:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__divsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	2a e9       	ldi	r18, 0x9A	; 154
    1676:	39 ef       	ldi	r19, 0xF9	; 249
    1678:	4e e2       	ldi	r20, 0x2E	; 46
    167a:	55 e4       	ldi	r21, 0x45	; 69
    167c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 95 10 	call	0x212a	; 0x212a <__fixsfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	aa 27       	eor	r26, r26
    16a6:	97 fd       	sbrc	r25, 7
    16a8:	a0 95       	com	r26
    16aa:	ba 2f       	mov	r27, r26
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 37 10 	call	0x206e	; 0x206e <__floatsisf>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	ad 83       	std	Y+5, r26	; 0x05
    16be:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    16c0:	6b 81       	ldd	r22, Y+3	; 0x03
    16c2:	7c 81       	ldd	r23, Y+4	; 0x04
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	0e 94 95 10 	call	0x212a	; 0x212a <__fixsfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	23 e0       	ldi	r18, 0x03	; 3
    16da:	81 32       	cpi	r24, 0x21	; 33
    16dc:	92 07       	cpc	r25, r18
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16ec:	27 96       	adiw	r28, 0x07	; 7
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <init_devices>:

void init_devices (void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1706:	f8 94       	cli
 port_init();
    1708:	0e 94 92 0a 	call	0x1524	; 0x1524 <port_init>
 adc_init();
    170c:	0e 94 9d 0a 	call	0x153a	; 0x153a <adc_init>
 sei(); //Enables the global interrupts
    1710:	78 94       	sei
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <main>:


//Main Function
int main(void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	0f 92       	push	r0
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	unsigned int value;
	init_devices();
    1724:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <init_devices>
	
	lcd_set_4bit();
    1728:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    172c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>
	
	while(1)
	{
		BATT_V = ADC_Conversion(0);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	0e 94 b6 0a 	call	0x156c	; 0x156c <ADC_Conversion>
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__floatunsisf>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	80 93 0b 03 	sts	0x030B, r24
    174e:	90 93 0c 03 	sts	0x030C, r25
    1752:	a0 93 0d 03 	sts	0x030D, r26
    1756:	b0 93 0e 03 	sts	0x030E, r27
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 b6 0a 	call	0x156c	; 0x156c <ADC_Conversion>
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	84 e6       	ldi	r24, 0x64	; 100
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	ac 01       	movw	r20, r24
    176a:	24 9f       	mul	r18, r20
    176c:	c0 01       	movw	r24, r0
    176e:	25 9f       	mul	r18, r21
    1770:	90 0d       	add	r25, r0
    1772:	34 9f       	mul	r19, r20
    1774:	90 0d       	add	r25, r0
    1776:	11 24       	eor	r1, r1
    1778:	aa 27       	eor	r26, r26
    177a:	97 fd       	sbrc	r25, 7
    177c:	a0 95       	com	r26
    177e:	ba 2f       	mov	r27, r26
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 37 10 	call	0x206e	; 0x206e <__floatsisf>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	2d e3       	ldi	r18, 0x3D	; 61
    1792:	35 ed       	ldi	r19, 0xD5	; 213
    1794:	41 ea       	ldi	r20, 0xA1	; 161
    1796:	5d e3       	ldi	r21, 0x3D	; 61
    1798:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	23 e3       	ldi	r18, 0x33	; 51
    17a6:	33 e3       	ldi	r19, 0x33	; 51
    17a8:	43 e3       	ldi	r20, 0x33	; 51
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__addsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	80 93 15 03 	sts	0x0315, r24
    17b8:	90 93 16 03 	sts	0x0316, r25
    17bc:	a0 93 17 03 	sts	0x0317, r26
    17c0:	b0 93 18 03 	sts	0x0318, r27
		lcd_print(1,1,BATT_Voltage,4);
    17c4:	80 91 15 03 	lds	r24, 0x0315
    17c8:	90 91 16 03 	lds	r25, 0x0316
    17cc:	a0 91 17 03 	lds	r26, 0x0317
    17d0:	b0 91 18 03 	lds	r27, 0x0318
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9c 01       	movw	r18, r24
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	a9 01       	movw	r20, r18
    17e8:	24 e0       	ldi	r18, 0x04	; 4
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

		//print_sensor(1,1,0);							//Prints Battery voltage binary value

		print_sensor(1,6,5);							//Prints IR Proximity Sensor 1
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	45 e0       	ldi	r20, 0x05	; 5
    17f6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>
		print_sensor(1,10,6);							//Prints vlaue of Analog IR Proximity Sensor 2
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	6a e0       	ldi	r22, 0x0A	; 10
    17fe:	46 e0       	ldi	r20, 0x06	; 6
    1800:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>
		print_sensor(1,14,7);							//Prints value of Analog IR Proximity Sensor 3
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	6e e0       	ldi	r22, 0x0E	; 14
    1808:	47 e0       	ldi	r20, 0x07	; 7
    180a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>
		print_sensor(2,2,3);							//Prints value of White Line Sensor1
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	43 e0       	ldi	r20, 0x03	; 3
    1814:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>
		print_sensor(2,6,2);							//Prints Value of White Line Sensor2
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	42 e0       	ldi	r20, 0x02	; 2
    181e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>
		print_sensor(2,10,1);							//Prints Value of White Line Sensor3
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	6a e0       	ldi	r22, 0x0A	; 10
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <print_sensor>

		//print_sensor(2,9,11); 						//Analog Value Of Front Sharp Sensor

		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    182c:	8b e0       	ldi	r24, 0x0B	; 11
    182e:	0e 94 b6 0a 	call	0x156c	; 0x156c <ADC_Conversion>
    1832:	80 93 1d 03 	sts	0x031D, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    1836:	80 91 1d 03 	lds	r24, 0x031D
    183a:	0e 94 0e 0b 	call	0x161c	; 0x161c <Sharp_GP2D12_estimation>
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
		lcd_print(2,14,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
    1842:	29 81       	ldd	r18, Y+1	; 0x01
    1844:	3a 81       	ldd	r19, Y+2	; 0x02
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	6e e0       	ldi	r22, 0x0E	; 14
    184a:	a9 01       	movw	r20, r18
    184c:	23 e0       	ldi	r18, 0x03	; 3
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    1854:	6d cf       	rjmp	.-294    	; 0x1730 <main+0x18>

00001856 <__fixunssfsi>:
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	7b 01       	movw	r14, r22
    1860:	8c 01       	movw	r16, r24
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	5f e4       	ldi	r21, 0x4F	; 79
    186a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__gesf2>
    186e:	88 23       	and	r24, r24
    1870:	8c f0       	brlt	.+34     	; 0x1894 <__fixunssfsi+0x3e>
    1872:	c8 01       	movw	r24, r16
    1874:	b7 01       	movw	r22, r14
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	5f e4       	ldi	r21, 0x4F	; 79
    187e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__subsf3>
    1882:	0e 94 95 10 	call	0x212a	; 0x212a <__fixsfsi>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	20 50       	subi	r18, 0x00	; 0
    188c:	30 40       	sbci	r19, 0x00	; 0
    188e:	40 40       	sbci	r20, 0x00	; 0
    1890:	50 48       	sbci	r21, 0x80	; 128
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <__fixunssfsi+0x4a>
    1894:	c8 01       	movw	r24, r16
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 95 10 	call	0x212a	; 0x212a <__fixsfsi>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	b9 01       	movw	r22, r18
    18a2:	ca 01       	movw	r24, r20
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	08 95       	ret

000018ae <_fpadd_parts>:
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e5       	ldi	r30, 0x5D	; 93
    18b4:	fc e0       	ldi	r31, 0x0C	; 12
    18b6:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__>
    18ba:	dc 01       	movw	r26, r24
    18bc:	2b 01       	movw	r4, r22
    18be:	fa 01       	movw	r30, r20
    18c0:	9c 91       	ld	r25, X
    18c2:	92 30       	cpi	r25, 0x02	; 2
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <_fpadd_parts+0x1a>
    18c6:	39 c1       	rjmp	.+626    	; 0x1b3a <_fpadd_parts+0x28c>
    18c8:	eb 01       	movw	r28, r22
    18ca:	88 81       	ld	r24, Y
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <_fpadd_parts+0x24>
    18d0:	33 c1       	rjmp	.+614    	; 0x1b38 <_fpadd_parts+0x28a>
    18d2:	94 30       	cpi	r25, 0x04	; 4
    18d4:	69 f4       	brne	.+26     	; 0x18f0 <_fpadd_parts+0x42>
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	09 f0       	breq	.+2      	; 0x18dc <_fpadd_parts+0x2e>
    18da:	2f c1       	rjmp	.+606    	; 0x1b3a <_fpadd_parts+0x28c>
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	9c 91       	ld	r25, X
    18e0:	11 97       	sbiw	r26, 0x01	; 1
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	98 17       	cp	r25, r24
    18e6:	09 f4       	brne	.+2      	; 0x18ea <_fpadd_parts+0x3c>
    18e8:	28 c1       	rjmp	.+592    	; 0x1b3a <_fpadd_parts+0x28c>
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b2 e0       	ldi	r27, 0x02	; 2
    18ee:	25 c1       	rjmp	.+586    	; 0x1b3a <_fpadd_parts+0x28c>
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <_fpadd_parts+0x48>
    18f4:	21 c1       	rjmp	.+578    	; 0x1b38 <_fpadd_parts+0x28a>
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	a9 f4       	brne	.+42     	; 0x1924 <_fpadd_parts+0x76>
    18fa:	92 30       	cpi	r25, 0x02	; 2
    18fc:	09 f0       	breq	.+2      	; 0x1900 <_fpadd_parts+0x52>
    18fe:	1d c1       	rjmp	.+570    	; 0x1b3a <_fpadd_parts+0x28c>
    1900:	9a 01       	movw	r18, r20
    1902:	ad 01       	movw	r20, r26
    1904:	88 e0       	ldi	r24, 0x08	; 8
    1906:	ea 01       	movw	r28, r20
    1908:	09 90       	ld	r0, Y+
    190a:	ae 01       	movw	r20, r28
    190c:	e9 01       	movw	r28, r18
    190e:	09 92       	st	Y+, r0
    1910:	9e 01       	movw	r18, r28
    1912:	81 50       	subi	r24, 0x01	; 1
    1914:	c1 f7       	brne	.-16     	; 0x1906 <_fpadd_parts+0x58>
    1916:	e2 01       	movw	r28, r4
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	9c 91       	ld	r25, X
    191e:	89 23       	and	r24, r25
    1920:	81 83       	std	Z+1, r24	; 0x01
    1922:	08 c1       	rjmp	.+528    	; 0x1b34 <_fpadd_parts+0x286>
    1924:	92 30       	cpi	r25, 0x02	; 2
    1926:	09 f4       	brne	.+2      	; 0x192a <_fpadd_parts+0x7c>
    1928:	07 c1       	rjmp	.+526    	; 0x1b38 <_fpadd_parts+0x28a>
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	2d 90       	ld	r2, X+
    192e:	3c 90       	ld	r3, X
    1930:	13 97       	sbiw	r26, 0x03	; 3
    1932:	eb 01       	movw	r28, r22
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	14 96       	adiw	r26, 0x04	; 4
    193a:	ad 90       	ld	r10, X+
    193c:	bd 90       	ld	r11, X+
    193e:	cd 90       	ld	r12, X+
    1940:	dc 90       	ld	r13, X
    1942:	17 97       	sbiw	r26, 0x07	; 7
    1944:	ec 80       	ldd	r14, Y+4	; 0x04
    1946:	fd 80       	ldd	r15, Y+5	; 0x05
    1948:	0e 81       	ldd	r16, Y+6	; 0x06
    194a:	1f 81       	ldd	r17, Y+7	; 0x07
    194c:	91 01       	movw	r18, r2
    194e:	28 1b       	sub	r18, r24
    1950:	39 0b       	sbc	r19, r25
    1952:	b9 01       	movw	r22, r18
    1954:	37 ff       	sbrs	r19, 7
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <_fpadd_parts+0xb2>
    1958:	66 27       	eor	r22, r22
    195a:	77 27       	eor	r23, r23
    195c:	62 1b       	sub	r22, r18
    195e:	73 0b       	sbc	r23, r19
    1960:	60 32       	cpi	r22, 0x20	; 32
    1962:	71 05       	cpc	r23, r1
    1964:	0c f0       	brlt	.+2      	; 0x1968 <_fpadd_parts+0xba>
    1966:	61 c0       	rjmp	.+194    	; 0x1a2a <_fpadd_parts+0x17c>
    1968:	12 16       	cp	r1, r18
    196a:	13 06       	cpc	r1, r19
    196c:	6c f5       	brge	.+90     	; 0x19c8 <_fpadd_parts+0x11a>
    196e:	37 01       	movw	r6, r14
    1970:	48 01       	movw	r8, r16
    1972:	06 2e       	mov	r0, r22
    1974:	04 c0       	rjmp	.+8      	; 0x197e <_fpadd_parts+0xd0>
    1976:	96 94       	lsr	r9
    1978:	87 94       	ror	r8
    197a:	77 94       	ror	r7
    197c:	67 94       	ror	r6
    197e:	0a 94       	dec	r0
    1980:	d2 f7       	brpl	.-12     	; 0x1976 <_fpadd_parts+0xc8>
    1982:	21 e0       	ldi	r18, 0x01	; 1
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <_fpadd_parts+0xe6>
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	44 1f       	adc	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	6a 95       	dec	r22
    1996:	d2 f7       	brpl	.-12     	; 0x198c <_fpadd_parts+0xde>
    1998:	21 50       	subi	r18, 0x01	; 1
    199a:	30 40       	sbci	r19, 0x00	; 0
    199c:	40 40       	sbci	r20, 0x00	; 0
    199e:	50 40       	sbci	r21, 0x00	; 0
    19a0:	2e 21       	and	r18, r14
    19a2:	3f 21       	and	r19, r15
    19a4:	40 23       	and	r20, r16
    19a6:	51 23       	and	r21, r17
    19a8:	21 15       	cp	r18, r1
    19aa:	31 05       	cpc	r19, r1
    19ac:	41 05       	cpc	r20, r1
    19ae:	51 05       	cpc	r21, r1
    19b0:	21 f0       	breq	.+8      	; 0x19ba <_fpadd_parts+0x10c>
    19b2:	21 e0       	ldi	r18, 0x01	; 1
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	79 01       	movw	r14, r18
    19bc:	8a 01       	movw	r16, r20
    19be:	e6 28       	or	r14, r6
    19c0:	f7 28       	or	r15, r7
    19c2:	08 29       	or	r16, r8
    19c4:	19 29       	or	r17, r9
    19c6:	3c c0       	rjmp	.+120    	; 0x1a40 <_fpadd_parts+0x192>
    19c8:	23 2b       	or	r18, r19
    19ca:	d1 f1       	breq	.+116    	; 0x1a40 <_fpadd_parts+0x192>
    19cc:	26 0e       	add	r2, r22
    19ce:	37 1e       	adc	r3, r23
    19d0:	35 01       	movw	r6, r10
    19d2:	46 01       	movw	r8, r12
    19d4:	06 2e       	mov	r0, r22
    19d6:	04 c0       	rjmp	.+8      	; 0x19e0 <_fpadd_parts+0x132>
    19d8:	96 94       	lsr	r9
    19da:	87 94       	ror	r8
    19dc:	77 94       	ror	r7
    19de:	67 94       	ror	r6
    19e0:	0a 94       	dec	r0
    19e2:	d2 f7       	brpl	.-12     	; 0x19d8 <_fpadd_parts+0x12a>
    19e4:	21 e0       	ldi	r18, 0x01	; 1
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <_fpadd_parts+0x148>
    19ee:	22 0f       	add	r18, r18
    19f0:	33 1f       	adc	r19, r19
    19f2:	44 1f       	adc	r20, r20
    19f4:	55 1f       	adc	r21, r21
    19f6:	6a 95       	dec	r22
    19f8:	d2 f7       	brpl	.-12     	; 0x19ee <_fpadd_parts+0x140>
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	30 40       	sbci	r19, 0x00	; 0
    19fe:	40 40       	sbci	r20, 0x00	; 0
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	2a 21       	and	r18, r10
    1a04:	3b 21       	and	r19, r11
    1a06:	4c 21       	and	r20, r12
    1a08:	5d 21       	and	r21, r13
    1a0a:	21 15       	cp	r18, r1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	41 05       	cpc	r20, r1
    1a10:	51 05       	cpc	r21, r1
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <_fpadd_parts+0x16e>
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	59 01       	movw	r10, r18
    1a1e:	6a 01       	movw	r12, r20
    1a20:	a6 28       	or	r10, r6
    1a22:	b7 28       	or	r11, r7
    1a24:	c8 28       	or	r12, r8
    1a26:	d9 28       	or	r13, r9
    1a28:	0b c0       	rjmp	.+22     	; 0x1a40 <_fpadd_parts+0x192>
    1a2a:	82 15       	cp	r24, r2
    1a2c:	93 05       	cpc	r25, r3
    1a2e:	2c f0       	brlt	.+10     	; 0x1a3a <_fpadd_parts+0x18c>
    1a30:	1c 01       	movw	r2, r24
    1a32:	aa 24       	eor	r10, r10
    1a34:	bb 24       	eor	r11, r11
    1a36:	65 01       	movw	r12, r10
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <_fpadd_parts+0x192>
    1a3a:	ee 24       	eor	r14, r14
    1a3c:	ff 24       	eor	r15, r15
    1a3e:	87 01       	movw	r16, r14
    1a40:	11 96       	adiw	r26, 0x01	; 1
    1a42:	9c 91       	ld	r25, X
    1a44:	d2 01       	movw	r26, r4
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	8c 91       	ld	r24, X
    1a4a:	98 17       	cp	r25, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <_fpadd_parts+0x1a2>
    1a4e:	45 c0       	rjmp	.+138    	; 0x1ada <_fpadd_parts+0x22c>
    1a50:	99 23       	and	r25, r25
    1a52:	39 f0       	breq	.+14     	; 0x1a62 <_fpadd_parts+0x1b4>
    1a54:	a8 01       	movw	r20, r16
    1a56:	97 01       	movw	r18, r14
    1a58:	2a 19       	sub	r18, r10
    1a5a:	3b 09       	sbc	r19, r11
    1a5c:	4c 09       	sbc	r20, r12
    1a5e:	5d 09       	sbc	r21, r13
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <_fpadd_parts+0x1c0>
    1a62:	a6 01       	movw	r20, r12
    1a64:	95 01       	movw	r18, r10
    1a66:	2e 19       	sub	r18, r14
    1a68:	3f 09       	sbc	r19, r15
    1a6a:	40 0b       	sbc	r20, r16
    1a6c:	51 0b       	sbc	r21, r17
    1a6e:	57 fd       	sbrc	r21, 7
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <_fpadd_parts+0x1d4>
    1a72:	11 82       	std	Z+1, r1	; 0x01
    1a74:	33 82       	std	Z+3, r3	; 0x03
    1a76:	22 82       	std	Z+2, r2	; 0x02
    1a78:	24 83       	std	Z+4, r18	; 0x04
    1a7a:	35 83       	std	Z+5, r19	; 0x05
    1a7c:	46 83       	std	Z+6, r20	; 0x06
    1a7e:	57 83       	std	Z+7, r21	; 0x07
    1a80:	1d c0       	rjmp	.+58     	; 0x1abc <_fpadd_parts+0x20e>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	81 83       	std	Z+1, r24	; 0x01
    1a86:	33 82       	std	Z+3, r3	; 0x03
    1a88:	22 82       	std	Z+2, r2	; 0x02
    1a8a:	88 27       	eor	r24, r24
    1a8c:	99 27       	eor	r25, r25
    1a8e:	dc 01       	movw	r26, r24
    1a90:	82 1b       	sub	r24, r18
    1a92:	93 0b       	sbc	r25, r19
    1a94:	a4 0b       	sbc	r26, r20
    1a96:	b5 0b       	sbc	r27, r21
    1a98:	84 83       	std	Z+4, r24	; 0x04
    1a9a:	95 83       	std	Z+5, r25	; 0x05
    1a9c:	a6 83       	std	Z+6, r26	; 0x06
    1a9e:	b7 83       	std	Z+7, r27	; 0x07
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <_fpadd_parts+0x20e>
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	44 1f       	adc	r20, r20
    1aa8:	55 1f       	adc	r21, r21
    1aaa:	24 83       	std	Z+4, r18	; 0x04
    1aac:	35 83       	std	Z+5, r19	; 0x05
    1aae:	46 83       	std	Z+6, r20	; 0x06
    1ab0:	57 83       	std	Z+7, r21	; 0x07
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	93 83       	std	Z+3, r25	; 0x03
    1aba:	82 83       	std	Z+2, r24	; 0x02
    1abc:	24 81       	ldd	r18, Z+4	; 0x04
    1abe:	35 81       	ldd	r19, Z+5	; 0x05
    1ac0:	46 81       	ldd	r20, Z+6	; 0x06
    1ac2:	57 81       	ldd	r21, Z+7	; 0x07
    1ac4:	da 01       	movw	r26, r20
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	a1 09       	sbc	r26, r1
    1acc:	b1 09       	sbc	r27, r1
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	af 4f       	sbci	r26, 0xFF	; 255
    1ad4:	bf 43       	sbci	r27, 0x3F	; 63
    1ad6:	28 f3       	brcs	.-54     	; 0x1aa2 <_fpadd_parts+0x1f4>
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <_fpadd_parts+0x242>
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	33 82       	std	Z+3, r3	; 0x03
    1ade:	22 82       	std	Z+2, r2	; 0x02
    1ae0:	ea 0c       	add	r14, r10
    1ae2:	fb 1c       	adc	r15, r11
    1ae4:	0c 1d       	adc	r16, r12
    1ae6:	1d 1d       	adc	r17, r13
    1ae8:	e4 82       	std	Z+4, r14	; 0x04
    1aea:	f5 82       	std	Z+5, r15	; 0x05
    1aec:	06 83       	std	Z+6, r16	; 0x06
    1aee:	17 83       	std	Z+7, r17	; 0x07
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	80 83       	st	Z, r24
    1af4:	24 81       	ldd	r18, Z+4	; 0x04
    1af6:	35 81       	ldd	r19, Z+5	; 0x05
    1af8:	46 81       	ldd	r20, Z+6	; 0x06
    1afa:	57 81       	ldd	r21, Z+7	; 0x07
    1afc:	57 ff       	sbrs	r21, 7
    1afe:	1a c0       	rjmp	.+52     	; 0x1b34 <_fpadd_parts+0x286>
    1b00:	c9 01       	movw	r24, r18
    1b02:	aa 27       	eor	r26, r26
    1b04:	97 fd       	sbrc	r25, 7
    1b06:	a0 95       	com	r26
    1b08:	ba 2f       	mov	r27, r26
    1b0a:	81 70       	andi	r24, 0x01	; 1
    1b0c:	90 70       	andi	r25, 0x00	; 0
    1b0e:	a0 70       	andi	r26, 0x00	; 0
    1b10:	b0 70       	andi	r27, 0x00	; 0
    1b12:	56 95       	lsr	r21
    1b14:	47 95       	ror	r20
    1b16:	37 95       	ror	r19
    1b18:	27 95       	ror	r18
    1b1a:	82 2b       	or	r24, r18
    1b1c:	93 2b       	or	r25, r19
    1b1e:	a4 2b       	or	r26, r20
    1b20:	b5 2b       	or	r27, r21
    1b22:	84 83       	std	Z+4, r24	; 0x04
    1b24:	95 83       	std	Z+5, r25	; 0x05
    1b26:	a6 83       	std	Z+6, r26	; 0x06
    1b28:	b7 83       	std	Z+7, r27	; 0x07
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	93 83       	std	Z+3, r25	; 0x03
    1b32:	82 83       	std	Z+2, r24	; 0x02
    1b34:	df 01       	movw	r26, r30
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <_fpadd_parts+0x28c>
    1b38:	d2 01       	movw	r26, r4
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	e2 e1       	ldi	r30, 0x12	; 18
    1b42:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__>

00001b46 <__subsf3>:
    1b46:	a0 e2       	ldi	r26, 0x20	; 32
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1b4c:	fd e0       	ldi	r31, 0x0D	; 13
    1b4e:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	7a 83       	std	Y+2, r23	; 0x02
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	2d 83       	std	Y+5, r18	; 0x05
    1b5c:	3e 83       	std	Y+6, r19	; 0x06
    1b5e:	4f 83       	std	Y+7, r20	; 0x07
    1b60:	58 87       	std	Y+8, r21	; 0x08
    1b62:	e9 e0       	ldi	r30, 0x09	; 9
    1b64:	ee 2e       	mov	r14, r30
    1b66:	f1 2c       	mov	r15, r1
    1b68:	ec 0e       	add	r14, r28
    1b6a:	fd 1e       	adc	r15, r29
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	b7 01       	movw	r22, r14
    1b72:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1b76:	8e 01       	movw	r16, r28
    1b78:	0f 5e       	subi	r16, 0xEF	; 239
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	05 96       	adiw	r24, 0x05	; 5
    1b80:	b8 01       	movw	r22, r16
    1b82:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1b86:	8a 89       	ldd	r24, Y+18	; 0x12
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	89 27       	eor	r24, r25
    1b8c:	8a 8b       	std	Y+18, r24	; 0x12
    1b8e:	c7 01       	movw	r24, r14
    1b90:	b8 01       	movw	r22, r16
    1b92:	ae 01       	movw	r20, r28
    1b94:	47 5e       	subi	r20, 0xE7	; 231
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_fpadd_parts>
    1b9c:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    1ba0:	a0 96       	adiw	r28, 0x20	; 32
    1ba2:	e6 e0       	ldi	r30, 0x06	; 6
    1ba4:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

00001ba8 <__addsf3>:
    1ba8:	a0 e2       	ldi	r26, 0x20	; 32
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea ed       	ldi	r30, 0xDA	; 218
    1bae:	fd e0       	ldi	r31, 0x0D	; 13
    1bb0:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
    1bb4:	69 83       	std	Y+1, r22	; 0x01
    1bb6:	7a 83       	std	Y+2, r23	; 0x02
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	4f 83       	std	Y+7, r20	; 0x07
    1bc2:	58 87       	std	Y+8, r21	; 0x08
    1bc4:	f9 e0       	ldi	r31, 0x09	; 9
    1bc6:	ef 2e       	mov	r14, r31
    1bc8:	f1 2c       	mov	r15, r1
    1bca:	ec 0e       	add	r14, r28
    1bcc:	fd 1e       	adc	r15, r29
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1bd8:	8e 01       	movw	r16, r28
    1bda:	0f 5e       	subi	r16, 0xEF	; 239
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	ce 01       	movw	r24, r28
    1be0:	05 96       	adiw	r24, 0x05	; 5
    1be2:	b8 01       	movw	r22, r16
    1be4:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1be8:	c7 01       	movw	r24, r14
    1bea:	b8 01       	movw	r22, r16
    1bec:	ae 01       	movw	r20, r28
    1bee:	47 5e       	subi	r20, 0xE7	; 231
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_fpadd_parts>
    1bf6:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    1bfa:	a0 96       	adiw	r28, 0x20	; 32
    1bfc:	e6 e0       	ldi	r30, 0x06	; 6
    1bfe:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

00001c02 <__mulsf3>:
    1c02:	a0 e2       	ldi	r26, 0x20	; 32
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e7 e0       	ldi	r30, 0x07	; 7
    1c08:	fe e0       	ldi	r31, 0x0E	; 14
    1c0a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__>
    1c0e:	69 83       	std	Y+1, r22	; 0x01
    1c10:	7a 83       	std	Y+2, r23	; 0x02
    1c12:	8b 83       	std	Y+3, r24	; 0x03
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	2d 83       	std	Y+5, r18	; 0x05
    1c18:	3e 83       	std	Y+6, r19	; 0x06
    1c1a:	4f 83       	std	Y+7, r20	; 0x07
    1c1c:	58 87       	std	Y+8, r21	; 0x08
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	be 01       	movw	r22, r28
    1c24:	67 5f       	subi	r22, 0xF7	; 247
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	05 96       	adiw	r24, 0x05	; 5
    1c30:	be 01       	movw	r22, r28
    1c32:	6f 5e       	subi	r22, 0xEF	; 239
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1c3a:	99 85       	ldd	r25, Y+9	; 0x09
    1c3c:	92 30       	cpi	r25, 0x02	; 2
    1c3e:	88 f0       	brcs	.+34     	; 0x1c62 <__mulsf3+0x60>
    1c40:	89 89       	ldd	r24, Y+17	; 0x11
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	c8 f0       	brcs	.+50     	; 0x1c78 <__mulsf3+0x76>
    1c46:	94 30       	cpi	r25, 0x04	; 4
    1c48:	19 f4       	brne	.+6      	; 0x1c50 <__mulsf3+0x4e>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	51 f4       	brne	.+20     	; 0x1c62 <__mulsf3+0x60>
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <__mulsf3+0x56>
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <__mulsf3+0x5c>
    1c54:	92 30       	cpi	r25, 0x02	; 2
    1c56:	81 f4       	brne	.+32     	; 0x1c78 <__mulsf3+0x76>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	c6 c0       	rjmp	.+396    	; 0x1dea <__mulsf3+0x1e8>
    1c5e:	92 30       	cpi	r25, 0x02	; 2
    1c60:	49 f4       	brne	.+18     	; 0x1c74 <__mulsf3+0x72>
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	8a 89       	ldd	r24, Y+18	; 0x12
    1c68:	98 13       	cpse	r25, r24
    1c6a:	21 e0       	ldi	r18, 0x01	; 1
    1c6c:	2a 87       	std	Y+10, r18	; 0x0a
    1c6e:	ce 01       	movw	r24, r28
    1c70:	09 96       	adiw	r24, 0x09	; 9
    1c72:	bb c0       	rjmp	.+374    	; 0x1dea <__mulsf3+0x1e8>
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	49 f4       	brne	.+18     	; 0x1c8a <__mulsf3+0x88>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c7e:	98 13       	cpse	r25, r24
    1c80:	21 e0       	ldi	r18, 0x01	; 1
    1c82:	2a 8b       	std	Y+18, r18	; 0x12
    1c84:	ce 01       	movw	r24, r28
    1c86:	41 96       	adiw	r24, 0x11	; 17
    1c88:	b0 c0       	rjmp	.+352    	; 0x1dea <__mulsf3+0x1e8>
    1c8a:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c8c:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c8e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c90:	58 88       	ldd	r5, Y+16	; 0x10
    1c92:	6d 88       	ldd	r6, Y+21	; 0x15
    1c94:	7e 88       	ldd	r7, Y+22	; 0x16
    1c96:	8f 88       	ldd	r8, Y+23	; 0x17
    1c98:	98 8c       	ldd	r9, Y+24	; 0x18
    1c9a:	ee 24       	eor	r14, r14
    1c9c:	ff 24       	eor	r15, r15
    1c9e:	87 01       	movw	r16, r14
    1ca0:	aa 24       	eor	r10, r10
    1ca2:	bb 24       	eor	r11, r11
    1ca4:	65 01       	movw	r12, r10
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	e0 e0       	ldi	r30, 0x00	; 0
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	c1 01       	movw	r24, r2
    1cb4:	81 70       	andi	r24, 0x01	; 1
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	89 2b       	or	r24, r25
    1cba:	e9 f0       	breq	.+58     	; 0x1cf6 <__mulsf3+0xf4>
    1cbc:	e6 0c       	add	r14, r6
    1cbe:	f7 1c       	adc	r15, r7
    1cc0:	08 1d       	adc	r16, r8
    1cc2:	19 1d       	adc	r17, r9
    1cc4:	9a 01       	movw	r18, r20
    1cc6:	ab 01       	movw	r20, r22
    1cc8:	2a 0d       	add	r18, r10
    1cca:	3b 1d       	adc	r19, r11
    1ccc:	4c 1d       	adc	r20, r12
    1cce:	5d 1d       	adc	r21, r13
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e6 14       	cp	r14, r6
    1cda:	f7 04       	cpc	r15, r7
    1cdc:	08 05       	cpc	r16, r8
    1cde:	19 05       	cpc	r17, r9
    1ce0:	20 f4       	brcc	.+8      	; 0x1cea <__mulsf3+0xe8>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ba 01       	movw	r22, r20
    1cec:	a9 01       	movw	r20, r18
    1cee:	48 0f       	add	r20, r24
    1cf0:	59 1f       	adc	r21, r25
    1cf2:	6a 1f       	adc	r22, r26
    1cf4:	7b 1f       	adc	r23, r27
    1cf6:	aa 0c       	add	r10, r10
    1cf8:	bb 1c       	adc	r11, r11
    1cfa:	cc 1c       	adc	r12, r12
    1cfc:	dd 1c       	adc	r13, r13
    1cfe:	97 fe       	sbrs	r9, 7
    1d00:	08 c0       	rjmp	.+16     	; 0x1d12 <__mulsf3+0x110>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	a8 2a       	or	r10, r24
    1d0c:	b9 2a       	or	r11, r25
    1d0e:	ca 2a       	or	r12, r26
    1d10:	db 2a       	or	r13, r27
    1d12:	31 96       	adiw	r30, 0x01	; 1
    1d14:	e0 32       	cpi	r30, 0x20	; 32
    1d16:	f1 05       	cpc	r31, r1
    1d18:	49 f0       	breq	.+18     	; 0x1d2c <__mulsf3+0x12a>
    1d1a:	66 0c       	add	r6, r6
    1d1c:	77 1c       	adc	r7, r7
    1d1e:	88 1c       	adc	r8, r8
    1d20:	99 1c       	adc	r9, r9
    1d22:	56 94       	lsr	r5
    1d24:	47 94       	ror	r4
    1d26:	37 94       	ror	r3
    1d28:	27 94       	ror	r2
    1d2a:	c3 cf       	rjmp	.-122    	; 0x1cb2 <__mulsf3+0xb0>
    1d2c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d2e:	ea 89       	ldd	r30, Y+18	; 0x12
    1d30:	2b 89       	ldd	r18, Y+19	; 0x13
    1d32:	3c 89       	ldd	r19, Y+20	; 0x14
    1d34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d36:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d38:	28 0f       	add	r18, r24
    1d3a:	39 1f       	adc	r19, r25
    1d3c:	2e 5f       	subi	r18, 0xFE	; 254
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	17 c0       	rjmp	.+46     	; 0x1d70 <__mulsf3+0x16e>
    1d42:	ca 01       	movw	r24, r20
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	89 2b       	or	r24, r25
    1d4a:	61 f0       	breq	.+24     	; 0x1d64 <__mulsf3+0x162>
    1d4c:	16 95       	lsr	r17
    1d4e:	07 95       	ror	r16
    1d50:	f7 94       	ror	r15
    1d52:	e7 94       	ror	r14
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e8       	ldi	r27, 0x80	; 128
    1d5c:	e8 2a       	or	r14, r24
    1d5e:	f9 2a       	or	r15, r25
    1d60:	0a 2b       	or	r16, r26
    1d62:	1b 2b       	or	r17, r27
    1d64:	76 95       	lsr	r23
    1d66:	67 95       	ror	r22
    1d68:	57 95       	ror	r21
    1d6a:	47 95       	ror	r20
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	77 fd       	sbrc	r23, 7
    1d72:	e7 cf       	rjmp	.-50     	; 0x1d42 <__mulsf3+0x140>
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <__mulsf3+0x18c>
    1d76:	44 0f       	add	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	66 1f       	adc	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	17 fd       	sbrc	r17, 7
    1d80:	41 60       	ori	r20, 0x01	; 1
    1d82:	ee 0c       	add	r14, r14
    1d84:	ff 1c       	adc	r15, r15
    1d86:	00 1f       	adc	r16, r16
    1d88:	11 1f       	adc	r17, r17
    1d8a:	21 50       	subi	r18, 0x01	; 1
    1d8c:	30 40       	sbci	r19, 0x00	; 0
    1d8e:	40 30       	cpi	r20, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	59 07       	cpc	r21, r25
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	69 07       	cpc	r22, r25
    1d98:	90 e4       	ldi	r25, 0x40	; 64
    1d9a:	79 07       	cpc	r23, r25
    1d9c:	60 f3       	brcs	.-40     	; 0x1d76 <__mulsf3+0x174>
    1d9e:	2b 8f       	std	Y+27, r18	; 0x1b
    1da0:	3c 8f       	std	Y+28, r19	; 0x1c
    1da2:	db 01       	movw	r26, r22
    1da4:	ca 01       	movw	r24, r20
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	90 70       	andi	r25, 0x00	; 0
    1daa:	a0 70       	andi	r26, 0x00	; 0
    1dac:	b0 70       	andi	r27, 0x00	; 0
    1dae:	80 34       	cpi	r24, 0x40	; 64
    1db0:	91 05       	cpc	r25, r1
    1db2:	a1 05       	cpc	r26, r1
    1db4:	b1 05       	cpc	r27, r1
    1db6:	61 f4       	brne	.+24     	; 0x1dd0 <__mulsf3+0x1ce>
    1db8:	47 fd       	sbrc	r20, 7
    1dba:	0a c0       	rjmp	.+20     	; 0x1dd0 <__mulsf3+0x1ce>
    1dbc:	e1 14       	cp	r14, r1
    1dbe:	f1 04       	cpc	r15, r1
    1dc0:	01 05       	cpc	r16, r1
    1dc2:	11 05       	cpc	r17, r1
    1dc4:	29 f0       	breq	.+10     	; 0x1dd0 <__mulsf3+0x1ce>
    1dc6:	40 5c       	subi	r20, 0xC0	; 192
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	6f 4f       	sbci	r22, 0xFF	; 255
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	40 78       	andi	r20, 0x80	; 128
    1dd0:	1a 8e       	std	Y+26, r1	; 0x1a
    1dd2:	fe 17       	cp	r31, r30
    1dd4:	11 f0       	breq	.+4      	; 0x1dda <__mulsf3+0x1d8>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	8a 8f       	std	Y+26, r24	; 0x1a
    1dda:	4d 8f       	std	Y+29, r20	; 0x1d
    1ddc:	5e 8f       	std	Y+30, r21	; 0x1e
    1dde:	6f 8f       	std	Y+31, r22	; 0x1f
    1de0:	78 a3       	std	Y+32, r23	; 0x20
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	89 8f       	std	Y+25, r24	; 0x19
    1de6:	ce 01       	movw	r24, r28
    1de8:	49 96       	adiw	r24, 0x19	; 25
    1dea:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    1dee:	a0 96       	adiw	r28, 0x20	; 32
    1df0:	e2 e1       	ldi	r30, 0x12	; 18
    1df2:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__>

00001df6 <__divsf3>:
    1df6:	a8 e1       	ldi	r26, 0x18	; 24
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e1 e0       	ldi	r30, 0x01	; 1
    1dfc:	ff e0       	ldi	r31, 0x0F	; 15
    1dfe:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__prologue_saves__+0x10>
    1e02:	69 83       	std	Y+1, r22	; 0x01
    1e04:	7a 83       	std	Y+2, r23	; 0x02
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	2d 83       	std	Y+5, r18	; 0x05
    1e0c:	3e 83       	std	Y+6, r19	; 0x06
    1e0e:	4f 83       	std	Y+7, r20	; 0x07
    1e10:	58 87       	std	Y+8, r21	; 0x08
    1e12:	b9 e0       	ldi	r27, 0x09	; 9
    1e14:	eb 2e       	mov	r14, r27
    1e16:	f1 2c       	mov	r15, r1
    1e18:	ec 0e       	add	r14, r28
    1e1a:	fd 1e       	adc	r15, r29
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	b7 01       	movw	r22, r14
    1e22:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1e26:	8e 01       	movw	r16, r28
    1e28:	0f 5e       	subi	r16, 0xEF	; 239
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	05 96       	adiw	r24, 0x05	; 5
    1e30:	b8 01       	movw	r22, r16
    1e32:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1e36:	29 85       	ldd	r18, Y+9	; 0x09
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	08 f4       	brcc	.+2      	; 0x1e3e <__divsf3+0x48>
    1e3c:	7e c0       	rjmp	.+252    	; 0x1f3a <__divsf3+0x144>
    1e3e:	39 89       	ldd	r19, Y+17	; 0x11
    1e40:	32 30       	cpi	r19, 0x02	; 2
    1e42:	10 f4       	brcc	.+4      	; 0x1e48 <__divsf3+0x52>
    1e44:	b8 01       	movw	r22, r16
    1e46:	7c c0       	rjmp	.+248    	; 0x1f40 <__divsf3+0x14a>
    1e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4c:	89 27       	eor	r24, r25
    1e4e:	8a 87       	std	Y+10, r24	; 0x0a
    1e50:	24 30       	cpi	r18, 0x04	; 4
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <__divsf3+0x62>
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 f4       	brne	.+12     	; 0x1e64 <__divsf3+0x6e>
    1e58:	23 17       	cp	r18, r19
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <__divsf3+0x68>
    1e5c:	6e c0       	rjmp	.+220    	; 0x1f3a <__divsf3+0x144>
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	72 e0       	ldi	r23, 0x02	; 2
    1e62:	6e c0       	rjmp	.+220    	; 0x1f40 <__divsf3+0x14a>
    1e64:	34 30       	cpi	r19, 0x04	; 4
    1e66:	39 f4       	brne	.+14     	; 0x1e76 <__divsf3+0x80>
    1e68:	1d 86       	std	Y+13, r1	; 0x0d
    1e6a:	1e 86       	std	Y+14, r1	; 0x0e
    1e6c:	1f 86       	std	Y+15, r1	; 0x0f
    1e6e:	18 8a       	std	Y+16, r1	; 0x10
    1e70:	1c 86       	std	Y+12, r1	; 0x0c
    1e72:	1b 86       	std	Y+11, r1	; 0x0b
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <__divsf3+0x88>
    1e76:	32 30       	cpi	r19, 0x02	; 2
    1e78:	21 f4       	brne	.+8      	; 0x1e82 <__divsf3+0x8c>
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	89 87       	std	Y+9, r24	; 0x09
    1e7e:	b7 01       	movw	r22, r14
    1e80:	5f c0       	rjmp	.+190    	; 0x1f40 <__divsf3+0x14a>
    1e82:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e84:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e86:	8b 89       	ldd	r24, Y+19	; 0x13
    1e88:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8a:	28 1b       	sub	r18, r24
    1e8c:	39 0b       	sbc	r19, r25
    1e8e:	3c 87       	std	Y+12, r19	; 0x0c
    1e90:	2b 87       	std	Y+11, r18	; 0x0b
    1e92:	ed 84       	ldd	r14, Y+13	; 0x0d
    1e94:	fe 84       	ldd	r15, Y+14	; 0x0e
    1e96:	0f 85       	ldd	r16, Y+15	; 0x0f
    1e98:	18 89       	ldd	r17, Y+16	; 0x10
    1e9a:	ad 88       	ldd	r10, Y+21	; 0x15
    1e9c:	be 88       	ldd	r11, Y+22	; 0x16
    1e9e:	cf 88       	ldd	r12, Y+23	; 0x17
    1ea0:	d8 8c       	ldd	r13, Y+24	; 0x18
    1ea2:	ea 14       	cp	r14, r10
    1ea4:	fb 04       	cpc	r15, r11
    1ea6:	0c 05       	cpc	r16, r12
    1ea8:	1d 05       	cpc	r17, r13
    1eaa:	40 f4       	brcc	.+16     	; 0x1ebc <__divsf3+0xc6>
    1eac:	ee 0c       	add	r14, r14
    1eae:	ff 1c       	adc	r15, r15
    1eb0:	00 1f       	adc	r16, r16
    1eb2:	11 1f       	adc	r17, r17
    1eb4:	21 50       	subi	r18, 0x01	; 1
    1eb6:	30 40       	sbci	r19, 0x00	; 0
    1eb8:	3c 87       	std	Y+12, r19	; 0x0c
    1eba:	2b 87       	std	Y+11, r18	; 0x0b
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e0       	ldi	r26, 0x00	; 0
    1eca:	b0 e4       	ldi	r27, 0x40	; 64
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	ea 14       	cp	r14, r10
    1ed2:	fb 04       	cpc	r15, r11
    1ed4:	0c 05       	cpc	r16, r12
    1ed6:	1d 05       	cpc	r17, r13
    1ed8:	40 f0       	brcs	.+16     	; 0x1eea <__divsf3+0xf4>
    1eda:	28 2b       	or	r18, r24
    1edc:	39 2b       	or	r19, r25
    1ede:	4a 2b       	or	r20, r26
    1ee0:	5b 2b       	or	r21, r27
    1ee2:	ea 18       	sub	r14, r10
    1ee4:	fb 08       	sbc	r15, r11
    1ee6:	0c 09       	sbc	r16, r12
    1ee8:	1d 09       	sbc	r17, r13
    1eea:	b6 95       	lsr	r27
    1eec:	a7 95       	ror	r26
    1eee:	97 95       	ror	r25
    1ef0:	87 95       	ror	r24
    1ef2:	ee 0c       	add	r14, r14
    1ef4:	ff 1c       	adc	r15, r15
    1ef6:	00 1f       	adc	r16, r16
    1ef8:	11 1f       	adc	r17, r17
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	6f 31       	cpi	r22, 0x1F	; 31
    1f00:	71 05       	cpc	r23, r1
    1f02:	31 f7       	brne	.-52     	; 0x1ed0 <__divsf3+0xda>
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	8f 77       	andi	r24, 0x7F	; 127
    1f0a:	90 70       	andi	r25, 0x00	; 0
    1f0c:	a0 70       	andi	r26, 0x00	; 0
    1f0e:	b0 70       	andi	r27, 0x00	; 0
    1f10:	80 34       	cpi	r24, 0x40	; 64
    1f12:	91 05       	cpc	r25, r1
    1f14:	a1 05       	cpc	r26, r1
    1f16:	b1 05       	cpc	r27, r1
    1f18:	61 f4       	brne	.+24     	; 0x1f32 <__divsf3+0x13c>
    1f1a:	27 fd       	sbrc	r18, 7
    1f1c:	0a c0       	rjmp	.+20     	; 0x1f32 <__divsf3+0x13c>
    1f1e:	e1 14       	cp	r14, r1
    1f20:	f1 04       	cpc	r15, r1
    1f22:	01 05       	cpc	r16, r1
    1f24:	11 05       	cpc	r17, r1
    1f26:	29 f0       	breq	.+10     	; 0x1f32 <__divsf3+0x13c>
    1f28:	20 5c       	subi	r18, 0xC0	; 192
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	20 78       	andi	r18, 0x80	; 128
    1f32:	2d 87       	std	Y+13, r18	; 0x0d
    1f34:	3e 87       	std	Y+14, r19	; 0x0e
    1f36:	4f 87       	std	Y+15, r20	; 0x0f
    1f38:	58 8b       	std	Y+16, r21	; 0x10
    1f3a:	be 01       	movw	r22, r28
    1f3c:	67 5f       	subi	r22, 0xF7	; 247
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	cb 01       	movw	r24, r22
    1f42:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    1f46:	68 96       	adiw	r28, 0x18	; 24
    1f48:	ea e0       	ldi	r30, 0x0A	; 10
    1f4a:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__epilogue_restores__+0x10>

00001f4e <__gtsf2>:
    1f4e:	a8 e1       	ldi	r26, 0x18	; 24
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ed ea       	ldi	r30, 0xAD	; 173
    1f54:	ff e0       	ldi	r31, 0x0F	; 15
    1f56:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
    1f5a:	69 83       	std	Y+1, r22	; 0x01
    1f5c:	7a 83       	std	Y+2, r23	; 0x02
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	2d 83       	std	Y+5, r18	; 0x05
    1f64:	3e 83       	std	Y+6, r19	; 0x06
    1f66:	4f 83       	std	Y+7, r20	; 0x07
    1f68:	58 87       	std	Y+8, r21	; 0x08
    1f6a:	89 e0       	ldi	r24, 0x09	; 9
    1f6c:	e8 2e       	mov	r14, r24
    1f6e:	f1 2c       	mov	r15, r1
    1f70:	ec 0e       	add	r14, r28
    1f72:	fd 1e       	adc	r15, r29
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	b7 01       	movw	r22, r14
    1f7a:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1f7e:	8e 01       	movw	r16, r28
    1f80:	0f 5e       	subi	r16, 0xEF	; 239
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	ce 01       	movw	r24, r28
    1f86:	05 96       	adiw	r24, 0x05	; 5
    1f88:	b8 01       	movw	r22, r16
    1f8a:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	40 f0       	brcs	.+16     	; 0x1fa4 <__gtsf2+0x56>
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	28 f0       	brcs	.+10     	; 0x1fa4 <__gtsf2+0x56>
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	b8 01       	movw	r22, r16
    1f9e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fpcmp_parts_f>
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <__gtsf2+0x58>
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	68 96       	adiw	r28, 0x18	; 24
    1fa8:	e6 e0       	ldi	r30, 0x06	; 6
    1faa:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

00001fae <__gesf2>:
    1fae:	a8 e1       	ldi	r26, 0x18	; 24
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ed ed       	ldi	r30, 0xDD	; 221
    1fb4:	ff e0       	ldi	r31, 0x0F	; 15
    1fb6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
    1fba:	69 83       	std	Y+1, r22	; 0x01
    1fbc:	7a 83       	std	Y+2, r23	; 0x02
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	2d 83       	std	Y+5, r18	; 0x05
    1fc4:	3e 83       	std	Y+6, r19	; 0x06
    1fc6:	4f 83       	std	Y+7, r20	; 0x07
    1fc8:	58 87       	std	Y+8, r21	; 0x08
    1fca:	89 e0       	ldi	r24, 0x09	; 9
    1fcc:	e8 2e       	mov	r14, r24
    1fce:	f1 2c       	mov	r15, r1
    1fd0:	ec 0e       	add	r14, r28
    1fd2:	fd 1e       	adc	r15, r29
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	b7 01       	movw	r22, r14
    1fda:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1fde:	8e 01       	movw	r16, r28
    1fe0:	0f 5e       	subi	r16, 0xEF	; 239
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	05 96       	adiw	r24, 0x05	; 5
    1fe8:	b8 01       	movw	r22, r16
    1fea:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	40 f0       	brcs	.+16     	; 0x2004 <__gesf2+0x56>
    1ff4:	89 89       	ldd	r24, Y+17	; 0x11
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	28 f0       	brcs	.+10     	; 0x2004 <__gesf2+0x56>
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	b8 01       	movw	r22, r16
    1ffe:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fpcmp_parts_f>
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <__gesf2+0x58>
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	68 96       	adiw	r28, 0x18	; 24
    2008:	e6 e0       	ldi	r30, 0x06	; 6
    200a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

0000200e <__ltsf2>:
    200e:	a8 e1       	ldi	r26, 0x18	; 24
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ed e0       	ldi	r30, 0x0D	; 13
    2014:	f0 e1       	ldi	r31, 0x10	; 16
    2016:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
    201a:	69 83       	std	Y+1, r22	; 0x01
    201c:	7a 83       	std	Y+2, r23	; 0x02
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	2d 83       	std	Y+5, r18	; 0x05
    2024:	3e 83       	std	Y+6, r19	; 0x06
    2026:	4f 83       	std	Y+7, r20	; 0x07
    2028:	58 87       	std	Y+8, r21	; 0x08
    202a:	89 e0       	ldi	r24, 0x09	; 9
    202c:	e8 2e       	mov	r14, r24
    202e:	f1 2c       	mov	r15, r1
    2030:	ec 0e       	add	r14, r28
    2032:	fd 1e       	adc	r15, r29
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	b7 01       	movw	r22, r14
    203a:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    203e:	8e 01       	movw	r16, r28
    2040:	0f 5e       	subi	r16, 0xEF	; 239
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	ce 01       	movw	r24, r28
    2046:	05 96       	adiw	r24, 0x05	; 5
    2048:	b8 01       	movw	r22, r16
    204a:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	40 f0       	brcs	.+16     	; 0x2064 <__ltsf2+0x56>
    2054:	89 89       	ldd	r24, Y+17	; 0x11
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	28 f0       	brcs	.+10     	; 0x2064 <__ltsf2+0x56>
    205a:	c7 01       	movw	r24, r14
    205c:	b8 01       	movw	r22, r16
    205e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fpcmp_parts_f>
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__ltsf2+0x58>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	68 96       	adiw	r28, 0x18	; 24
    2068:	e6 e0       	ldi	r30, 0x06	; 6
    206a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

0000206e <__floatsisf>:
    206e:	a8 e0       	ldi	r26, 0x08	; 8
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ed e3       	ldi	r30, 0x3D	; 61
    2074:	f0 e1       	ldi	r31, 0x10	; 16
    2076:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x12>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	88 27       	eor	r24, r24
    2088:	b7 fd       	sbrc	r27, 7
    208a:	83 95       	inc	r24
    208c:	99 27       	eor	r25, r25
    208e:	aa 27       	eor	r26, r26
    2090:	bb 27       	eor	r27, r27
    2092:	b8 2e       	mov	r11, r24
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	41 05       	cpc	r20, r1
    209a:	51 05       	cpc	r21, r1
    209c:	19 f4       	brne	.+6      	; 0x20a4 <__floatsisf+0x36>
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	3a c0       	rjmp	.+116    	; 0x2118 <__floatsisf+0xaa>
    20a4:	88 23       	and	r24, r24
    20a6:	a9 f0       	breq	.+42     	; 0x20d2 <__floatsisf+0x64>
    20a8:	20 30       	cpi	r18, 0x00	; 0
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	38 07       	cpc	r19, r24
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	48 07       	cpc	r20, r24
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	58 07       	cpc	r21, r24
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <__floatsisf+0x54>
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	9f ec       	ldi	r25, 0xCF	; 207
    20c0:	30 c0       	rjmp	.+96     	; 0x2122 <__floatsisf+0xb4>
    20c2:	ee 24       	eor	r14, r14
    20c4:	ff 24       	eor	r15, r15
    20c6:	87 01       	movw	r16, r14
    20c8:	e2 1a       	sub	r14, r18
    20ca:	f3 0a       	sbc	r15, r19
    20cc:	04 0b       	sbc	r16, r20
    20ce:	15 0b       	sbc	r17, r21
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <__floatsisf+0x68>
    20d2:	79 01       	movw	r14, r18
    20d4:	8a 01       	movw	r16, r20
    20d6:	8e e1       	ldi	r24, 0x1E	; 30
    20d8:	c8 2e       	mov	r12, r24
    20da:	d1 2c       	mov	r13, r1
    20dc:	dc 82       	std	Y+4, r13	; 0x04
    20de:	cb 82       	std	Y+3, r12	; 0x03
    20e0:	ed 82       	std	Y+5, r14	; 0x05
    20e2:	fe 82       	std	Y+6, r15	; 0x06
    20e4:	0f 83       	std	Y+7, r16	; 0x07
    20e6:	18 87       	std	Y+8, r17	; 0x08
    20e8:	c8 01       	movw	r24, r16
    20ea:	b7 01       	movw	r22, r14
    20ec:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__clzsi2>
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	18 16       	cp	r1, r24
    20f4:	19 06       	cpc	r1, r25
    20f6:	84 f4       	brge	.+32     	; 0x2118 <__floatsisf+0xaa>
    20f8:	08 2e       	mov	r0, r24
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__floatsisf+0x96>
    20fc:	ee 0c       	add	r14, r14
    20fe:	ff 1c       	adc	r15, r15
    2100:	00 1f       	adc	r16, r16
    2102:	11 1f       	adc	r17, r17
    2104:	0a 94       	dec	r0
    2106:	d2 f7       	brpl	.-12     	; 0x20fc <__floatsisf+0x8e>
    2108:	ed 82       	std	Y+5, r14	; 0x05
    210a:	fe 82       	std	Y+6, r15	; 0x06
    210c:	0f 83       	std	Y+7, r16	; 0x07
    210e:	18 87       	std	Y+8, r17	; 0x08
    2110:	c8 1a       	sub	r12, r24
    2112:	d9 0a       	sbc	r13, r25
    2114:	dc 82       	std	Y+4, r13	; 0x04
    2116:	cb 82       	std	Y+3, r12	; 0x03
    2118:	ba 82       	std	Y+2, r11	; 0x02
    211a:	ce 01       	movw	r24, r28
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    2122:	28 96       	adiw	r28, 0x08	; 8
    2124:	e9 e0       	ldi	r30, 0x09	; 9
    2126:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x12>

0000212a <__fixsfsi>:
    212a:	ac e0       	ldi	r26, 0x0C	; 12
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	eb e9       	ldi	r30, 0x9B	; 155
    2130:	f0 e1       	ldi	r31, 0x10	; 16
    2132:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x20>
    2136:	69 83       	std	Y+1, r22	; 0x01
    2138:	7a 83       	std	Y+2, r23	; 0x02
    213a:	8b 83       	std	Y+3, r24	; 0x03
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	be 01       	movw	r22, r28
    2144:	6b 5f       	subi	r22, 0xFB	; 251
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	0e 94 86 12 	call	0x250c	; 0x250c <__unpack_f>
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	61 f1       	breq	.+88     	; 0x21aa <__fixsfsi+0x80>
    2152:	82 30       	cpi	r24, 0x02	; 2
    2154:	50 f1       	brcs	.+84     	; 0x21aa <__fixsfsi+0x80>
    2156:	84 30       	cpi	r24, 0x04	; 4
    2158:	21 f4       	brne	.+8      	; 0x2162 <__fixsfsi+0x38>
    215a:	8e 81       	ldd	r24, Y+6	; 0x06
    215c:	88 23       	and	r24, r24
    215e:	51 f1       	breq	.+84     	; 0x21b4 <__fixsfsi+0x8a>
    2160:	2e c0       	rjmp	.+92     	; 0x21be <__fixsfsi+0x94>
    2162:	2f 81       	ldd	r18, Y+7	; 0x07
    2164:	38 85       	ldd	r19, Y+8	; 0x08
    2166:	37 fd       	sbrc	r19, 7
    2168:	20 c0       	rjmp	.+64     	; 0x21aa <__fixsfsi+0x80>
    216a:	6e 81       	ldd	r22, Y+6	; 0x06
    216c:	2f 31       	cpi	r18, 0x1F	; 31
    216e:	31 05       	cpc	r19, r1
    2170:	1c f0       	brlt	.+6      	; 0x2178 <__fixsfsi+0x4e>
    2172:	66 23       	and	r22, r22
    2174:	f9 f0       	breq	.+62     	; 0x21b4 <__fixsfsi+0x8a>
    2176:	23 c0       	rjmp	.+70     	; 0x21be <__fixsfsi+0x94>
    2178:	8e e1       	ldi	r24, 0x1E	; 30
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	82 1b       	sub	r24, r18
    217e:	93 0b       	sbc	r25, r19
    2180:	29 85       	ldd	r18, Y+9	; 0x09
    2182:	3a 85       	ldd	r19, Y+10	; 0x0a
    2184:	4b 85       	ldd	r20, Y+11	; 0x0b
    2186:	5c 85       	ldd	r21, Y+12	; 0x0c
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <__fixsfsi+0x68>
    218a:	56 95       	lsr	r21
    218c:	47 95       	ror	r20
    218e:	37 95       	ror	r19
    2190:	27 95       	ror	r18
    2192:	8a 95       	dec	r24
    2194:	d2 f7       	brpl	.-12     	; 0x218a <__fixsfsi+0x60>
    2196:	66 23       	and	r22, r22
    2198:	b1 f0       	breq	.+44     	; 0x21c6 <__fixsfsi+0x9c>
    219a:	50 95       	com	r21
    219c:	40 95       	com	r20
    219e:	30 95       	com	r19
    21a0:	21 95       	neg	r18
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	4f 4f       	sbci	r20, 0xFF	; 255
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255
    21a8:	0e c0       	rjmp	.+28     	; 0x21c6 <__fixsfsi+0x9c>
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <__fixsfsi+0x9c>
    21b4:	2f ef       	ldi	r18, 0xFF	; 255
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f ef       	ldi	r20, 0xFF	; 255
    21ba:	5f e7       	ldi	r21, 0x7F	; 127
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <__fixsfsi+0x9c>
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e8       	ldi	r21, 0x80	; 128
    21c6:	b9 01       	movw	r22, r18
    21c8:	ca 01       	movw	r24, r20
    21ca:	2c 96       	adiw	r28, 0x0c	; 12
    21cc:	e2 e0       	ldi	r30, 0x02	; 2
    21ce:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x20>

000021d2 <__floatunsisf>:
    21d2:	a8 e0       	ldi	r26, 0x08	; 8
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__prologue_saves__+0x10>
    21de:	7b 01       	movw	r14, r22
    21e0:	8c 01       	movw	r16, r24
    21e2:	61 15       	cp	r22, r1
    21e4:	71 05       	cpc	r23, r1
    21e6:	81 05       	cpc	r24, r1
    21e8:	91 05       	cpc	r25, r1
    21ea:	19 f4       	brne	.+6      	; 0x21f2 <__floatunsisf+0x20>
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	60 c0       	rjmp	.+192    	; 0x22b2 <__stack+0xb3>
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	8e e1       	ldi	r24, 0x1E	; 30
    21f8:	c8 2e       	mov	r12, r24
    21fa:	d1 2c       	mov	r13, r1
    21fc:	dc 82       	std	Y+4, r13	; 0x04
    21fe:	cb 82       	std	Y+3, r12	; 0x03
    2200:	ed 82       	std	Y+5, r14	; 0x05
    2202:	fe 82       	std	Y+6, r15	; 0x06
    2204:	0f 83       	std	Y+7, r16	; 0x07
    2206:	18 87       	std	Y+8, r17	; 0x08
    2208:	c8 01       	movw	r24, r16
    220a:	b7 01       	movw	r22, r14
    220c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__clzsi2>
    2210:	fc 01       	movw	r30, r24
    2212:	31 97       	sbiw	r30, 0x01	; 1
    2214:	f7 ff       	sbrs	r31, 7
    2216:	3b c0       	rjmp	.+118    	; 0x228e <__stack+0x8f>
    2218:	22 27       	eor	r18, r18
    221a:	33 27       	eor	r19, r19
    221c:	2e 1b       	sub	r18, r30
    221e:	3f 0b       	sbc	r19, r31
    2220:	57 01       	movw	r10, r14
    2222:	68 01       	movw	r12, r16
    2224:	02 2e       	mov	r0, r18
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <__stack+0x31>
    2228:	d6 94       	lsr	r13
    222a:	c7 94       	ror	r12
    222c:	b7 94       	ror	r11
    222e:	a7 94       	ror	r10
    2230:	0a 94       	dec	r0
    2232:	d2 f7       	brpl	.-12     	; 0x2228 <__stack+0x29>
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e0       	ldi	r26, 0x00	; 0
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	04 c0       	rjmp	.+8      	; 0x224e <__stack+0x4f>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	aa 1f       	adc	r26, r26
    224c:	bb 1f       	adc	r27, r27
    224e:	2a 95       	dec	r18
    2250:	d2 f7       	brpl	.-12     	; 0x2246 <__stack+0x47>
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	a1 09       	sbc	r26, r1
    2256:	b1 09       	sbc	r27, r1
    2258:	8e 21       	and	r24, r14
    225a:	9f 21       	and	r25, r15
    225c:	a0 23       	and	r26, r16
    225e:	b1 23       	and	r27, r17
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	a1 05       	cpc	r26, r1
    2264:	b1 05       	cpc	r27, r1
    2266:	21 f0       	breq	.+8      	; 0x2270 <__stack+0x71>
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	4a 29       	or	r20, r10
    2272:	5b 29       	or	r21, r11
    2274:	6c 29       	or	r22, r12
    2276:	7d 29       	or	r23, r13
    2278:	4d 83       	std	Y+5, r20	; 0x05
    227a:	5e 83       	std	Y+6, r21	; 0x06
    227c:	6f 83       	std	Y+7, r22	; 0x07
    227e:	78 87       	std	Y+8, r23	; 0x08
    2280:	8e e1       	ldi	r24, 0x1E	; 30
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	8e 1b       	sub	r24, r30
    2286:	9f 0b       	sbc	r25, r31
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	12 c0       	rjmp	.+36     	; 0x22b2 <__stack+0xb3>
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	81 f0       	breq	.+32     	; 0x22b2 <__stack+0xb3>
    2292:	0e 2e       	mov	r0, r30
    2294:	04 c0       	rjmp	.+8      	; 0x229e <__stack+0x9f>
    2296:	ee 0c       	add	r14, r14
    2298:	ff 1c       	adc	r15, r15
    229a:	00 1f       	adc	r16, r16
    229c:	11 1f       	adc	r17, r17
    229e:	0a 94       	dec	r0
    22a0:	d2 f7       	brpl	.-12     	; 0x2296 <__stack+0x97>
    22a2:	ed 82       	std	Y+5, r14	; 0x05
    22a4:	fe 82       	std	Y+6, r15	; 0x06
    22a6:	0f 83       	std	Y+7, r16	; 0x07
    22a8:	18 87       	std	Y+8, r17	; 0x08
    22aa:	ce 1a       	sub	r12, r30
    22ac:	df 0a       	sbc	r13, r31
    22ae:	dc 82       	std	Y+4, r13	; 0x04
    22b0:	cb 82       	std	Y+3, r12	; 0x03
    22b2:	1a 82       	std	Y+2, r1	; 0x02
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	0e 94 b1 11 	call	0x2362	; 0x2362 <__pack_f>
    22bc:	28 96       	adiw	r28, 0x08	; 8
    22be:	ea e0       	ldi	r30, 0x0A	; 10
    22c0:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__epilogue_restores__+0x10>

000022c4 <__clzsi2>:
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	7b 01       	movw	r14, r22
    22ce:	8c 01       	movw	r16, r24
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	e8 16       	cp	r14, r24
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	f8 06       	cpc	r15, r24
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	08 07       	cpc	r16, r24
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	18 07       	cpc	r17, r24
    22e0:	88 f4       	brcc	.+34     	; 0x2304 <__clzsi2+0x40>
    22e2:	8f ef       	ldi	r24, 0xFF	; 255
    22e4:	e8 16       	cp	r14, r24
    22e6:	f1 04       	cpc	r15, r1
    22e8:	01 05       	cpc	r16, r1
    22ea:	11 05       	cpc	r17, r1
    22ec:	31 f0       	breq	.+12     	; 0x22fa <__clzsi2+0x36>
    22ee:	28 f0       	brcs	.+10     	; 0x22fa <__clzsi2+0x36>
    22f0:	88 e0       	ldi	r24, 0x08	; 8
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	17 c0       	rjmp	.+46     	; 0x2328 <__clzsi2+0x64>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e0       	ldi	r26, 0x00	; 0
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	12 c0       	rjmp	.+36     	; 0x2328 <__clzsi2+0x64>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	e8 16       	cp	r14, r24
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	f8 06       	cpc	r15, r24
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	08 07       	cpc	r16, r24
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	18 07       	cpc	r17, r24
    2314:	28 f0       	brcs	.+10     	; 0x2320 <__clzsi2+0x5c>
    2316:	88 e1       	ldi	r24, 0x18	; 24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e0       	ldi	r26, 0x00	; 0
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <__clzsi2+0x64>
    2320:	80 e1       	ldi	r24, 0x10	; 16
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 e0       	ldi	r26, 0x00	; 0
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	20 e2       	ldi	r18, 0x20	; 32
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	28 1b       	sub	r18, r24
    2332:	39 0b       	sbc	r19, r25
    2334:	4a 0b       	sbc	r20, r26
    2336:	5b 0b       	sbc	r21, r27
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <__clzsi2+0x7e>
    233a:	16 95       	lsr	r17
    233c:	07 95       	ror	r16
    233e:	f7 94       	ror	r15
    2340:	e7 94       	ror	r14
    2342:	8a 95       	dec	r24
    2344:	d2 f7       	brpl	.-12     	; 0x233a <__clzsi2+0x76>
    2346:	f7 01       	movw	r30, r14
    2348:	e8 5f       	subi	r30, 0xF8	; 248
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	80 81       	ld	r24, Z
    234e:	28 1b       	sub	r18, r24
    2350:	31 09       	sbc	r19, r1
    2352:	41 09       	sbc	r20, r1
    2354:	51 09       	sbc	r21, r1
    2356:	c9 01       	movw	r24, r18
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	08 95       	ret

00002362 <__pack_f>:
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	fc 01       	movw	r30, r24
    236e:	e4 80       	ldd	r14, Z+4	; 0x04
    2370:	f5 80       	ldd	r15, Z+5	; 0x05
    2372:	06 81       	ldd	r16, Z+6	; 0x06
    2374:	17 81       	ldd	r17, Z+7	; 0x07
    2376:	d1 80       	ldd	r13, Z+1	; 0x01
    2378:	80 81       	ld	r24, Z
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	48 f4       	brcc	.+18     	; 0x2390 <__pack_f+0x2e>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e1       	ldi	r26, 0x10	; 16
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e8 2a       	or	r14, r24
    2388:	f9 2a       	or	r15, r25
    238a:	0a 2b       	or	r16, r26
    238c:	1b 2b       	or	r17, r27
    238e:	a5 c0       	rjmp	.+330    	; 0x24da <__pack_f+0x178>
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	09 f4       	brne	.+2      	; 0x2396 <__pack_f+0x34>
    2394:	9f c0       	rjmp	.+318    	; 0x24d4 <__pack_f+0x172>
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	21 f4       	brne	.+8      	; 0x23a2 <__pack_f+0x40>
    239a:	ee 24       	eor	r14, r14
    239c:	ff 24       	eor	r15, r15
    239e:	87 01       	movw	r16, r14
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <__pack_f+0x4a>
    23a2:	e1 14       	cp	r14, r1
    23a4:	f1 04       	cpc	r15, r1
    23a6:	01 05       	cpc	r16, r1
    23a8:	11 05       	cpc	r17, r1
    23aa:	19 f4       	brne	.+6      	; 0x23b2 <__pack_f+0x50>
    23ac:	e0 e0       	ldi	r30, 0x00	; 0
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	96 c0       	rjmp	.+300    	; 0x24de <__pack_f+0x17c>
    23b2:	62 81       	ldd	r22, Z+2	; 0x02
    23b4:	73 81       	ldd	r23, Z+3	; 0x03
    23b6:	9f ef       	ldi	r25, 0xFF	; 255
    23b8:	62 38       	cpi	r22, 0x82	; 130
    23ba:	79 07       	cpc	r23, r25
    23bc:	0c f0       	brlt	.+2      	; 0x23c0 <__pack_f+0x5e>
    23be:	5b c0       	rjmp	.+182    	; 0x2476 <__pack_f+0x114>
    23c0:	22 e8       	ldi	r18, 0x82	; 130
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	26 1b       	sub	r18, r22
    23c6:	37 0b       	sbc	r19, r23
    23c8:	2a 31       	cpi	r18, 0x1A	; 26
    23ca:	31 05       	cpc	r19, r1
    23cc:	2c f0       	brlt	.+10     	; 0x23d8 <__pack_f+0x76>
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	2a c0       	rjmp	.+84     	; 0x242c <__pack_f+0xca>
    23d8:	b8 01       	movw	r22, r16
    23da:	a7 01       	movw	r20, r14
    23dc:	02 2e       	mov	r0, r18
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__pack_f+0x86>
    23e0:	76 95       	lsr	r23
    23e2:	67 95       	ror	r22
    23e4:	57 95       	ror	r21
    23e6:	47 95       	ror	r20
    23e8:	0a 94       	dec	r0
    23ea:	d2 f7       	brpl	.-12     	; 0x23e0 <__pack_f+0x7e>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <__pack_f+0x9c>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	aa 1f       	adc	r26, r26
    23fc:	bb 1f       	adc	r27, r27
    23fe:	2a 95       	dec	r18
    2400:	d2 f7       	brpl	.-12     	; 0x23f6 <__pack_f+0x94>
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	a1 09       	sbc	r26, r1
    2406:	b1 09       	sbc	r27, r1
    2408:	8e 21       	and	r24, r14
    240a:	9f 21       	and	r25, r15
    240c:	a0 23       	and	r26, r16
    240e:	b1 23       	and	r27, r17
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	a1 05       	cpc	r26, r1
    2414:	b1 05       	cpc	r27, r1
    2416:	21 f0       	breq	.+8      	; 0x2420 <__pack_f+0xbe>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	9a 01       	movw	r18, r20
    2422:	ab 01       	movw	r20, r22
    2424:	28 2b       	or	r18, r24
    2426:	39 2b       	or	r19, r25
    2428:	4a 2b       	or	r20, r26
    242a:	5b 2b       	or	r21, r27
    242c:	da 01       	movw	r26, r20
    242e:	c9 01       	movw	r24, r18
    2430:	8f 77       	andi	r24, 0x7F	; 127
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	a0 70       	andi	r26, 0x00	; 0
    2436:	b0 70       	andi	r27, 0x00	; 0
    2438:	80 34       	cpi	r24, 0x40	; 64
    243a:	91 05       	cpc	r25, r1
    243c:	a1 05       	cpc	r26, r1
    243e:	b1 05       	cpc	r27, r1
    2440:	39 f4       	brne	.+14     	; 0x2450 <__pack_f+0xee>
    2442:	27 ff       	sbrs	r18, 7
    2444:	09 c0       	rjmp	.+18     	; 0x2458 <__pack_f+0xf6>
    2446:	20 5c       	subi	r18, 0xC0	; 192
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	4f 4f       	sbci	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <__pack_f+0xf6>
    2450:	21 5c       	subi	r18, 0xC1	; 193
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	4f 4f       	sbci	r20, 0xFF	; 255
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	e0 e0       	ldi	r30, 0x00	; 0
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	20 30       	cpi	r18, 0x00	; 0
    245e:	a0 e0       	ldi	r26, 0x00	; 0
    2460:	3a 07       	cpc	r19, r26
    2462:	a0 e0       	ldi	r26, 0x00	; 0
    2464:	4a 07       	cpc	r20, r26
    2466:	a0 e4       	ldi	r26, 0x40	; 64
    2468:	5a 07       	cpc	r21, r26
    246a:	10 f0       	brcs	.+4      	; 0x2470 <__pack_f+0x10e>
    246c:	e1 e0       	ldi	r30, 0x01	; 1
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	79 01       	movw	r14, r18
    2472:	8a 01       	movw	r16, r20
    2474:	27 c0       	rjmp	.+78     	; 0x24c4 <__pack_f+0x162>
    2476:	60 38       	cpi	r22, 0x80	; 128
    2478:	71 05       	cpc	r23, r1
    247a:	64 f5       	brge	.+88     	; 0x24d4 <__pack_f+0x172>
    247c:	fb 01       	movw	r30, r22
    247e:	e1 58       	subi	r30, 0x81	; 129
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	d8 01       	movw	r26, r16
    2484:	c7 01       	movw	r24, r14
    2486:	8f 77       	andi	r24, 0x7F	; 127
    2488:	90 70       	andi	r25, 0x00	; 0
    248a:	a0 70       	andi	r26, 0x00	; 0
    248c:	b0 70       	andi	r27, 0x00	; 0
    248e:	80 34       	cpi	r24, 0x40	; 64
    2490:	91 05       	cpc	r25, r1
    2492:	a1 05       	cpc	r26, r1
    2494:	b1 05       	cpc	r27, r1
    2496:	39 f4       	brne	.+14     	; 0x24a6 <__pack_f+0x144>
    2498:	e7 fe       	sbrs	r14, 7
    249a:	0d c0       	rjmp	.+26     	; 0x24b6 <__pack_f+0x154>
    249c:	80 e4       	ldi	r24, 0x40	; 64
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <__pack_f+0x14c>
    24a6:	8f e3       	ldi	r24, 0x3F	; 63
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e8 0e       	add	r14, r24
    24b0:	f9 1e       	adc	r15, r25
    24b2:	0a 1f       	adc	r16, r26
    24b4:	1b 1f       	adc	r17, r27
    24b6:	17 ff       	sbrs	r17, 7
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <__pack_f+0x162>
    24ba:	16 95       	lsr	r17
    24bc:	07 95       	ror	r16
    24be:	f7 94       	ror	r15
    24c0:	e7 94       	ror	r14
    24c2:	31 96       	adiw	r30, 0x01	; 1
    24c4:	87 e0       	ldi	r24, 0x07	; 7
    24c6:	16 95       	lsr	r17
    24c8:	07 95       	ror	r16
    24ca:	f7 94       	ror	r15
    24cc:	e7 94       	ror	r14
    24ce:	8a 95       	dec	r24
    24d0:	d1 f7       	brne	.-12     	; 0x24c6 <__pack_f+0x164>
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <__pack_f+0x17c>
    24d4:	ee 24       	eor	r14, r14
    24d6:	ff 24       	eor	r15, r15
    24d8:	87 01       	movw	r16, r14
    24da:	ef ef       	ldi	r30, 0xFF	; 255
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	6e 2f       	mov	r22, r30
    24e0:	67 95       	ror	r22
    24e2:	66 27       	eor	r22, r22
    24e4:	67 95       	ror	r22
    24e6:	90 2f       	mov	r25, r16
    24e8:	9f 77       	andi	r25, 0x7F	; 127
    24ea:	d7 94       	ror	r13
    24ec:	dd 24       	eor	r13, r13
    24ee:	d7 94       	ror	r13
    24f0:	8e 2f       	mov	r24, r30
    24f2:	86 95       	lsr	r24
    24f4:	49 2f       	mov	r20, r25
    24f6:	46 2b       	or	r20, r22
    24f8:	58 2f       	mov	r21, r24
    24fa:	5d 29       	or	r21, r13
    24fc:	b7 01       	movw	r22, r14
    24fe:	ca 01       	movw	r24, r20
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	08 95       	ret

0000250c <__unpack_f>:
    250c:	fc 01       	movw	r30, r24
    250e:	db 01       	movw	r26, r22
    2510:	40 81       	ld	r20, Z
    2512:	51 81       	ldd	r21, Z+1	; 0x01
    2514:	22 81       	ldd	r18, Z+2	; 0x02
    2516:	62 2f       	mov	r22, r18
    2518:	6f 77       	andi	r22, 0x7F	; 127
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	22 1f       	adc	r18, r18
    251e:	22 27       	eor	r18, r18
    2520:	22 1f       	adc	r18, r18
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	89 2f       	mov	r24, r25
    2526:	88 0f       	add	r24, r24
    2528:	82 2b       	or	r24, r18
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	99 1f       	adc	r25, r25
    2530:	99 27       	eor	r25, r25
    2532:	99 1f       	adc	r25, r25
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	11 97       	sbiw	r26, 0x01	; 1
    253a:	21 15       	cp	r18, r1
    253c:	31 05       	cpc	r19, r1
    253e:	a9 f5       	brne	.+106    	; 0x25aa <__unpack_f+0x9e>
    2540:	41 15       	cp	r20, r1
    2542:	51 05       	cpc	r21, r1
    2544:	61 05       	cpc	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	11 f4       	brne	.+4      	; 0x254e <__unpack_f+0x42>
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	37 c0       	rjmp	.+110    	; 0x25bc <__unpack_f+0xb0>
    254e:	82 e8       	ldi	r24, 0x82	; 130
    2550:	9f ef       	ldi	r25, 0xFF	; 255
    2552:	13 96       	adiw	r26, 0x03	; 3
    2554:	9c 93       	st	X, r25
    2556:	8e 93       	st	-X, r24
    2558:	12 97       	sbiw	r26, 0x02	; 2
    255a:	9a 01       	movw	r18, r20
    255c:	ab 01       	movw	r20, r22
    255e:	67 e0       	ldi	r22, 0x07	; 7
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	44 1f       	adc	r20, r20
    2566:	55 1f       	adc	r21, r21
    2568:	6a 95       	dec	r22
    256a:	d1 f7       	brne	.-12     	; 0x2560 <__unpack_f+0x54>
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	8c 93       	st	X, r24
    2570:	0d c0       	rjmp	.+26     	; 0x258c <__unpack_f+0x80>
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	44 1f       	adc	r20, r20
    2578:	55 1f       	adc	r21, r21
    257a:	12 96       	adiw	r26, 0x02	; 2
    257c:	8d 91       	ld	r24, X+
    257e:	9c 91       	ld	r25, X
    2580:	13 97       	sbiw	r26, 0x03	; 3
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	13 96       	adiw	r26, 0x03	; 3
    2586:	9c 93       	st	X, r25
    2588:	8e 93       	st	-X, r24
    258a:	12 97       	sbiw	r26, 0x02	; 2
    258c:	20 30       	cpi	r18, 0x00	; 0
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	38 07       	cpc	r19, r24
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	48 07       	cpc	r20, r24
    2596:	80 e4       	ldi	r24, 0x40	; 64
    2598:	58 07       	cpc	r21, r24
    259a:	58 f3       	brcs	.-42     	; 0x2572 <__unpack_f+0x66>
    259c:	14 96       	adiw	r26, 0x04	; 4
    259e:	2d 93       	st	X+, r18
    25a0:	3d 93       	st	X+, r19
    25a2:	4d 93       	st	X+, r20
    25a4:	5c 93       	st	X, r21
    25a6:	17 97       	sbiw	r26, 0x07	; 7
    25a8:	08 95       	ret
    25aa:	2f 3f       	cpi	r18, 0xFF	; 255
    25ac:	31 05       	cpc	r19, r1
    25ae:	79 f4       	brne	.+30     	; 0x25ce <__unpack_f+0xc2>
    25b0:	41 15       	cp	r20, r1
    25b2:	51 05       	cpc	r21, r1
    25b4:	61 05       	cpc	r22, r1
    25b6:	71 05       	cpc	r23, r1
    25b8:	19 f4       	brne	.+6      	; 0x25c0 <__unpack_f+0xb4>
    25ba:	84 e0       	ldi	r24, 0x04	; 4
    25bc:	8c 93       	st	X, r24
    25be:	08 95       	ret
    25c0:	64 ff       	sbrs	r22, 4
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <__unpack_f+0xbe>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	8c 93       	st	X, r24
    25c8:	12 c0       	rjmp	.+36     	; 0x25ee <__unpack_f+0xe2>
    25ca:	1c 92       	st	X, r1
    25cc:	10 c0       	rjmp	.+32     	; 0x25ee <__unpack_f+0xe2>
    25ce:	2f 57       	subi	r18, 0x7F	; 127
    25d0:	30 40       	sbci	r19, 0x00	; 0
    25d2:	13 96       	adiw	r26, 0x03	; 3
    25d4:	3c 93       	st	X, r19
    25d6:	2e 93       	st	-X, r18
    25d8:	12 97       	sbiw	r26, 0x02	; 2
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	8c 93       	st	X, r24
    25de:	87 e0       	ldi	r24, 0x07	; 7
    25e0:	44 0f       	add	r20, r20
    25e2:	55 1f       	adc	r21, r21
    25e4:	66 1f       	adc	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	8a 95       	dec	r24
    25ea:	d1 f7       	brne	.-12     	; 0x25e0 <__unpack_f+0xd4>
    25ec:	70 64       	ori	r23, 0x40	; 64
    25ee:	14 96       	adiw	r26, 0x04	; 4
    25f0:	4d 93       	st	X+, r20
    25f2:	5d 93       	st	X+, r21
    25f4:	6d 93       	st	X+, r22
    25f6:	7c 93       	st	X, r23
    25f8:	17 97       	sbiw	r26, 0x07	; 7
    25fa:	08 95       	ret

000025fc <__fpcmp_parts_f>:
    25fc:	1f 93       	push	r17
    25fe:	dc 01       	movw	r26, r24
    2600:	fb 01       	movw	r30, r22
    2602:	9c 91       	ld	r25, X
    2604:	92 30       	cpi	r25, 0x02	; 2
    2606:	08 f4       	brcc	.+2      	; 0x260a <__fpcmp_parts_f+0xe>
    2608:	47 c0       	rjmp	.+142    	; 0x2698 <__fpcmp_parts_f+0x9c>
    260a:	80 81       	ld	r24, Z
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	08 f4       	brcc	.+2      	; 0x2612 <__fpcmp_parts_f+0x16>
    2610:	43 c0       	rjmp	.+134    	; 0x2698 <__fpcmp_parts_f+0x9c>
    2612:	94 30       	cpi	r25, 0x04	; 4
    2614:	51 f4       	brne	.+20     	; 0x262a <__fpcmp_parts_f+0x2e>
    2616:	11 96       	adiw	r26, 0x01	; 1
    2618:	1c 91       	ld	r17, X
    261a:	84 30       	cpi	r24, 0x04	; 4
    261c:	99 f5       	brne	.+102    	; 0x2684 <__fpcmp_parts_f+0x88>
    261e:	81 81       	ldd	r24, Z+1	; 0x01
    2620:	68 2f       	mov	r22, r24
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	61 1b       	sub	r22, r17
    2626:	71 09       	sbc	r23, r1
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <__fpcmp_parts_f+0xac>
    262a:	84 30       	cpi	r24, 0x04	; 4
    262c:	21 f0       	breq	.+8      	; 0x2636 <__fpcmp_parts_f+0x3a>
    262e:	92 30       	cpi	r25, 0x02	; 2
    2630:	31 f4       	brne	.+12     	; 0x263e <__fpcmp_parts_f+0x42>
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	b9 f1       	breq	.+110    	; 0x26a4 <__fpcmp_parts_f+0xa8>
    2636:	81 81       	ldd	r24, Z+1	; 0x01
    2638:	88 23       	and	r24, r24
    263a:	89 f1       	breq	.+98     	; 0x269e <__fpcmp_parts_f+0xa2>
    263c:	2d c0       	rjmp	.+90     	; 0x2698 <__fpcmp_parts_f+0x9c>
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	1c 91       	ld	r17, X
    2642:	11 97       	sbiw	r26, 0x01	; 1
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	f1 f0       	breq	.+60     	; 0x2684 <__fpcmp_parts_f+0x88>
    2648:	81 81       	ldd	r24, Z+1	; 0x01
    264a:	18 17       	cp	r17, r24
    264c:	d9 f4       	brne	.+54     	; 0x2684 <__fpcmp_parts_f+0x88>
    264e:	12 96       	adiw	r26, 0x02	; 2
    2650:	2d 91       	ld	r18, X+
    2652:	3c 91       	ld	r19, X
    2654:	13 97       	sbiw	r26, 0x03	; 3
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	82 17       	cp	r24, r18
    265c:	93 07       	cpc	r25, r19
    265e:	94 f0       	brlt	.+36     	; 0x2684 <__fpcmp_parts_f+0x88>
    2660:	28 17       	cp	r18, r24
    2662:	39 07       	cpc	r19, r25
    2664:	bc f0       	brlt	.+46     	; 0x2694 <__fpcmp_parts_f+0x98>
    2666:	14 96       	adiw	r26, 0x04	; 4
    2668:	8d 91       	ld	r24, X+
    266a:	9d 91       	ld	r25, X+
    266c:	0d 90       	ld	r0, X+
    266e:	bc 91       	ld	r27, X
    2670:	a0 2d       	mov	r26, r0
    2672:	24 81       	ldd	r18, Z+4	; 0x04
    2674:	35 81       	ldd	r19, Z+5	; 0x05
    2676:	46 81       	ldd	r20, Z+6	; 0x06
    2678:	57 81       	ldd	r21, Z+7	; 0x07
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	4a 07       	cpc	r20, r26
    2680:	5b 07       	cpc	r21, r27
    2682:	18 f4       	brcc	.+6      	; 0x268a <__fpcmp_parts_f+0x8e>
    2684:	11 23       	and	r17, r17
    2686:	41 f0       	breq	.+16     	; 0x2698 <__fpcmp_parts_f+0x9c>
    2688:	0a c0       	rjmp	.+20     	; 0x269e <__fpcmp_parts_f+0xa2>
    268a:	82 17       	cp	r24, r18
    268c:	93 07       	cpc	r25, r19
    268e:	a4 07       	cpc	r26, r20
    2690:	b5 07       	cpc	r27, r21
    2692:	40 f4       	brcc	.+16     	; 0x26a4 <__fpcmp_parts_f+0xa8>
    2694:	11 23       	and	r17, r17
    2696:	19 f0       	breq	.+6      	; 0x269e <__fpcmp_parts_f+0xa2>
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <__fpcmp_parts_f+0xac>
    269e:	6f ef       	ldi	r22, 0xFF	; 255
    26a0:	7f ef       	ldi	r23, 0xFF	; 255
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <__fpcmp_parts_f+0xac>
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	cb 01       	movw	r24, r22
    26aa:	1f 91       	pop	r17
    26ac:	08 95       	ret

000026ae <__udivmodhi4>:
    26ae:	aa 1b       	sub	r26, r26
    26b0:	bb 1b       	sub	r27, r27
    26b2:	51 e1       	ldi	r21, 0x11	; 17
    26b4:	07 c0       	rjmp	.+14     	; 0x26c4 <__udivmodhi4_ep>

000026b6 <__udivmodhi4_loop>:
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	a6 17       	cp	r26, r22
    26bc:	b7 07       	cpc	r27, r23
    26be:	10 f0       	brcs	.+4      	; 0x26c4 <__udivmodhi4_ep>
    26c0:	a6 1b       	sub	r26, r22
    26c2:	b7 0b       	sbc	r27, r23

000026c4 <__udivmodhi4_ep>:
    26c4:	88 1f       	adc	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	5a 95       	dec	r21
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <__udivmodhi4_loop>
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	08 95       	ret

000026d6 <__prologue_saves__>:
    26d6:	2f 92       	push	r2
    26d8:	3f 92       	push	r3
    26da:	4f 92       	push	r4
    26dc:	5f 92       	push	r5
    26de:	6f 92       	push	r6
    26e0:	7f 92       	push	r7
    26e2:	8f 92       	push	r8
    26e4:	9f 92       	push	r9
    26e6:	af 92       	push	r10
    26e8:	bf 92       	push	r11
    26ea:	cf 92       	push	r12
    26ec:	df 92       	push	r13
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	ca 1b       	sub	r28, r26
    2700:	db 0b       	sbc	r29, r27
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	19 94       	eijmp

0000270e <__epilogue_restores__>:
    270e:	2a 88       	ldd	r2, Y+18	; 0x12
    2710:	39 88       	ldd	r3, Y+17	; 0x11
    2712:	48 88       	ldd	r4, Y+16	; 0x10
    2714:	5f 84       	ldd	r5, Y+15	; 0x0f
    2716:	6e 84       	ldd	r6, Y+14	; 0x0e
    2718:	7d 84       	ldd	r7, Y+13	; 0x0d
    271a:	8c 84       	ldd	r8, Y+12	; 0x0c
    271c:	9b 84       	ldd	r9, Y+11	; 0x0b
    271e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2720:	b9 84       	ldd	r11, Y+9	; 0x09
    2722:	c8 84       	ldd	r12, Y+8	; 0x08
    2724:	df 80       	ldd	r13, Y+7	; 0x07
    2726:	ee 80       	ldd	r14, Y+6	; 0x06
    2728:	fd 80       	ldd	r15, Y+5	; 0x05
    272a:	0c 81       	ldd	r16, Y+4	; 0x04
    272c:	1b 81       	ldd	r17, Y+3	; 0x03
    272e:	aa 81       	ldd	r26, Y+2	; 0x02
    2730:	b9 81       	ldd	r27, Y+1	; 0x01
    2732:	ce 0f       	add	r28, r30
    2734:	d1 1d       	adc	r29, r1
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	ed 01       	movw	r28, r26
    2742:	08 95       	ret

00002744 <pow>:
    2744:	fa 01       	movw	r30, r20
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	30 96       	adiw	r30, 0x00	; 0
    274c:	21 05       	cpc	r18, r1
    274e:	31 05       	cpc	r19, r1
    2750:	99 f1       	breq	.+102    	; 0x27b8 <pow+0x74>
    2752:	61 15       	cp	r22, r1
    2754:	71 05       	cpc	r23, r1
    2756:	61 f4       	brne	.+24     	; 0x2770 <pow+0x2c>
    2758:	80 38       	cpi	r24, 0x80	; 128
    275a:	bf e3       	ldi	r27, 0x3F	; 63
    275c:	9b 07       	cpc	r25, r27
    275e:	49 f1       	breq	.+82     	; 0x27b2 <pow+0x6e>
    2760:	68 94       	set
    2762:	90 38       	cpi	r25, 0x80	; 128
    2764:	81 05       	cpc	r24, r1
    2766:	61 f0       	breq	.+24     	; 0x2780 <pow+0x3c>
    2768:	80 38       	cpi	r24, 0x80	; 128
    276a:	bf ef       	ldi	r27, 0xFF	; 255
    276c:	9b 07       	cpc	r25, r27
    276e:	41 f0       	breq	.+16     	; 0x2780 <pow+0x3c>
    2770:	99 23       	and	r25, r25
    2772:	42 f5       	brpl	.+80     	; 0x27c4 <pow+0x80>
    2774:	ff 3f       	cpi	r31, 0xFF	; 255
    2776:	e1 05       	cpc	r30, r1
    2778:	31 05       	cpc	r19, r1
    277a:	21 05       	cpc	r18, r1
    277c:	11 f1       	breq	.+68     	; 0x27c2 <pow+0x7e>
    277e:	e8 94       	clt
    2780:	08 94       	sec
    2782:	e7 95       	ror	r30
    2784:	d9 01       	movw	r26, r18
    2786:	aa 23       	and	r26, r26
    2788:	29 f4       	brne	.+10     	; 0x2794 <pow+0x50>
    278a:	ab 2f       	mov	r26, r27
    278c:	be 2f       	mov	r27, r30
    278e:	f8 5f       	subi	r31, 0xF8	; 248
    2790:	d0 f3       	brcs	.-12     	; 0x2786 <pow+0x42>
    2792:	10 c0       	rjmp	.+32     	; 0x27b4 <pow+0x70>
    2794:	ff 5f       	subi	r31, 0xFF	; 255
    2796:	70 f4       	brcc	.+28     	; 0x27b4 <pow+0x70>
    2798:	a6 95       	lsr	r26
    279a:	e0 f7       	brcc	.-8      	; 0x2794 <pow+0x50>
    279c:	f7 39       	cpi	r31, 0x97	; 151
    279e:	50 f0       	brcs	.+20     	; 0x27b4 <pow+0x70>
    27a0:	19 f0       	breq	.+6      	; 0x27a8 <pow+0x64>
    27a2:	ff 3a       	cpi	r31, 0xAF	; 175
    27a4:	38 f4       	brcc	.+14     	; 0x27b4 <pow+0x70>
    27a6:	9f 77       	andi	r25, 0x7F	; 127
    27a8:	9f 93       	push	r25
    27aa:	0c d0       	rcall	.+24     	; 0x27c4 <pow+0x80>
    27ac:	0f 90       	pop	r0
    27ae:	07 fc       	sbrc	r0, 7
    27b0:	90 58       	subi	r25, 0x80	; 128
    27b2:	08 95       	ret
    27b4:	3e f0       	brts	.+14     	; 0x27c4 <pow+0x80>
    27b6:	49 c0       	rjmp	.+146    	; 0x284a <__fp_nan>
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	80 e8       	ldi	r24, 0x80	; 128
    27be:	9f e3       	ldi	r25, 0x3F	; 63
    27c0:	08 95       	ret
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	9f 77       	andi	r25, 0x7F	; 127
    27c6:	5f 93       	push	r21
    27c8:	4f 93       	push	r20
    27ca:	3f 93       	push	r19
    27cc:	2f 93       	push	r18
    27ce:	d0 d0       	rcall	.+416    	; 0x2970 <log>
    27d0:	2f 91       	pop	r18
    27d2:	3f 91       	pop	r19
    27d4:	4f 91       	pop	r20
    27d6:	5f 91       	pop	r21
    27d8:	14 da       	rcall	.-3032   	; 0x1c02 <__mulsf3>
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <exp>
    27dc:	19 f4       	brne	.+6      	; 0x27e4 <pow+0xa0>
    27de:	0e f0       	brts	.+2      	; 0x27e2 <pow+0x9e>
    27e0:	2e c0       	rjmp	.+92     	; 0x283e <__fp_inf>
    27e2:	7d c0       	rjmp	.+250    	; 0x28de <__fp_zero>
    27e4:	32 c0       	rjmp	.+100    	; 0x284a <__fp_nan>

000027e6 <exp>:
    27e6:	61 d0       	rcall	.+194    	; 0x28aa <__fp_splitA>
    27e8:	c8 f3       	brcs	.-14     	; 0x27dc <pow+0x98>
    27ea:	96 38       	cpi	r25, 0x86	; 134
    27ec:	c0 f7       	brcc	.-16     	; 0x27de <pow+0x9a>
    27ee:	07 f8       	bld	r0, 7
    27f0:	0f 92       	push	r0
    27f2:	e8 94       	clt
    27f4:	2b e3       	ldi	r18, 0x3B	; 59
    27f6:	3a ea       	ldi	r19, 0xAA	; 170
    27f8:	48 eb       	ldi	r20, 0xB8	; 184
    27fa:	5f e7       	ldi	r21, 0x7F	; 127
    27fc:	38 d1       	rcall	.+624    	; 0x2a6e <__mulsf3_pse>
    27fe:	0f 92       	push	r0
    2800:	0f 92       	push	r0
    2802:	0f 92       	push	r0
    2804:	4d b7       	in	r20, 0x3d	; 61
    2806:	5e b7       	in	r21, 0x3e	; 62
    2808:	0f 92       	push	r0
    280a:	f2 d0       	rcall	.+484    	; 0x29f0 <modf>
    280c:	e4 ee       	ldi	r30, 0xE4	; 228
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	1f d0       	rcall	.+62     	; 0x2850 <__fp_powser>
    2812:	4f 91       	pop	r20
    2814:	5f 91       	pop	r21
    2816:	ef 91       	pop	r30
    2818:	ff 91       	pop	r31
    281a:	e5 95       	asr	r30
    281c:	ee 1f       	adc	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	49 f0       	breq	.+18     	; 0x2834 <exp+0x4e>
    2822:	fe 57       	subi	r31, 0x7E	; 126
    2824:	e0 68       	ori	r30, 0x80	; 128
    2826:	44 27       	eor	r20, r20
    2828:	ee 0f       	add	r30, r30
    282a:	44 1f       	adc	r20, r20
    282c:	fa 95       	dec	r31
    282e:	e1 f7       	brne	.-8      	; 0x2828 <exp+0x42>
    2830:	41 95       	neg	r20
    2832:	55 0b       	sbc	r21, r21
    2834:	64 d0       	rcall	.+200    	; 0x28fe <ldexp>
    2836:	0f 90       	pop	r0
    2838:	07 fe       	sbrs	r0, 7
    283a:	58 c0       	rjmp	.+176    	; 0x28ec <inverse>
    283c:	08 95       	ret

0000283e <__fp_inf>:
    283e:	97 f9       	bld	r25, 7
    2840:	9f 67       	ori	r25, 0x7F	; 127
    2842:	80 e8       	ldi	r24, 0x80	; 128
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	08 95       	ret

0000284a <__fp_nan>:
    284a:	9f ef       	ldi	r25, 0xFF	; 255
    284c:	80 ec       	ldi	r24, 0xC0	; 192
    284e:	08 95       	ret

00002850 <__fp_powser>:
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	1f 93       	push	r17
    2856:	0f 93       	push	r16
    2858:	ff 92       	push	r15
    285a:	ef 92       	push	r14
    285c:	df 92       	push	r13
    285e:	7b 01       	movw	r14, r22
    2860:	8c 01       	movw	r16, r24
    2862:	68 94       	set
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <__fp_powser+0x20>
    2866:	da 2e       	mov	r13, r26
    2868:	ef 01       	movw	r28, r30
    286a:	ff d0       	rcall	.+510    	; 0x2a6a <__mulsf3x>
    286c:	fe 01       	movw	r30, r28
    286e:	e8 94       	clt
    2870:	a5 91       	lpm	r26, Z+
    2872:	25 91       	lpm	r18, Z+
    2874:	35 91       	lpm	r19, Z+
    2876:	45 91       	lpm	r20, Z+
    2878:	55 91       	lpm	r21, Z+
    287a:	ae f3       	brts	.-22     	; 0x2866 <__fp_powser+0x16>
    287c:	ef 01       	movw	r28, r30
    287e:	59 d1       	rcall	.+690    	; 0x2b32 <__addsf3x>
    2880:	fe 01       	movw	r30, r28
    2882:	97 01       	movw	r18, r14
    2884:	a8 01       	movw	r20, r16
    2886:	da 94       	dec	r13
    2888:	79 f7       	brne	.-34     	; 0x2868 <__fp_powser+0x18>
    288a:	df 90       	pop	r13
    288c:	ef 90       	pop	r14
    288e:	ff 90       	pop	r15
    2890:	0f 91       	pop	r16
    2892:	1f 91       	pop	r17
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <__fp_split3>:
    289a:	57 fd       	sbrc	r21, 7
    289c:	90 58       	subi	r25, 0x80	; 128
    289e:	44 0f       	add	r20, r20
    28a0:	55 1f       	adc	r21, r21
    28a2:	59 f0       	breq	.+22     	; 0x28ba <__fp_splitA+0x10>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	71 f0       	breq	.+28     	; 0x28c4 <__fp_splitA+0x1a>
    28a8:	47 95       	ror	r20

000028aa <__fp_splitA>:
    28aa:	88 0f       	add	r24, r24
    28ac:	97 fb       	bst	r25, 7
    28ae:	99 1f       	adc	r25, r25
    28b0:	61 f0       	breq	.+24     	; 0x28ca <__fp_splitA+0x20>
    28b2:	9f 3f       	cpi	r25, 0xFF	; 255
    28b4:	79 f0       	breq	.+30     	; 0x28d4 <__fp_splitA+0x2a>
    28b6:	87 95       	ror	r24
    28b8:	08 95       	ret
    28ba:	12 16       	cp	r1, r18
    28bc:	13 06       	cpc	r1, r19
    28be:	14 06       	cpc	r1, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	f2 cf       	rjmp	.-28     	; 0x28a8 <__fp_split3+0xe>
    28c4:	46 95       	lsr	r20
    28c6:	f1 df       	rcall	.-30     	; 0x28aa <__fp_splitA>
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <__fp_splitA+0x30>
    28ca:	16 16       	cp	r1, r22
    28cc:	17 06       	cpc	r1, r23
    28ce:	18 06       	cpc	r1, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	f1 cf       	rjmp	.-30     	; 0x28b6 <__fp_splitA+0xc>
    28d4:	86 95       	lsr	r24
    28d6:	71 05       	cpc	r23, r1
    28d8:	61 05       	cpc	r22, r1
    28da:	08 94       	sec
    28dc:	08 95       	ret

000028de <__fp_zero>:
    28de:	e8 94       	clt

000028e0 <__fp_szero>:
    28e0:	bb 27       	eor	r27, r27
    28e2:	66 27       	eor	r22, r22
    28e4:	77 27       	eor	r23, r23
    28e6:	cb 01       	movw	r24, r22
    28e8:	97 f9       	bld	r25, 7
    28ea:	08 95       	ret

000028ec <inverse>:
    28ec:	9b 01       	movw	r18, r22
    28ee:	ac 01       	movw	r20, r24
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	80 e8       	ldi	r24, 0x80	; 128
    28f6:	9f e3       	ldi	r25, 0x3F	; 63
    28f8:	7e ca       	rjmp	.-2820   	; 0x1df6 <__divsf3>
    28fa:	a1 cf       	rjmp	.-190    	; 0x283e <__fp_inf>
    28fc:	6d c1       	rjmp	.+730    	; 0x2bd8 <__fp_mpack>

000028fe <ldexp>:
    28fe:	d5 df       	rcall	.-86     	; 0x28aa <__fp_splitA>
    2900:	e8 f3       	brcs	.-6      	; 0x28fc <inverse+0x10>
    2902:	99 23       	and	r25, r25
    2904:	d9 f3       	breq	.-10     	; 0x28fc <inverse+0x10>
    2906:	94 0f       	add	r25, r20
    2908:	51 1d       	adc	r21, r1
    290a:	bb f3       	brvs	.-18     	; 0x28fa <inverse+0xe>
    290c:	91 50       	subi	r25, 0x01	; 1
    290e:	50 40       	sbci	r21, 0x00	; 0
    2910:	94 f0       	brlt	.+36     	; 0x2936 <ldexp+0x38>
    2912:	59 f0       	breq	.+22     	; 0x292a <ldexp+0x2c>
    2914:	88 23       	and	r24, r24
    2916:	32 f0       	brmi	.+12     	; 0x2924 <ldexp+0x26>
    2918:	66 0f       	add	r22, r22
    291a:	77 1f       	adc	r23, r23
    291c:	88 1f       	adc	r24, r24
    291e:	91 50       	subi	r25, 0x01	; 1
    2920:	50 40       	sbci	r21, 0x00	; 0
    2922:	c1 f7       	brne	.-16     	; 0x2914 <ldexp+0x16>
    2924:	9e 3f       	cpi	r25, 0xFE	; 254
    2926:	51 05       	cpc	r21, r1
    2928:	44 f7       	brge	.-48     	; 0x28fa <inverse+0xe>
    292a:	88 0f       	add	r24, r24
    292c:	91 1d       	adc	r25, r1
    292e:	96 95       	lsr	r25
    2930:	87 95       	ror	r24
    2932:	97 f9       	bld	r25, 7
    2934:	08 95       	ret
    2936:	5f 3f       	cpi	r21, 0xFF	; 255
    2938:	ac f0       	brlt	.+42     	; 0x2964 <ldexp+0x66>
    293a:	98 3e       	cpi	r25, 0xE8	; 232
    293c:	9c f0       	brlt	.+38     	; 0x2964 <ldexp+0x66>
    293e:	bb 27       	eor	r27, r27
    2940:	86 95       	lsr	r24
    2942:	77 95       	ror	r23
    2944:	67 95       	ror	r22
    2946:	b7 95       	ror	r27
    2948:	08 f4       	brcc	.+2      	; 0x294c <ldexp+0x4e>
    294a:	b1 60       	ori	r27, 0x01	; 1
    294c:	93 95       	inc	r25
    294e:	c1 f7       	brne	.-16     	; 0x2940 <ldexp+0x42>
    2950:	bb 0f       	add	r27, r27
    2952:	58 f7       	brcc	.-42     	; 0x292a <ldexp+0x2c>
    2954:	11 f4       	brne	.+4      	; 0x295a <ldexp+0x5c>
    2956:	60 ff       	sbrs	r22, 0
    2958:	e8 cf       	rjmp	.-48     	; 0x292a <ldexp+0x2c>
    295a:	6f 5f       	subi	r22, 0xFF	; 255
    295c:	7f 4f       	sbci	r23, 0xFF	; 255
    295e:	8f 4f       	sbci	r24, 0xFF	; 255
    2960:	9f 4f       	sbci	r25, 0xFF	; 255
    2962:	e3 cf       	rjmp	.-58     	; 0x292a <ldexp+0x2c>
    2964:	bd cf       	rjmp	.-134    	; 0x28e0 <__fp_szero>
    2966:	0e f0       	brts	.+2      	; 0x296a <ldexp+0x6c>
    2968:	37 c1       	rjmp	.+622    	; 0x2bd8 <__fp_mpack>
    296a:	6f cf       	rjmp	.-290    	; 0x284a <__fp_nan>
    296c:	68 94       	set
    296e:	67 cf       	rjmp	.-306    	; 0x283e <__fp_inf>

00002970 <log>:
    2970:	9c df       	rcall	.-200    	; 0x28aa <__fp_splitA>
    2972:	c8 f3       	brcs	.-14     	; 0x2966 <ldexp+0x68>
    2974:	99 23       	and	r25, r25
    2976:	d1 f3       	breq	.-12     	; 0x296c <ldexp+0x6e>
    2978:	c6 f3       	brts	.-16     	; 0x296a <ldexp+0x6c>
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	1f 93       	push	r17
    2980:	0f 93       	push	r16
    2982:	ff 92       	push	r15
    2984:	c9 2f       	mov	r28, r25
    2986:	dd 27       	eor	r29, r29
    2988:	88 23       	and	r24, r24
    298a:	2a f0       	brmi	.+10     	; 0x2996 <log+0x26>
    298c:	21 97       	sbiw	r28, 0x01	; 1
    298e:	66 0f       	add	r22, r22
    2990:	77 1f       	adc	r23, r23
    2992:	88 1f       	adc	r24, r24
    2994:	da f7       	brpl	.-10     	; 0x298c <log+0x1c>
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f eb       	ldi	r21, 0xBF	; 191
    299e:	9f e3       	ldi	r25, 0x3F	; 63
    29a0:	88 39       	cpi	r24, 0x98	; 152
    29a2:	20 f0       	brcs	.+8      	; 0x29ac <log+0x3c>
    29a4:	80 3e       	cpi	r24, 0xE0	; 224
    29a6:	30 f0       	brcs	.+12     	; 0x29b4 <log+0x44>
    29a8:	21 96       	adiw	r28, 0x01	; 1
    29aa:	8f 77       	andi	r24, 0x7F	; 127
    29ac:	fd d8       	rcall	.-3590   	; 0x1ba8 <__addsf3>
    29ae:	ec e0       	ldi	r30, 0x0C	; 12
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <log+0x4a>
    29b4:	f9 d8       	rcall	.-3598   	; 0x1ba8 <__addsf3>
    29b6:	e9 e3       	ldi	r30, 0x39	; 57
    29b8:	f1 e0       	ldi	r31, 0x01	; 1
    29ba:	4a df       	rcall	.-364    	; 0x2850 <__fp_powser>
    29bc:	8b 01       	movw	r16, r22
    29be:	be 01       	movw	r22, r28
    29c0:	ec 01       	movw	r28, r24
    29c2:	fb 2e       	mov	r15, r27
    29c4:	6f 57       	subi	r22, 0x7F	; 127
    29c6:	71 09       	sbc	r23, r1
    29c8:	75 95       	asr	r23
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 0b       	sbc	r24, r24
    29ce:	99 0b       	sbc	r25, r25
    29d0:	4e db       	rcall	.-2404   	; 0x206e <__floatsisf>
    29d2:	28 e1       	ldi	r18, 0x18	; 24
    29d4:	32 e7       	ldi	r19, 0x72	; 114
    29d6:	41 e3       	ldi	r20, 0x31	; 49
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	47 d0       	rcall	.+142    	; 0x2a6a <__mulsf3x>
    29dc:	af 2d       	mov	r26, r15
    29de:	98 01       	movw	r18, r16
    29e0:	ae 01       	movw	r20, r28
    29e2:	ff 90       	pop	r15
    29e4:	0f 91       	pop	r16
    29e6:	1f 91       	pop	r17
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	a2 d0       	rcall	.+324    	; 0x2b32 <__addsf3x>
    29ee:	10 c1       	rjmp	.+544    	; 0x2c10 <__fp_round>

000029f0 <modf>:
    29f0:	fa 01       	movw	r30, r20
    29f2:	dc 01       	movw	r26, r24
    29f4:	aa 0f       	add	r26, r26
    29f6:	bb 1f       	adc	r27, r27
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	bf 57       	subi	r27, 0x7F	; 127
    29fe:	28 f4       	brcc	.+10     	; 0x2a0a <modf+0x1a>
    2a00:	22 27       	eor	r18, r18
    2a02:	33 27       	eor	r19, r19
    2a04:	44 27       	eor	r20, r20
    2a06:	50 78       	andi	r21, 0x80	; 128
    2a08:	1f c0       	rjmp	.+62     	; 0x2a48 <modf+0x58>
    2a0a:	b7 51       	subi	r27, 0x17	; 23
    2a0c:	88 f4       	brcc	.+34     	; 0x2a30 <modf+0x40>
    2a0e:	ab 2f       	mov	r26, r27
    2a10:	00 24       	eor	r0, r0
    2a12:	46 95       	lsr	r20
    2a14:	37 95       	ror	r19
    2a16:	27 95       	ror	r18
    2a18:	01 1c       	adc	r0, r1
    2a1a:	a3 95       	inc	r26
    2a1c:	d2 f3       	brmi	.-12     	; 0x2a12 <modf+0x22>
    2a1e:	00 20       	and	r0, r0
    2a20:	69 f0       	breq	.+26     	; 0x2a3c <modf+0x4c>
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	44 1f       	adc	r20, r20
    2a28:	b3 95       	inc	r27
    2a2a:	da f3       	brmi	.-10     	; 0x2a22 <modf+0x32>
    2a2c:	0d d0       	rcall	.+26     	; 0x2a48 <modf+0x58>
    2a2e:	8b c8       	rjmp	.-3818   	; 0x1b46 <__subsf3>
    2a30:	61 30       	cpi	r22, 0x01	; 1
    2a32:	71 05       	cpc	r23, r1
    2a34:	a0 e8       	ldi	r26, 0x80	; 128
    2a36:	8a 07       	cpc	r24, r26
    2a38:	b9 46       	sbci	r27, 0x69	; 105
    2a3a:	30 f4       	brcc	.+12     	; 0x2a48 <modf+0x58>
    2a3c:	9b 01       	movw	r18, r22
    2a3e:	ac 01       	movw	r20, r24
    2a40:	66 27       	eor	r22, r22
    2a42:	77 27       	eor	r23, r23
    2a44:	88 27       	eor	r24, r24
    2a46:	90 78       	andi	r25, 0x80	; 128
    2a48:	30 96       	adiw	r30, 0x00	; 0
    2a4a:	21 f0       	breq	.+8      	; 0x2a54 <modf+0x64>
    2a4c:	20 83       	st	Z, r18
    2a4e:	31 83       	std	Z+1, r19	; 0x01
    2a50:	42 83       	std	Z+2, r20	; 0x02
    2a52:	53 83       	std	Z+3, r21	; 0x03
    2a54:	08 95       	ret
    2a56:	ce d0       	rcall	.+412    	; 0x2bf4 <__fp_pscA>
    2a58:	28 f0       	brcs	.+10     	; 0x2a64 <modf+0x74>
    2a5a:	d3 d0       	rcall	.+422    	; 0x2c02 <__fp_pscB>
    2a5c:	18 f0       	brcs	.+6      	; 0x2a64 <modf+0x74>
    2a5e:	95 23       	and	r25, r21
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <modf+0x74>
    2a62:	ed ce       	rjmp	.-550    	; 0x283e <__fp_inf>
    2a64:	f2 ce       	rjmp	.-540    	; 0x284a <__fp_nan>
    2a66:	11 24       	eor	r1, r1
    2a68:	3b cf       	rjmp	.-394    	; 0x28e0 <__fp_szero>

00002a6a <__mulsf3x>:
    2a6a:	17 df       	rcall	.-466    	; 0x289a <__fp_split3>
    2a6c:	a0 f3       	brcs	.-24     	; 0x2a56 <modf+0x66>

00002a6e <__mulsf3_pse>:
    2a6e:	95 9f       	mul	r25, r21
    2a70:	d1 f3       	breq	.-12     	; 0x2a66 <modf+0x76>
    2a72:	95 0f       	add	r25, r21
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	55 1f       	adc	r21, r21
    2a78:	62 9f       	mul	r22, r18
    2a7a:	f0 01       	movw	r30, r0
    2a7c:	72 9f       	mul	r23, r18
    2a7e:	bb 27       	eor	r27, r27
    2a80:	f0 0d       	add	r31, r0
    2a82:	b1 1d       	adc	r27, r1
    2a84:	63 9f       	mul	r22, r19
    2a86:	aa 27       	eor	r26, r26
    2a88:	f0 0d       	add	r31, r0
    2a8a:	b1 1d       	adc	r27, r1
    2a8c:	aa 1f       	adc	r26, r26
    2a8e:	64 9f       	mul	r22, r20
    2a90:	66 27       	eor	r22, r22
    2a92:	b0 0d       	add	r27, r0
    2a94:	a1 1d       	adc	r26, r1
    2a96:	66 1f       	adc	r22, r22
    2a98:	82 9f       	mul	r24, r18
    2a9a:	22 27       	eor	r18, r18
    2a9c:	b0 0d       	add	r27, r0
    2a9e:	a1 1d       	adc	r26, r1
    2aa0:	62 1f       	adc	r22, r18
    2aa2:	73 9f       	mul	r23, r19
    2aa4:	b0 0d       	add	r27, r0
    2aa6:	a1 1d       	adc	r26, r1
    2aa8:	62 1f       	adc	r22, r18
    2aaa:	83 9f       	mul	r24, r19
    2aac:	a0 0d       	add	r26, r0
    2aae:	61 1d       	adc	r22, r1
    2ab0:	22 1f       	adc	r18, r18
    2ab2:	74 9f       	mul	r23, r20
    2ab4:	33 27       	eor	r19, r19
    2ab6:	a0 0d       	add	r26, r0
    2ab8:	61 1d       	adc	r22, r1
    2aba:	23 1f       	adc	r18, r19
    2abc:	84 9f       	mul	r24, r20
    2abe:	60 0d       	add	r22, r0
    2ac0:	21 1d       	adc	r18, r1
    2ac2:	82 2f       	mov	r24, r18
    2ac4:	76 2f       	mov	r23, r22
    2ac6:	6a 2f       	mov	r22, r26
    2ac8:	11 24       	eor	r1, r1
    2aca:	9f 57       	subi	r25, 0x7F	; 127
    2acc:	50 40       	sbci	r21, 0x00	; 0
    2ace:	8a f0       	brmi	.+34     	; 0x2af2 <__mulsf3_pse+0x84>
    2ad0:	e1 f0       	breq	.+56     	; 0x2b0a <__mulsf3_pse+0x9c>
    2ad2:	88 23       	and	r24, r24
    2ad4:	4a f0       	brmi	.+18     	; 0x2ae8 <__mulsf3_pse+0x7a>
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	bb 1f       	adc	r27, r27
    2adc:	66 1f       	adc	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	88 1f       	adc	r24, r24
    2ae2:	91 50       	subi	r25, 0x01	; 1
    2ae4:	50 40       	sbci	r21, 0x00	; 0
    2ae6:	a9 f7       	brne	.-22     	; 0x2ad2 <__mulsf3_pse+0x64>
    2ae8:	9e 3f       	cpi	r25, 0xFE	; 254
    2aea:	51 05       	cpc	r21, r1
    2aec:	70 f0       	brcs	.+28     	; 0x2b0a <__mulsf3_pse+0x9c>
    2aee:	a7 ce       	rjmp	.-690    	; 0x283e <__fp_inf>
    2af0:	f7 ce       	rjmp	.-530    	; 0x28e0 <__fp_szero>
    2af2:	5f 3f       	cpi	r21, 0xFF	; 255
    2af4:	ec f3       	brlt	.-6      	; 0x2af0 <__mulsf3_pse+0x82>
    2af6:	98 3e       	cpi	r25, 0xE8	; 232
    2af8:	dc f3       	brlt	.-10     	; 0x2af0 <__mulsf3_pse+0x82>
    2afa:	86 95       	lsr	r24
    2afc:	77 95       	ror	r23
    2afe:	67 95       	ror	r22
    2b00:	b7 95       	ror	r27
    2b02:	f7 95       	ror	r31
    2b04:	e7 95       	ror	r30
    2b06:	9f 5f       	subi	r25, 0xFF	; 255
    2b08:	c1 f7       	brne	.-16     	; 0x2afa <__mulsf3_pse+0x8c>
    2b0a:	fe 2b       	or	r31, r30
    2b0c:	88 0f       	add	r24, r24
    2b0e:	91 1d       	adc	r25, r1
    2b10:	96 95       	lsr	r25
    2b12:	87 95       	ror	r24
    2b14:	97 f9       	bld	r25, 7
    2b16:	08 95       	ret
    2b18:	6d d0       	rcall	.+218    	; 0x2bf4 <__fp_pscA>
    2b1a:	30 f0       	brcs	.+12     	; 0x2b28 <__mulsf3_pse+0xba>
    2b1c:	72 d0       	rcall	.+228    	; 0x2c02 <__fp_pscB>
    2b1e:	20 f0       	brcs	.+8      	; 0x2b28 <__mulsf3_pse+0xba>
    2b20:	31 f4       	brne	.+12     	; 0x2b2e <__mulsf3_pse+0xc0>
    2b22:	9f 3f       	cpi	r25, 0xFF	; 255
    2b24:	11 f4       	brne	.+4      	; 0x2b2a <__mulsf3_pse+0xbc>
    2b26:	1e f4       	brtc	.+6      	; 0x2b2e <__mulsf3_pse+0xc0>
    2b28:	90 ce       	rjmp	.-736    	; 0x284a <__fp_nan>
    2b2a:	0e f4       	brtc	.+2      	; 0x2b2e <__mulsf3_pse+0xc0>
    2b2c:	e0 95       	com	r30
    2b2e:	e7 fb       	bst	r30, 7
    2b30:	86 ce       	rjmp	.-756    	; 0x283e <__fp_inf>

00002b32 <__addsf3x>:
    2b32:	e9 2f       	mov	r30, r25
    2b34:	b2 de       	rcall	.-668    	; 0x289a <__fp_split3>
    2b36:	80 f3       	brcs	.-32     	; 0x2b18 <__mulsf3_pse+0xaa>
    2b38:	ba 17       	cp	r27, r26
    2b3a:	62 07       	cpc	r22, r18
    2b3c:	73 07       	cpc	r23, r19
    2b3e:	84 07       	cpc	r24, r20
    2b40:	95 07       	cpc	r25, r21
    2b42:	18 f0       	brcs	.+6      	; 0x2b4a <__addsf3x+0x18>
    2b44:	71 f4       	brne	.+28     	; 0x2b62 <__addsf3x+0x30>
    2b46:	9e f5       	brtc	.+102    	; 0x2bae <__addsf3x+0x7c>
    2b48:	ca ce       	rjmp	.-620    	; 0x28de <__fp_zero>
    2b4a:	0e f4       	brtc	.+2      	; 0x2b4e <__addsf3x+0x1c>
    2b4c:	e0 95       	com	r30
    2b4e:	0b 2e       	mov	r0, r27
    2b50:	ba 2f       	mov	r27, r26
    2b52:	a0 2d       	mov	r26, r0
    2b54:	0b 01       	movw	r0, r22
    2b56:	b9 01       	movw	r22, r18
    2b58:	90 01       	movw	r18, r0
    2b5a:	0c 01       	movw	r0, r24
    2b5c:	ca 01       	movw	r24, r20
    2b5e:	a0 01       	movw	r20, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	ff 27       	eor	r31, r31
    2b64:	59 1b       	sub	r21, r25
    2b66:	99 f0       	breq	.+38     	; 0x2b8e <__addsf3x+0x5c>
    2b68:	59 3f       	cpi	r21, 0xF9	; 249
    2b6a:	50 f4       	brcc	.+20     	; 0x2b80 <__addsf3x+0x4e>
    2b6c:	50 3e       	cpi	r21, 0xE0	; 224
    2b6e:	68 f1       	brcs	.+90     	; 0x2bca <__addsf3x+0x98>
    2b70:	1a 16       	cp	r1, r26
    2b72:	f0 40       	sbci	r31, 0x00	; 0
    2b74:	a2 2f       	mov	r26, r18
    2b76:	23 2f       	mov	r18, r19
    2b78:	34 2f       	mov	r19, r20
    2b7a:	44 27       	eor	r20, r20
    2b7c:	58 5f       	subi	r21, 0xF8	; 248
    2b7e:	f3 cf       	rjmp	.-26     	; 0x2b66 <__addsf3x+0x34>
    2b80:	46 95       	lsr	r20
    2b82:	37 95       	ror	r19
    2b84:	27 95       	ror	r18
    2b86:	a7 95       	ror	r26
    2b88:	f0 40       	sbci	r31, 0x00	; 0
    2b8a:	53 95       	inc	r21
    2b8c:	c9 f7       	brne	.-14     	; 0x2b80 <__addsf3x+0x4e>
    2b8e:	7e f4       	brtc	.+30     	; 0x2bae <__addsf3x+0x7c>
    2b90:	1f 16       	cp	r1, r31
    2b92:	ba 0b       	sbc	r27, r26
    2b94:	62 0b       	sbc	r22, r18
    2b96:	73 0b       	sbc	r23, r19
    2b98:	84 0b       	sbc	r24, r20
    2b9a:	ba f0       	brmi	.+46     	; 0x2bca <__addsf3x+0x98>
    2b9c:	91 50       	subi	r25, 0x01	; 1
    2b9e:	a1 f0       	breq	.+40     	; 0x2bc8 <__addsf3x+0x96>
    2ba0:	ff 0f       	add	r31, r31
    2ba2:	bb 1f       	adc	r27, r27
    2ba4:	66 1f       	adc	r22, r22
    2ba6:	77 1f       	adc	r23, r23
    2ba8:	88 1f       	adc	r24, r24
    2baa:	c2 f7       	brpl	.-16     	; 0x2b9c <__addsf3x+0x6a>
    2bac:	0e c0       	rjmp	.+28     	; 0x2bca <__addsf3x+0x98>
    2bae:	ba 0f       	add	r27, r26
    2bb0:	62 1f       	adc	r22, r18
    2bb2:	73 1f       	adc	r23, r19
    2bb4:	84 1f       	adc	r24, r20
    2bb6:	48 f4       	brcc	.+18     	; 0x2bca <__addsf3x+0x98>
    2bb8:	87 95       	ror	r24
    2bba:	77 95       	ror	r23
    2bbc:	67 95       	ror	r22
    2bbe:	b7 95       	ror	r27
    2bc0:	f7 95       	ror	r31
    2bc2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bc4:	08 f0       	brcs	.+2      	; 0x2bc8 <__addsf3x+0x96>
    2bc6:	b3 cf       	rjmp	.-154    	; 0x2b2e <__mulsf3_pse+0xc0>
    2bc8:	93 95       	inc	r25
    2bca:	88 0f       	add	r24, r24
    2bcc:	08 f0       	brcs	.+2      	; 0x2bd0 <__addsf3x+0x9e>
    2bce:	99 27       	eor	r25, r25
    2bd0:	ee 0f       	add	r30, r30
    2bd2:	97 95       	ror	r25
    2bd4:	87 95       	ror	r24
    2bd6:	08 95       	ret

00002bd8 <__fp_mpack>:
    2bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bda:	31 f0       	breq	.+12     	; 0x2be8 <__fp_mpack_finite+0xc>

00002bdc <__fp_mpack_finite>:
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	20 f4       	brcc	.+8      	; 0x2be8 <__fp_mpack_finite+0xc>
    2be0:	87 95       	ror	r24
    2be2:	77 95       	ror	r23
    2be4:	67 95       	ror	r22
    2be6:	b7 95       	ror	r27
    2be8:	88 0f       	add	r24, r24
    2bea:	91 1d       	adc	r25, r1
    2bec:	96 95       	lsr	r25
    2bee:	87 95       	ror	r24
    2bf0:	97 f9       	bld	r25, 7
    2bf2:	08 95       	ret

00002bf4 <__fp_pscA>:
    2bf4:	00 24       	eor	r0, r0
    2bf6:	0a 94       	dec	r0
    2bf8:	16 16       	cp	r1, r22
    2bfa:	17 06       	cpc	r1, r23
    2bfc:	18 06       	cpc	r1, r24
    2bfe:	09 06       	cpc	r0, r25
    2c00:	08 95       	ret

00002c02 <__fp_pscB>:
    2c02:	00 24       	eor	r0, r0
    2c04:	0a 94       	dec	r0
    2c06:	12 16       	cp	r1, r18
    2c08:	13 06       	cpc	r1, r19
    2c0a:	14 06       	cpc	r1, r20
    2c0c:	05 06       	cpc	r0, r21
    2c0e:	08 95       	ret

00002c10 <__fp_round>:
    2c10:	09 2e       	mov	r0, r25
    2c12:	03 94       	inc	r0
    2c14:	00 0c       	add	r0, r0
    2c16:	11 f4       	brne	.+4      	; 0x2c1c <__fp_round+0xc>
    2c18:	88 23       	and	r24, r24
    2c1a:	52 f0       	brmi	.+20     	; 0x2c30 <__fp_round+0x20>
    2c1c:	bb 0f       	add	r27, r27
    2c1e:	40 f4       	brcc	.+16     	; 0x2c30 <__fp_round+0x20>
    2c20:	bf 2b       	or	r27, r31
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <__fp_round+0x18>
    2c24:	60 ff       	sbrs	r22, 0
    2c26:	04 c0       	rjmp	.+8      	; 0x2c30 <__fp_round+0x20>
    2c28:	6f 5f       	subi	r22, 0xFF	; 255
    2c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	08 95       	ret

00002c32 <_exit>:
    2c32:	f8 94       	cli

00002c34 <__stop_program>:
    2c34:	ff cf       	rjmp	.-2      	; 0x2c34 <__stop_program>
