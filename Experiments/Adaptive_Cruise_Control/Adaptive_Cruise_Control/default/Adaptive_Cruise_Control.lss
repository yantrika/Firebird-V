
Adaptive_Cruise_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000241a  000024ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000241a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800208  00800208  000024b6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000268  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091f  00000000  00000000  0000273e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  0000305d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dad  00000000  00000000  00003233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00003fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e1       	ldi	r30, 0x1A	; 26
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 31       	cpi	r26, 0x1E	; 30
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <main>
     122:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	2d ec       	ldi	r18, 0xCD	; 205
     170:	3c ec       	ldi	r19, 0xCC	; 204
     172:	4c e2       	ldi	r20, 0x2C	; 44
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	84 e1       	ldi	r24, 0x14	; 20
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	2d ec       	ldi	r18, 0xCD	; 205
     308:	3c ec       	ldi	r19, 0xCC	; 204
     30a:	4c e2       	ldi	r20, 0x2C	; 44
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c e2       	ldi	r20, 0x2C	; 44
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	84 e1       	ldi	r24, 0x14	; 20
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	2d ec       	ldi	r18, 0xCD	; 205
     614:	3c ec       	ldi	r19, 0xCC	; 204
     616:	4c e2       	ldi	r20, 0x2C	; 44
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	2d ec       	ldi	r18, 0xCD	; 205
     71a:	3c ec       	ldi	r19, 0xCC	; 204
     71c:	4c e2       	ldi	r20, 0x2C	; 44
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	2d ec       	ldi	r18, 0xCD	; 205
     830:	3c ec       	ldi	r19, 0xCC	; 204
     832:	4c e2       	ldi	r20, 0x2C	; 44
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	84 e1       	ldi	r24, 0x14	; 20
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	2d ec       	ldi	r18, 0xCD	; 205
     922:	3c ec       	ldi	r19, 0xCC	; 204
     924:	4c e2       	ldi	r20, 0x2C	; 44
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	2d ec       	ldi	r18, 0xCD	; 205
     a38:	3c ec       	ldi	r19, 0xCC	; 204
     a3a:	4c e2       	ldi	r20, 0x2C	; 44
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	84 e1       	ldi	r24, 0x14	; 20
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c e2       	ldi	r20, 0x2C	; 44
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	2d ec       	ldi	r18, 0xCD	; 205
     cd2:	3c ec       	ldi	r19, 0xCC	; 204
     cd4:	4c e2       	ldi	r20, 0x2C	; 44
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	84 e1       	ldi	r24, 0x14	; 20
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	2d ec       	ldi	r18, 0xCD	; 205
     e1a:	3c ec       	ldi	r19, 0xCC	; 204
     e1c:	4c e2       	ldi	r20, 0x2C	; 44
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	84 e1       	ldi	r24, 0x14	; 20
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	2d ec       	ldi	r18, 0xCD	; 205
     f86:	3c ec       	ldi	r19, 0xCC	; 204
     f88:	4c e2       	ldi	r20, 0x2C	; 44
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	2d ec       	ldi	r18, 0xCD	; 205
    10ce:	3c ec       	ldi	r19, 0xCC	; 204
    10d0:	4c e2       	ldi	r20, 0x2C	; 44
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	84 e1       	ldi	r24, 0x14	; 20
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 10 02 	sts	0x0210, r25
    12ec:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(million);
    12f0:	80 91 0f 02 	lds	r24, 0x020F
    12f4:	90 91 10 02 	lds	r25, 0x0210
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 12 02 	sts	0x0212, r25
    1324:	80 93 11 02 	sts	0x0211, r24
		thousand = temp%10 + 48;
    1328:	80 91 11 02 	lds	r24, 0x0211
    132c:	90 91 12 02 	lds	r25, 0x0212
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 1d 02 	sts	0x021D, r25
    1340:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(thousand);
    1344:	80 91 1c 02 	lds	r24, 0x021C
    1348:	90 91 1d 02 	lds	r25, 0x021D
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 12 02 	sts	0x0212, r25
    1378:	80 93 11 02 	sts	0x0211, r24
		hundred = temp%10 + 48;
    137c:	80 91 11 02 	lds	r24, 0x0211
    1380:	90 91 12 02 	lds	r25, 0x0212
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 19 02 	sts	0x0219, r25
    1394:	80 93 18 02 	sts	0x0218, r24
		lcd_wr_char(hundred);
    1398:	80 91 18 02 	lds	r24, 0x0218
    139c:	90 91 19 02 	lds	r25, 0x0219
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 12 02 	sts	0x0212, r25
    13cc:	80 93 11 02 	sts	0x0211, r24
		tens = temp%10 + 48;
    13d0:	80 91 11 02 	lds	r24, 0x0211
    13d4:	90 91 12 02 	lds	r25, 0x0212
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 17 02 	sts	0x0217, r25
    13e8:	80 93 16 02 	sts	0x0216, r24
		lcd_wr_char(tens);
    13ec:	80 91 16 02 	lds	r24, 0x0216
    13f0:	90 91 17 02 	lds	r25, 0x0217
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 1b 02 	sts	0x021B, r25
    1420:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(unit);
    1424:	80 91 1a 02 	lds	r24, 0x021A
    1428:	90 91 1b 02 	lds	r25, 0x021B
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <lcd_port_config>:
unsigned char Front_Sharp_Sensor=0;
unsigned char Front_IR_Sensor=0;

//Function to configure LCD port
void lcd_port_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    145a:	a7 e2       	ldi	r26, 0x27	; 39
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e7 e2       	ldi	r30, 0x27	; 39
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 6f       	ori	r24, 0xF7	; 247
    1466:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1468:	a8 e2       	ldi	r26, 0x28	; 40
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e2       	ldi	r30, 0x28	; 40
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 78       	andi	r24, 0x80	; 128
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1484:	e0 e3       	ldi	r30, 0x30	; 48
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
 PORTF = 0x00;
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
 DDRK = 0x00;
    1490:	e7 e0       	ldi	r30, 0x07	; 7
    1492:	f1 e0       	ldi	r31, 0x01	; 1
    1494:	10 82       	st	Z, r1
 PORTK = 0x00;
    1496:	e8 e0       	ldi	r30, 0x08	; 8
    1498:	f1 e0       	ldi	r31, 0x01	; 1
    149a:	10 82       	st	Z, r1
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    14aa:	a1 e2       	ldi	r26, 0x21	; 33
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e1 e2       	ldi	r30, 0x21	; 33
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8f 60       	ori	r24, 0x0F	; 15
    14b6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    14b8:	a2 e2       	ldi	r26, 0x22	; 34
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e2       	ldi	r30, 0x22	; 34
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 7f       	andi	r24, 0xF0	; 240
    14c4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    14c6:	aa e0       	ldi	r26, 0x0A	; 10
    14c8:	b1 e0       	ldi	r27, 0x01	; 1
    14ca:	ea e0       	ldi	r30, 0x0A	; 10
    14cc:	f1 e0       	ldi	r31, 0x01	; 1
    14ce:	80 81       	ld	r24, Z
    14d0:	88 61       	ori	r24, 0x18	; 24
    14d2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    14d4:	ab e0       	ldi	r26, 0x0B	; 11
    14d6:	b1 e0       	ldi	r27, 0x01	; 1
    14d8:	eb e0       	ldi	r30, 0x0B	; 11
    14da:	f1 e0       	ldi	r31, 0x01	; 1
    14dc:	80 81       	ld	r24, Z
    14de:	88 61       	ori	r24, 0x18	; 24
    14e0:	8c 93       	st	X, r24
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    14f0:	a7 e2       	ldi	r26, 0x27	; 39
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e7 e2       	ldi	r30, 0x27	; 39
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	88 60       	ori	r24, 0x08	; 8
    14fc:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    14fe:	a8 e2       	ldi	r26, 0x28	; 40
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e8 e2       	ldi	r30, 0x28	; 40
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	87 7f       	andi	r24, 0xF7	; 247
    150a:	8c 93       	st	X, r24
}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    151a:	0e 94 29 0a 	call	0x1452	; 0x1452 <lcd_port_config>
	adc_pin_config();
    151e:	0e 94 3e 0a 	call	0x147c	; 0x147c <adc_pin_config>
	motion_pin_config();
    1522:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <motion_pin_config>
	buzzer_pin_config();	
    1526:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <buzzer_pin_config>
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1538:	e1 e2       	ldi	r30, 0x21	; 33
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    153e:	e5 e2       	ldi	r30, 0x25	; 37
    1540:	f1 e0       	ldi	r31, 0x01	; 1
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1546:	e4 e2       	ldi	r30, 0x24	; 36
    1548:	f1 e0       	ldi	r31, 0x01	; 1
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    154e:	e9 e2       	ldi	r30, 0x29	; 41
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1554:	e8 e2       	ldi	r30, 0x28	; 40
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    155c:	eb e2       	ldi	r30, 0x2B	; 43
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1562:	ea e2       	ldi	r30, 0x2A	; 42
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    156a:	ed e2       	ldi	r30, 0x2D	; 45
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1570:	ec e2       	ldi	r30, 0x2C	; 44
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1578:	e0 e2       	ldi	r30, 0x20	; 32
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	89 ea       	ldi	r24, 0xA9	; 169
    157e:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1580:	e1 e2       	ldi	r30, 0x21	; 33
    1582:	f1 e0       	ldi	r31, 0x01	; 1
    1584:	8b e0       	ldi	r24, 0x0B	; 11
    1586:	80 83       	st	Z, r24
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <buzzer_on>:

void buzzer_on (void)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1598:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    159a:	e6 e2       	ldi	r30, 0x26	; 38
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    15a8:	e8 e2       	ldi	r30, 0x28	; 40
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	80 83       	st	Z, r24
}
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <buzzer_off>:

void buzzer_off (void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    15c2:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    15c4:	e6 e2       	ldi	r30, 0x26	; 38
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	87 7f       	andi	r24, 0xF7	; 247
    15d0:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    15d2:	e8 e2       	ldi	r30, 0x28	; 40
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 83       	st	Z, r24
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <adc_init>:

void adc_init()
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    15ea:	ea e7       	ldi	r30, 0x7A	; 122
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    15f0:	eb e7       	ldi	r30, 0x7B	; 123
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    15f6:	ec e7       	ldi	r30, 0x7C	; 124
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	80 83       	st	Z, r24
	ACSR = 0x80;
    15fe:	e0 e5       	ldi	r30, 0x50	; 80
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 e8       	ldi	r24, 0x80	; 128
    1604:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1606:	ea e7       	ldi	r30, 0x7A	; 122
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	86 e8       	ldi	r24, 0x86	; 134
    160c:	80 83       	st	Z, r24
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	0f 92       	push	r0
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 30       	cpi	r24, 0x08	; 8
    1626:	20 f0       	brcs	.+8      	; 0x1630 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1628:	eb e7       	ldi	r30, 0x7B	; 123
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	88 e0       	ldi	r24, 0x08	; 8
    162e:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	87 70       	andi	r24, 0x07	; 7
    1634:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1636:	ec e7       	ldi	r30, 0x7C	; 124
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	80 62       	ori	r24, 0x20	; 32
    163e:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1640:	aa e7       	ldi	r26, 0x7A	; 122
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ea e7       	ldi	r30, 0x7A	; 122
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 64       	ori	r24, 0x40	; 64
    164c:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    164e:	ea e7       	ldi	r30, 0x7A	; 122
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	80 71       	andi	r24, 0x10	; 16
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	b9 f3       	breq	.-18     	; 0x164e <ADC_Conversion+0x3a>
	a=ADCH;
    1660:	e9 e7       	ldi	r30, 0x79	; 121
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1668:	aa e7       	ldi	r26, 0x7A	; 122
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ea e7       	ldi	r30, 0x7A	; 122
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 61       	ori	r24, 0x10	; 16
    1674:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1676:	eb e7       	ldi	r30, 0x7B	; 123
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	10 82       	st	Z, r1
	return a;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	00 d0       	rcall	.+0      	; 0x168e <print_sensor+0x6>
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
    1696:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    169e:	80 93 13 02 	sts	0x0213, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    16a2:	80 91 13 02 	lds	r24, 0x0213
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	6a 81       	ldd	r22, Y+2	; 0x02
    16ae:	a9 01       	movw	r20, r18
    16b0:	23 e0       	ldi	r18, 0x03	; 3
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	0f 92       	push	r0
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    16d4:	e8 e2       	ldi	r30, 0x28	; 40
    16d6:	f1 e0       	ldi	r31, 0x01	; 1
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    16dc:	ea e2       	ldi	r30, 0x2A	; 42
    16de:	f1 e0       	ldi	r31, 0x01	; 1
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	0f 92       	push	r0
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    16fc:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	8f 70       	andi	r24, 0x0F	; 15
    1702:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1704:	e2 e2       	ldi	r30, 0x22	; 34
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	80 7f       	andi	r24, 0xF0	; 240
    1710:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1712:	99 81       	ldd	r25, Y+1	; 0x01
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	89 2b       	or	r24, r25
    1718:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    171a:	e2 e2       	ldi	r30, 0x22	; 34
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	80 83       	st	Z, r24
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <forward>:

void forward (void) 
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	0e 94 77 0b 	call	0x16ee	; 0x16ee <motion_set>
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <stop>:

void stop (void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <motion_set>
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <init_devices>:

void init_devices (void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    175c:	f8 94       	cli
	port_init();
    175e:	0e 94 89 0a 	call	0x1512	; 0x1512 <port_init>
	adc_init();
    1762:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <adc_init>
	timer5_init();
    1766:	0e 94 98 0a 	call	0x1530	; 0x1530 <timer5_init>
	sei();   //Enables the global interrupts
    176a:	78 94       	sei
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <main>:

//Main Function
int main()
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    177a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <init_devices>
	lcd_set_4bit();
    177e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    1782:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    178c:	80 93 0a 02 	sts	0x020A, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    1796:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    17a0:	80 93 0c 02 	sts	0x020C, r24
		Front_Sharp_Sensor = ADC_Conversion(11);
    17a4:	8b e0       	ldi	r24, 0x0B	; 11
    17a6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    17aa:	80 93 0d 02 	sts	0x020D, r24
		Front_IR_Sensor = ADC_Conversion(6);
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <ADC_Conversion>
    17b4:	80 93 0e 02 	sts	0x020E, r24

		flag1=0;
    17b8:	10 92 08 02 	sts	0x0208, r1
		flag2=0;
    17bc:	10 92 09 02 	sts	0x0209, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	43 e0       	ldi	r20, 0x03	; 3
    17c6:	0e 94 44 0b 	call	0x1688	; 0x1688 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	42 e0       	ldi	r20, 0x02	; 2
    17d0:	0e 94 44 0b 	call	0x1688	; 0x1688 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	69 e0       	ldi	r22, 0x09	; 9
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 44 0b 	call	0x1688	; 0x1688 <print_sensor>
		print_sensor(2,4,11);	//Prints Value of Front Sharp Sensor
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	64 e0       	ldi	r22, 0x04	; 4
    17e2:	4b e0       	ldi	r20, 0x0B	; 11
    17e4:	0e 94 44 0b 	call	0x1688	; 0x1688 <print_sensor>
		print_sensor(2,8,6);	//Prints Value of Front IR Sensor
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	68 e0       	ldi	r22, 0x08	; 8
    17ec:	46 e0       	ldi	r20, 0x06	; 6
    17ee:	0e 94 44 0b 	call	0x1688	; 0x1688 <print_sensor>
				

		if(Front_Sharp_Sensor>0x82 || Front_IR_Sensor<0xF0)
    17f2:	80 91 0d 02 	lds	r24, 0x020D
    17f6:	83 38       	cpi	r24, 0x83	; 131
    17f8:	20 f4       	brcc	.+8      	; 0x1802 <main+0x90>
    17fa:	80 91 0e 02 	lds	r24, 0x020E
    17fe:	80 3f       	cpi	r24, 0xF0	; 240
    1800:	38 f4       	brcc	.+14     	; 0x1810 <main+0x9e>
		{
			flag2=1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 09 02 	sts	0x0209, r24
			stop();
    1808:	0e 94 a0 0b 	call	0x1740	; 0x1740 <stop>
			buzzer_on();
    180c:	0e 94 c7 0a 	call	0x158e	; 0x158e <buzzer_on>
			
		}

		if((Center_white_line<0x28) && (flag2==0))
    1810:	80 91 0b 02 	lds	r24, 0x020B
    1814:	88 32       	cpi	r24, 0x28	; 40
    1816:	78 f4       	brcc	.+30     	; 0x1836 <main+0xc4>
    1818:	80 91 09 02 	lds	r24, 0x0209
    181c:	88 23       	and	r24, r24
    181e:	59 f4       	brne	.+22     	; 0x1836 <main+0xc4>
		{
			flag1=1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 08 02 	sts	0x0208, r24
			buzzer_off();
    1826:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <buzzer_off>
			forward();
    182a:	0e 94 96 0b 	call	0x172c	; 0x172c <forward>
			velocity(150,150);
    182e:	86 e9       	ldi	r24, 0x96	; 150
    1830:	66 e9       	ldi	r22, 0x96	; 150
    1832:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <velocity>
		}

		if((Left_white_line>0x28) && (flag1==0) && (flag2==0))
    1836:	80 91 0a 02 	lds	r24, 0x020A
    183a:	89 32       	cpi	r24, 0x29	; 41
    183c:	98 f0       	brcs	.+38     	; 0x1864 <main+0xf2>
    183e:	80 91 08 02 	lds	r24, 0x0208
    1842:	88 23       	and	r24, r24
    1844:	79 f4       	brne	.+30     	; 0x1864 <main+0xf2>
    1846:	80 91 09 02 	lds	r24, 0x0209
    184a:	88 23       	and	r24, r24
    184c:	59 f4       	brne	.+22     	; 0x1864 <main+0xf2>
		{
			flag1=1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 08 02 	sts	0x0208, r24
			buzzer_off();
    1854:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <buzzer_off>
			forward();
    1858:	0e 94 96 0b 	call	0x172c	; 0x172c <forward>
			velocity(150,50);
    185c:	86 e9       	ldi	r24, 0x96	; 150
    185e:	62 e3       	ldi	r22, 0x32	; 50
    1860:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <velocity>
		}

		if((Right_white_line>0x28) && (flag1==0) && (flag2==0))
    1864:	80 91 0c 02 	lds	r24, 0x020C
    1868:	89 32       	cpi	r24, 0x29	; 41
    186a:	98 f0       	brcs	.+38     	; 0x1892 <main+0x120>
    186c:	80 91 08 02 	lds	r24, 0x0208
    1870:	88 23       	and	r24, r24
    1872:	79 f4       	brne	.+30     	; 0x1892 <main+0x120>
    1874:	80 91 09 02 	lds	r24, 0x0209
    1878:	88 23       	and	r24, r24
    187a:	59 f4       	brne	.+22     	; 0x1892 <main+0x120>
		{
			flag1=1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 08 02 	sts	0x0208, r24
			buzzer_off();
    1882:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <buzzer_off>
			forward();
    1886:	0e 94 96 0b 	call	0x172c	; 0x172c <forward>
			velocity(50,150);
    188a:	82 e3       	ldi	r24, 0x32	; 50
    188c:	66 e9       	ldi	r22, 0x96	; 150
    188e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <velocity>
		}

		if((Center_white_line>0x28) && (Left_white_line>0x28) && (Right_white_line>0x28) && (flag2==0)) 
    1892:	80 91 0b 02 	lds	r24, 0x020B
    1896:	89 32       	cpi	r24, 0x29	; 41
    1898:	08 f4       	brcc	.+2      	; 0x189c <main+0x12a>
    189a:	75 cf       	rjmp	.-278    	; 0x1786 <main+0x14>
    189c:	80 91 0a 02 	lds	r24, 0x020A
    18a0:	89 32       	cpi	r24, 0x29	; 41
    18a2:	08 f4       	brcc	.+2      	; 0x18a6 <main+0x134>
    18a4:	70 cf       	rjmp	.-288    	; 0x1786 <main+0x14>
    18a6:	80 91 0c 02 	lds	r24, 0x020C
    18aa:	89 32       	cpi	r24, 0x29	; 41
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <main+0x13e>
    18ae:	6b cf       	rjmp	.-298    	; 0x1786 <main+0x14>
    18b0:	80 91 09 02 	lds	r24, 0x0209
    18b4:	88 23       	and	r24, r24
    18b6:	09 f0       	breq	.+2      	; 0x18ba <main+0x148>
    18b8:	66 cf       	rjmp	.-308    	; 0x1786 <main+0x14>
		{
			buzzer_off();
    18ba:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <buzzer_off>
			forward();
    18be:	0e 94 96 0b 	call	0x172c	; 0x172c <forward>
			velocity(0,0);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <velocity>
    18ca:	5d cf       	rjmp	.-326    	; 0x1786 <main+0x14>

000018cc <__fixunssfsi>:
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	7b 01       	movw	r14, r22
    18d6:	8c 01       	movw	r16, r24
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	5f e4       	ldi	r21, 0x4F	; 79
    18e0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__gesf2>
    18e4:	88 23       	and	r24, r24
    18e6:	8c f0       	brlt	.+34     	; 0x190a <__fixunssfsi+0x3e>
    18e8:	c8 01       	movw	r24, r16
    18ea:	b7 01       	movw	r22, r14
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	5f e4       	ldi	r21, 0x4F	; 79
    18f4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__subsf3>
    18f8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__fixsfsi>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	20 50       	subi	r18, 0x00	; 0
    1902:	30 40       	sbci	r19, 0x00	; 0
    1904:	40 40       	sbci	r20, 0x00	; 0
    1906:	50 48       	sbci	r21, 0x80	; 128
    1908:	06 c0       	rjmp	.+12     	; 0x1916 <__fixunssfsi+0x4a>
    190a:	c8 01       	movw	r24, r16
    190c:	b7 01       	movw	r22, r14
    190e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__fixsfsi>
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	b9 01       	movw	r22, r18
    1918:	ca 01       	movw	r24, r20
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	08 95       	ret

00001924 <_fpadd_parts>:
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e9       	ldi	r30, 0x98	; 152
    192a:	fc e0       	ldi	r31, 0x0C	; 12
    192c:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__>
    1930:	dc 01       	movw	r26, r24
    1932:	2b 01       	movw	r4, r22
    1934:	fa 01       	movw	r30, r20
    1936:	9c 91       	ld	r25, X
    1938:	92 30       	cpi	r25, 0x02	; 2
    193a:	08 f4       	brcc	.+2      	; 0x193e <_fpadd_parts+0x1a>
    193c:	39 c1       	rjmp	.+626    	; 0x1bb0 <_fpadd_parts+0x28c>
    193e:	eb 01       	movw	r28, r22
    1940:	88 81       	ld	r24, Y
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	08 f4       	brcc	.+2      	; 0x1948 <_fpadd_parts+0x24>
    1946:	33 c1       	rjmp	.+614    	; 0x1bae <_fpadd_parts+0x28a>
    1948:	94 30       	cpi	r25, 0x04	; 4
    194a:	69 f4       	brne	.+26     	; 0x1966 <_fpadd_parts+0x42>
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	09 f0       	breq	.+2      	; 0x1952 <_fpadd_parts+0x2e>
    1950:	2f c1       	rjmp	.+606    	; 0x1bb0 <_fpadd_parts+0x28c>
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	9c 91       	ld	r25, X
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	98 17       	cp	r25, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <_fpadd_parts+0x3c>
    195e:	28 c1       	rjmp	.+592    	; 0x1bb0 <_fpadd_parts+0x28c>
    1960:	a0 e0       	ldi	r26, 0x00	; 0
    1962:	b2 e0       	ldi	r27, 0x02	; 2
    1964:	25 c1       	rjmp	.+586    	; 0x1bb0 <_fpadd_parts+0x28c>
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	09 f4       	brne	.+2      	; 0x196c <_fpadd_parts+0x48>
    196a:	21 c1       	rjmp	.+578    	; 0x1bae <_fpadd_parts+0x28a>
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	a9 f4       	brne	.+42     	; 0x199a <_fpadd_parts+0x76>
    1970:	92 30       	cpi	r25, 0x02	; 2
    1972:	09 f0       	breq	.+2      	; 0x1976 <_fpadd_parts+0x52>
    1974:	1d c1       	rjmp	.+570    	; 0x1bb0 <_fpadd_parts+0x28c>
    1976:	9a 01       	movw	r18, r20
    1978:	ad 01       	movw	r20, r26
    197a:	88 e0       	ldi	r24, 0x08	; 8
    197c:	ea 01       	movw	r28, r20
    197e:	09 90       	ld	r0, Y+
    1980:	ae 01       	movw	r20, r28
    1982:	e9 01       	movw	r28, r18
    1984:	09 92       	st	Y+, r0
    1986:	9e 01       	movw	r18, r28
    1988:	81 50       	subi	r24, 0x01	; 1
    198a:	c1 f7       	brne	.-16     	; 0x197c <_fpadd_parts+0x58>
    198c:	e2 01       	movw	r28, r4
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	9c 91       	ld	r25, X
    1994:	89 23       	and	r24, r25
    1996:	81 83       	std	Z+1, r24	; 0x01
    1998:	08 c1       	rjmp	.+528    	; 0x1baa <_fpadd_parts+0x286>
    199a:	92 30       	cpi	r25, 0x02	; 2
    199c:	09 f4       	brne	.+2      	; 0x19a0 <_fpadd_parts+0x7c>
    199e:	07 c1       	rjmp	.+526    	; 0x1bae <_fpadd_parts+0x28a>
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	2d 90       	ld	r2, X+
    19a4:	3c 90       	ld	r3, X
    19a6:	13 97       	sbiw	r26, 0x03	; 3
    19a8:	eb 01       	movw	r28, r22
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	14 96       	adiw	r26, 0x04	; 4
    19b0:	ad 90       	ld	r10, X+
    19b2:	bd 90       	ld	r11, X+
    19b4:	cd 90       	ld	r12, X+
    19b6:	dc 90       	ld	r13, X
    19b8:	17 97       	sbiw	r26, 0x07	; 7
    19ba:	ec 80       	ldd	r14, Y+4	; 0x04
    19bc:	fd 80       	ldd	r15, Y+5	; 0x05
    19be:	0e 81       	ldd	r16, Y+6	; 0x06
    19c0:	1f 81       	ldd	r17, Y+7	; 0x07
    19c2:	91 01       	movw	r18, r2
    19c4:	28 1b       	sub	r18, r24
    19c6:	39 0b       	sbc	r19, r25
    19c8:	b9 01       	movw	r22, r18
    19ca:	37 ff       	sbrs	r19, 7
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <_fpadd_parts+0xb2>
    19ce:	66 27       	eor	r22, r22
    19d0:	77 27       	eor	r23, r23
    19d2:	62 1b       	sub	r22, r18
    19d4:	73 0b       	sbc	r23, r19
    19d6:	60 32       	cpi	r22, 0x20	; 32
    19d8:	71 05       	cpc	r23, r1
    19da:	0c f0       	brlt	.+2      	; 0x19de <_fpadd_parts+0xba>
    19dc:	61 c0       	rjmp	.+194    	; 0x1aa0 <_fpadd_parts+0x17c>
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	6c f5       	brge	.+90     	; 0x1a3e <_fpadd_parts+0x11a>
    19e4:	37 01       	movw	r6, r14
    19e6:	48 01       	movw	r8, r16
    19e8:	06 2e       	mov	r0, r22
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <_fpadd_parts+0xd0>
    19ec:	96 94       	lsr	r9
    19ee:	87 94       	ror	r8
    19f0:	77 94       	ror	r7
    19f2:	67 94       	ror	r6
    19f4:	0a 94       	dec	r0
    19f6:	d2 f7       	brpl	.-12     	; 0x19ec <_fpadd_parts+0xc8>
    19f8:	21 e0       	ldi	r18, 0x01	; 1
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <_fpadd_parts+0xe6>
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	44 1f       	adc	r20, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	6a 95       	dec	r22
    1a0c:	d2 f7       	brpl	.-12     	; 0x1a02 <_fpadd_parts+0xde>
    1a0e:	21 50       	subi	r18, 0x01	; 1
    1a10:	30 40       	sbci	r19, 0x00	; 0
    1a12:	40 40       	sbci	r20, 0x00	; 0
    1a14:	50 40       	sbci	r21, 0x00	; 0
    1a16:	2e 21       	and	r18, r14
    1a18:	3f 21       	and	r19, r15
    1a1a:	40 23       	and	r20, r16
    1a1c:	51 23       	and	r21, r17
    1a1e:	21 15       	cp	r18, r1
    1a20:	31 05       	cpc	r19, r1
    1a22:	41 05       	cpc	r20, r1
    1a24:	51 05       	cpc	r21, r1
    1a26:	21 f0       	breq	.+8      	; 0x1a30 <_fpadd_parts+0x10c>
    1a28:	21 e0       	ldi	r18, 0x01	; 1
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	79 01       	movw	r14, r18
    1a32:	8a 01       	movw	r16, r20
    1a34:	e6 28       	or	r14, r6
    1a36:	f7 28       	or	r15, r7
    1a38:	08 29       	or	r16, r8
    1a3a:	19 29       	or	r17, r9
    1a3c:	3c c0       	rjmp	.+120    	; 0x1ab6 <_fpadd_parts+0x192>
    1a3e:	23 2b       	or	r18, r19
    1a40:	d1 f1       	breq	.+116    	; 0x1ab6 <_fpadd_parts+0x192>
    1a42:	26 0e       	add	r2, r22
    1a44:	37 1e       	adc	r3, r23
    1a46:	35 01       	movw	r6, r10
    1a48:	46 01       	movw	r8, r12
    1a4a:	06 2e       	mov	r0, r22
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <_fpadd_parts+0x132>
    1a4e:	96 94       	lsr	r9
    1a50:	87 94       	ror	r8
    1a52:	77 94       	ror	r7
    1a54:	67 94       	ror	r6
    1a56:	0a 94       	dec	r0
    1a58:	d2 f7       	brpl	.-12     	; 0x1a4e <_fpadd_parts+0x12a>
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <_fpadd_parts+0x148>
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	44 1f       	adc	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	6a 95       	dec	r22
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <_fpadd_parts+0x140>
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	30 40       	sbci	r19, 0x00	; 0
    1a74:	40 40       	sbci	r20, 0x00	; 0
    1a76:	50 40       	sbci	r21, 0x00	; 0
    1a78:	2a 21       	and	r18, r10
    1a7a:	3b 21       	and	r19, r11
    1a7c:	4c 21       	and	r20, r12
    1a7e:	5d 21       	and	r21, r13
    1a80:	21 15       	cp	r18, r1
    1a82:	31 05       	cpc	r19, r1
    1a84:	41 05       	cpc	r20, r1
    1a86:	51 05       	cpc	r21, r1
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <_fpadd_parts+0x16e>
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	59 01       	movw	r10, r18
    1a94:	6a 01       	movw	r12, r20
    1a96:	a6 28       	or	r10, r6
    1a98:	b7 28       	or	r11, r7
    1a9a:	c8 28       	or	r12, r8
    1a9c:	d9 28       	or	r13, r9
    1a9e:	0b c0       	rjmp	.+22     	; 0x1ab6 <_fpadd_parts+0x192>
    1aa0:	82 15       	cp	r24, r2
    1aa2:	93 05       	cpc	r25, r3
    1aa4:	2c f0       	brlt	.+10     	; 0x1ab0 <_fpadd_parts+0x18c>
    1aa6:	1c 01       	movw	r2, r24
    1aa8:	aa 24       	eor	r10, r10
    1aaa:	bb 24       	eor	r11, r11
    1aac:	65 01       	movw	r12, r10
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <_fpadd_parts+0x192>
    1ab0:	ee 24       	eor	r14, r14
    1ab2:	ff 24       	eor	r15, r15
    1ab4:	87 01       	movw	r16, r14
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	9c 91       	ld	r25, X
    1aba:	d2 01       	movw	r26, r4
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	8c 91       	ld	r24, X
    1ac0:	98 17       	cp	r25, r24
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <_fpadd_parts+0x1a2>
    1ac4:	45 c0       	rjmp	.+138    	; 0x1b50 <_fpadd_parts+0x22c>
    1ac6:	99 23       	and	r25, r25
    1ac8:	39 f0       	breq	.+14     	; 0x1ad8 <_fpadd_parts+0x1b4>
    1aca:	a8 01       	movw	r20, r16
    1acc:	97 01       	movw	r18, r14
    1ace:	2a 19       	sub	r18, r10
    1ad0:	3b 09       	sbc	r19, r11
    1ad2:	4c 09       	sbc	r20, r12
    1ad4:	5d 09       	sbc	r21, r13
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <_fpadd_parts+0x1c0>
    1ad8:	a6 01       	movw	r20, r12
    1ada:	95 01       	movw	r18, r10
    1adc:	2e 19       	sub	r18, r14
    1ade:	3f 09       	sbc	r19, r15
    1ae0:	40 0b       	sbc	r20, r16
    1ae2:	51 0b       	sbc	r21, r17
    1ae4:	57 fd       	sbrc	r21, 7
    1ae6:	08 c0       	rjmp	.+16     	; 0x1af8 <_fpadd_parts+0x1d4>
    1ae8:	11 82       	std	Z+1, r1	; 0x01
    1aea:	33 82       	std	Z+3, r3	; 0x03
    1aec:	22 82       	std	Z+2, r2	; 0x02
    1aee:	24 83       	std	Z+4, r18	; 0x04
    1af0:	35 83       	std	Z+5, r19	; 0x05
    1af2:	46 83       	std	Z+6, r20	; 0x06
    1af4:	57 83       	std	Z+7, r21	; 0x07
    1af6:	1d c0       	rjmp	.+58     	; 0x1b32 <_fpadd_parts+0x20e>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	81 83       	std	Z+1, r24	; 0x01
    1afc:	33 82       	std	Z+3, r3	; 0x03
    1afe:	22 82       	std	Z+2, r2	; 0x02
    1b00:	88 27       	eor	r24, r24
    1b02:	99 27       	eor	r25, r25
    1b04:	dc 01       	movw	r26, r24
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	a4 0b       	sbc	r26, r20
    1b0c:	b5 0b       	sbc	r27, r21
    1b0e:	84 83       	std	Z+4, r24	; 0x04
    1b10:	95 83       	std	Z+5, r25	; 0x05
    1b12:	a6 83       	std	Z+6, r26	; 0x06
    1b14:	b7 83       	std	Z+7, r27	; 0x07
    1b16:	0d c0       	rjmp	.+26     	; 0x1b32 <_fpadd_parts+0x20e>
    1b18:	22 0f       	add	r18, r18
    1b1a:	33 1f       	adc	r19, r19
    1b1c:	44 1f       	adc	r20, r20
    1b1e:	55 1f       	adc	r21, r21
    1b20:	24 83       	std	Z+4, r18	; 0x04
    1b22:	35 83       	std	Z+5, r19	; 0x05
    1b24:	46 83       	std	Z+6, r20	; 0x06
    1b26:	57 83       	std	Z+7, r21	; 0x07
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	93 83       	std	Z+3, r25	; 0x03
    1b30:	82 83       	std	Z+2, r24	; 0x02
    1b32:	24 81       	ldd	r18, Z+4	; 0x04
    1b34:	35 81       	ldd	r19, Z+5	; 0x05
    1b36:	46 81       	ldd	r20, Z+6	; 0x06
    1b38:	57 81       	ldd	r21, Z+7	; 0x07
    1b3a:	da 01       	movw	r26, r20
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	a1 09       	sbc	r26, r1
    1b42:	b1 09       	sbc	r27, r1
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	af 4f       	sbci	r26, 0xFF	; 255
    1b4a:	bf 43       	sbci	r27, 0x3F	; 63
    1b4c:	28 f3       	brcs	.-54     	; 0x1b18 <_fpadd_parts+0x1f4>
    1b4e:	0b c0       	rjmp	.+22     	; 0x1b66 <_fpadd_parts+0x242>
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	33 82       	std	Z+3, r3	; 0x03
    1b54:	22 82       	std	Z+2, r2	; 0x02
    1b56:	ea 0c       	add	r14, r10
    1b58:	fb 1c       	adc	r15, r11
    1b5a:	0c 1d       	adc	r16, r12
    1b5c:	1d 1d       	adc	r17, r13
    1b5e:	e4 82       	std	Z+4, r14	; 0x04
    1b60:	f5 82       	std	Z+5, r15	; 0x05
    1b62:	06 83       	std	Z+6, r16	; 0x06
    1b64:	17 83       	std	Z+7, r17	; 0x07
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	80 83       	st	Z, r24
    1b6a:	24 81       	ldd	r18, Z+4	; 0x04
    1b6c:	35 81       	ldd	r19, Z+5	; 0x05
    1b6e:	46 81       	ldd	r20, Z+6	; 0x06
    1b70:	57 81       	ldd	r21, Z+7	; 0x07
    1b72:	57 ff       	sbrs	r21, 7
    1b74:	1a c0       	rjmp	.+52     	; 0x1baa <_fpadd_parts+0x286>
    1b76:	c9 01       	movw	r24, r18
    1b78:	aa 27       	eor	r26, r26
    1b7a:	97 fd       	sbrc	r25, 7
    1b7c:	a0 95       	com	r26
    1b7e:	ba 2f       	mov	r27, r26
    1b80:	81 70       	andi	r24, 0x01	; 1
    1b82:	90 70       	andi	r25, 0x00	; 0
    1b84:	a0 70       	andi	r26, 0x00	; 0
    1b86:	b0 70       	andi	r27, 0x00	; 0
    1b88:	56 95       	lsr	r21
    1b8a:	47 95       	ror	r20
    1b8c:	37 95       	ror	r19
    1b8e:	27 95       	ror	r18
    1b90:	82 2b       	or	r24, r18
    1b92:	93 2b       	or	r25, r19
    1b94:	a4 2b       	or	r26, r20
    1b96:	b5 2b       	or	r27, r21
    1b98:	84 83       	std	Z+4, r24	; 0x04
    1b9a:	95 83       	std	Z+5, r25	; 0x05
    1b9c:	a6 83       	std	Z+6, r26	; 0x06
    1b9e:	b7 83       	std	Z+7, r27	; 0x07
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	93 83       	std	Z+3, r25	; 0x03
    1ba8:	82 83       	std	Z+2, r24	; 0x02
    1baa:	df 01       	movw	r26, r30
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <_fpadd_parts+0x28c>
    1bae:	d2 01       	movw	r26, r4
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	e2 e1       	ldi	r30, 0x12	; 18
    1bb8:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__epilogue_restores__>

00001bbc <__subsf3>:
    1bbc:	a0 e2       	ldi	r26, 0x20	; 32
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    1bc2:	fd e0       	ldi	r31, 0x0D	; 13
    1bc4:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
    1bc8:	69 83       	std	Y+1, r22	; 0x01
    1bca:	7a 83       	std	Y+2, r23	; 0x02
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	2d 83       	std	Y+5, r18	; 0x05
    1bd2:	3e 83       	std	Y+6, r19	; 0x06
    1bd4:	4f 83       	std	Y+7, r20	; 0x07
    1bd6:	58 87       	std	Y+8, r21	; 0x08
    1bd8:	e9 e0       	ldi	r30, 0x09	; 9
    1bda:	ee 2e       	mov	r14, r30
    1bdc:	f1 2c       	mov	r15, r1
    1bde:	ec 0e       	add	r14, r28
    1be0:	fd 1e       	adc	r15, r29
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	b7 01       	movw	r22, r14
    1be8:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1bec:	8e 01       	movw	r16, r28
    1bee:	0f 5e       	subi	r16, 0xEF	; 239
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	05 96       	adiw	r24, 0x05	; 5
    1bf6:	b8 01       	movw	r22, r16
    1bf8:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1bfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	89 27       	eor	r24, r25
    1c02:	8a 8b       	std	Y+18, r24	; 0x12
    1c04:	c7 01       	movw	r24, r14
    1c06:	b8 01       	movw	r22, r16
    1c08:	ae 01       	movw	r20, r28
    1c0a:	47 5e       	subi	r20, 0xE7	; 231
    1c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0e:	0e 94 92 0c 	call	0x1924	; 0x1924 <_fpadd_parts>
    1c12:	0e 94 1a 10 	call	0x2034	; 0x2034 <__pack_f>
    1c16:	a0 96       	adiw	r28, 0x20	; 32
    1c18:	e6 e0       	ldi	r30, 0x06	; 6
    1c1a:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00001c1e <__addsf3>:
    1c1e:	a0 e2       	ldi	r26, 0x20	; 32
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e5 e1       	ldi	r30, 0x15	; 21
    1c24:	fe e0       	ldi	r31, 0x0E	; 14
    1c26:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
    1c2a:	69 83       	std	Y+1, r22	; 0x01
    1c2c:	7a 83       	std	Y+2, r23	; 0x02
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	2d 83       	std	Y+5, r18	; 0x05
    1c34:	3e 83       	std	Y+6, r19	; 0x06
    1c36:	4f 83       	std	Y+7, r20	; 0x07
    1c38:	58 87       	std	Y+8, r21	; 0x08
    1c3a:	f9 e0       	ldi	r31, 0x09	; 9
    1c3c:	ef 2e       	mov	r14, r31
    1c3e:	f1 2c       	mov	r15, r1
    1c40:	ec 0e       	add	r14, r28
    1c42:	fd 1e       	adc	r15, r29
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	b7 01       	movw	r22, r14
    1c4a:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1c4e:	8e 01       	movw	r16, r28
    1c50:	0f 5e       	subi	r16, 0xEF	; 239
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	ce 01       	movw	r24, r28
    1c56:	05 96       	adiw	r24, 0x05	; 5
    1c58:	b8 01       	movw	r22, r16
    1c5a:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1c5e:	c7 01       	movw	r24, r14
    1c60:	b8 01       	movw	r22, r16
    1c62:	ae 01       	movw	r20, r28
    1c64:	47 5e       	subi	r20, 0xE7	; 231
    1c66:	5f 4f       	sbci	r21, 0xFF	; 255
    1c68:	0e 94 92 0c 	call	0x1924	; 0x1924 <_fpadd_parts>
    1c6c:	0e 94 1a 10 	call	0x2034	; 0x2034 <__pack_f>
    1c70:	a0 96       	adiw	r28, 0x20	; 32
    1c72:	e6 e0       	ldi	r30, 0x06	; 6
    1c74:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00001c78 <__mulsf3>:
    1c78:	a0 e2       	ldi	r26, 0x20	; 32
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e4       	ldi	r30, 0x42	; 66
    1c7e:	fe e0       	ldi	r31, 0x0E	; 14
    1c80:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__>
    1c84:	69 83       	std	Y+1, r22	; 0x01
    1c86:	7a 83       	std	Y+2, r23	; 0x02
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	2d 83       	std	Y+5, r18	; 0x05
    1c8e:	3e 83       	std	Y+6, r19	; 0x06
    1c90:	4f 83       	std	Y+7, r20	; 0x07
    1c92:	58 87       	std	Y+8, r21	; 0x08
    1c94:	ce 01       	movw	r24, r28
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	be 01       	movw	r22, r28
    1c9a:	67 5f       	subi	r22, 0xF7	; 247
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	05 96       	adiw	r24, 0x05	; 5
    1ca6:	be 01       	movw	r22, r28
    1ca8:	6f 5e       	subi	r22, 0xEF	; 239
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1cb0:	99 85       	ldd	r25, Y+9	; 0x09
    1cb2:	92 30       	cpi	r25, 0x02	; 2
    1cb4:	88 f0       	brcs	.+34     	; 0x1cd8 <__mulsf3+0x60>
    1cb6:	89 89       	ldd	r24, Y+17	; 0x11
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	c8 f0       	brcs	.+50     	; 0x1cee <__mulsf3+0x76>
    1cbc:	94 30       	cpi	r25, 0x04	; 4
    1cbe:	19 f4       	brne	.+6      	; 0x1cc6 <__mulsf3+0x4e>
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	51 f4       	brne	.+20     	; 0x1cd8 <__mulsf3+0x60>
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__mulsf3+0x56>
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <__mulsf3+0x5c>
    1cca:	92 30       	cpi	r25, 0x02	; 2
    1ccc:	81 f4       	brne	.+32     	; 0x1cee <__mulsf3+0x76>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	92 e0       	ldi	r25, 0x02	; 2
    1cd2:	c6 c0       	rjmp	.+396    	; 0x1e60 <__mulsf3+0x1e8>
    1cd4:	92 30       	cpi	r25, 0x02	; 2
    1cd6:	49 f4       	brne	.+18     	; 0x1cea <__mulsf3+0x72>
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cde:	98 13       	cpse	r25, r24
    1ce0:	21 e0       	ldi	r18, 0x01	; 1
    1ce2:	2a 87       	std	Y+10, r18	; 0x0a
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	09 96       	adiw	r24, 0x09	; 9
    1ce8:	bb c0       	rjmp	.+374    	; 0x1e60 <__mulsf3+0x1e8>
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	49 f4       	brne	.+18     	; 0x1d00 <__mulsf3+0x88>
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	8a 89       	ldd	r24, Y+18	; 0x12
    1cf4:	98 13       	cpse	r25, r24
    1cf6:	21 e0       	ldi	r18, 0x01	; 1
    1cf8:	2a 8b       	std	Y+18, r18	; 0x12
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	41 96       	adiw	r24, 0x11	; 17
    1cfe:	b0 c0       	rjmp	.+352    	; 0x1e60 <__mulsf3+0x1e8>
    1d00:	2d 84       	ldd	r2, Y+13	; 0x0d
    1d02:	3e 84       	ldd	r3, Y+14	; 0x0e
    1d04:	4f 84       	ldd	r4, Y+15	; 0x0f
    1d06:	58 88       	ldd	r5, Y+16	; 0x10
    1d08:	6d 88       	ldd	r6, Y+21	; 0x15
    1d0a:	7e 88       	ldd	r7, Y+22	; 0x16
    1d0c:	8f 88       	ldd	r8, Y+23	; 0x17
    1d0e:	98 8c       	ldd	r9, Y+24	; 0x18
    1d10:	ee 24       	eor	r14, r14
    1d12:	ff 24       	eor	r15, r15
    1d14:	87 01       	movw	r16, r14
    1d16:	aa 24       	eor	r10, r10
    1d18:	bb 24       	eor	r11, r11
    1d1a:	65 01       	movw	r12, r10
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	e0 e0       	ldi	r30, 0x00	; 0
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	c1 01       	movw	r24, r2
    1d2a:	81 70       	andi	r24, 0x01	; 1
    1d2c:	90 70       	andi	r25, 0x00	; 0
    1d2e:	89 2b       	or	r24, r25
    1d30:	e9 f0       	breq	.+58     	; 0x1d6c <__mulsf3+0xf4>
    1d32:	e6 0c       	add	r14, r6
    1d34:	f7 1c       	adc	r15, r7
    1d36:	08 1d       	adc	r16, r8
    1d38:	19 1d       	adc	r17, r9
    1d3a:	9a 01       	movw	r18, r20
    1d3c:	ab 01       	movw	r20, r22
    1d3e:	2a 0d       	add	r18, r10
    1d40:	3b 1d       	adc	r19, r11
    1d42:	4c 1d       	adc	r20, r12
    1d44:	5d 1d       	adc	r21, r13
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e6 14       	cp	r14, r6
    1d50:	f7 04       	cpc	r15, r7
    1d52:	08 05       	cpc	r16, r8
    1d54:	19 05       	cpc	r17, r9
    1d56:	20 f4       	brcc	.+8      	; 0x1d60 <__mulsf3+0xe8>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	ba 01       	movw	r22, r20
    1d62:	a9 01       	movw	r20, r18
    1d64:	48 0f       	add	r20, r24
    1d66:	59 1f       	adc	r21, r25
    1d68:	6a 1f       	adc	r22, r26
    1d6a:	7b 1f       	adc	r23, r27
    1d6c:	aa 0c       	add	r10, r10
    1d6e:	bb 1c       	adc	r11, r11
    1d70:	cc 1c       	adc	r12, r12
    1d72:	dd 1c       	adc	r13, r13
    1d74:	97 fe       	sbrs	r9, 7
    1d76:	08 c0       	rjmp	.+16     	; 0x1d88 <__mulsf3+0x110>
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	a8 2a       	or	r10, r24
    1d82:	b9 2a       	or	r11, r25
    1d84:	ca 2a       	or	r12, r26
    1d86:	db 2a       	or	r13, r27
    1d88:	31 96       	adiw	r30, 0x01	; 1
    1d8a:	e0 32       	cpi	r30, 0x20	; 32
    1d8c:	f1 05       	cpc	r31, r1
    1d8e:	49 f0       	breq	.+18     	; 0x1da2 <__mulsf3+0x12a>
    1d90:	66 0c       	add	r6, r6
    1d92:	77 1c       	adc	r7, r7
    1d94:	88 1c       	adc	r8, r8
    1d96:	99 1c       	adc	r9, r9
    1d98:	56 94       	lsr	r5
    1d9a:	47 94       	ror	r4
    1d9c:	37 94       	ror	r3
    1d9e:	27 94       	ror	r2
    1da0:	c3 cf       	rjmp	.-122    	; 0x1d28 <__mulsf3+0xb0>
    1da2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1da4:	ea 89       	ldd	r30, Y+18	; 0x12
    1da6:	2b 89       	ldd	r18, Y+19	; 0x13
    1da8:	3c 89       	ldd	r19, Y+20	; 0x14
    1daa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dac:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dae:	28 0f       	add	r18, r24
    1db0:	39 1f       	adc	r19, r25
    1db2:	2e 5f       	subi	r18, 0xFE	; 254
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	17 c0       	rjmp	.+46     	; 0x1de6 <__mulsf3+0x16e>
    1db8:	ca 01       	movw	r24, r20
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	89 2b       	or	r24, r25
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <__mulsf3+0x162>
    1dc2:	16 95       	lsr	r17
    1dc4:	07 95       	ror	r16
    1dc6:	f7 94       	ror	r15
    1dc8:	e7 94       	ror	r14
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e8       	ldi	r27, 0x80	; 128
    1dd2:	e8 2a       	or	r14, r24
    1dd4:	f9 2a       	or	r15, r25
    1dd6:	0a 2b       	or	r16, r26
    1dd8:	1b 2b       	or	r17, r27
    1dda:	76 95       	lsr	r23
    1ddc:	67 95       	ror	r22
    1dde:	57 95       	ror	r21
    1de0:	47 95       	ror	r20
    1de2:	2f 5f       	subi	r18, 0xFF	; 255
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	77 fd       	sbrc	r23, 7
    1de8:	e7 cf       	rjmp	.-50     	; 0x1db8 <__mulsf3+0x140>
    1dea:	0c c0       	rjmp	.+24     	; 0x1e04 <__mulsf3+0x18c>
    1dec:	44 0f       	add	r20, r20
    1dee:	55 1f       	adc	r21, r21
    1df0:	66 1f       	adc	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	17 fd       	sbrc	r17, 7
    1df6:	41 60       	ori	r20, 0x01	; 1
    1df8:	ee 0c       	add	r14, r14
    1dfa:	ff 1c       	adc	r15, r15
    1dfc:	00 1f       	adc	r16, r16
    1dfe:	11 1f       	adc	r17, r17
    1e00:	21 50       	subi	r18, 0x01	; 1
    1e02:	30 40       	sbci	r19, 0x00	; 0
    1e04:	40 30       	cpi	r20, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	59 07       	cpc	r21, r25
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	69 07       	cpc	r22, r25
    1e0e:	90 e4       	ldi	r25, 0x40	; 64
    1e10:	79 07       	cpc	r23, r25
    1e12:	60 f3       	brcs	.-40     	; 0x1dec <__mulsf3+0x174>
    1e14:	2b 8f       	std	Y+27, r18	; 0x1b
    1e16:	3c 8f       	std	Y+28, r19	; 0x1c
    1e18:	db 01       	movw	r26, r22
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	8f 77       	andi	r24, 0x7F	; 127
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	a0 70       	andi	r26, 0x00	; 0
    1e22:	b0 70       	andi	r27, 0x00	; 0
    1e24:	80 34       	cpi	r24, 0x40	; 64
    1e26:	91 05       	cpc	r25, r1
    1e28:	a1 05       	cpc	r26, r1
    1e2a:	b1 05       	cpc	r27, r1
    1e2c:	61 f4       	brne	.+24     	; 0x1e46 <__mulsf3+0x1ce>
    1e2e:	47 fd       	sbrc	r20, 7
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <__mulsf3+0x1ce>
    1e32:	e1 14       	cp	r14, r1
    1e34:	f1 04       	cpc	r15, r1
    1e36:	01 05       	cpc	r16, r1
    1e38:	11 05       	cpc	r17, r1
    1e3a:	29 f0       	breq	.+10     	; 0x1e46 <__mulsf3+0x1ce>
    1e3c:	40 5c       	subi	r20, 0xC0	; 192
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	6f 4f       	sbci	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	40 78       	andi	r20, 0x80	; 128
    1e46:	1a 8e       	std	Y+26, r1	; 0x1a
    1e48:	fe 17       	cp	r31, r30
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <__mulsf3+0x1d8>
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e50:	4d 8f       	std	Y+29, r20	; 0x1d
    1e52:	5e 8f       	std	Y+30, r21	; 0x1e
    1e54:	6f 8f       	std	Y+31, r22	; 0x1f
    1e56:	78 a3       	std	Y+32, r23	; 0x20
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	89 8f       	std	Y+25, r24	; 0x19
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	49 96       	adiw	r24, 0x19	; 25
    1e60:	0e 94 1a 10 	call	0x2034	; 0x2034 <__pack_f>
    1e64:	a0 96       	adiw	r28, 0x20	; 32
    1e66:	e2 e1       	ldi	r30, 0x12	; 18
    1e68:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__epilogue_restores__>

00001e6c <__gtsf2>:
    1e6c:	a8 e1       	ldi	r26, 0x18	; 24
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ec e3       	ldi	r30, 0x3C	; 60
    1e72:	ff e0       	ldi	r31, 0x0F	; 15
    1e74:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
    1e78:	69 83       	std	Y+1, r22	; 0x01
    1e7a:	7a 83       	std	Y+2, r23	; 0x02
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	2d 83       	std	Y+5, r18	; 0x05
    1e82:	3e 83       	std	Y+6, r19	; 0x06
    1e84:	4f 83       	std	Y+7, r20	; 0x07
    1e86:	58 87       	std	Y+8, r21	; 0x08
    1e88:	89 e0       	ldi	r24, 0x09	; 9
    1e8a:	e8 2e       	mov	r14, r24
    1e8c:	f1 2c       	mov	r15, r1
    1e8e:	ec 0e       	add	r14, r28
    1e90:	fd 1e       	adc	r15, r29
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	b7 01       	movw	r22, r14
    1e98:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0f 5e       	subi	r16, 0xEF	; 239
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	05 96       	adiw	r24, 0x05	; 5
    1ea6:	b8 01       	movw	r22, r16
    1ea8:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	40 f0       	brcs	.+16     	; 0x1ec2 <__gtsf2+0x56>
    1eb2:	89 89       	ldd	r24, Y+17	; 0x11
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	28 f0       	brcs	.+10     	; 0x1ec2 <__gtsf2+0x56>
    1eb8:	c7 01       	movw	r24, r14
    1eba:	b8 01       	movw	r22, r16
    1ebc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__fpcmp_parts_f>
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <__gtsf2+0x58>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	68 96       	adiw	r28, 0x18	; 24
    1ec6:	e6 e0       	ldi	r30, 0x06	; 6
    1ec8:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00001ecc <__gesf2>:
    1ecc:	a8 e1       	ldi	r26, 0x18	; 24
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ec e6       	ldi	r30, 0x6C	; 108
    1ed2:	ff e0       	ldi	r31, 0x0F	; 15
    1ed4:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
    1ed8:	69 83       	std	Y+1, r22	; 0x01
    1eda:	7a 83       	std	Y+2, r23	; 0x02
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	2d 83       	std	Y+5, r18	; 0x05
    1ee2:	3e 83       	std	Y+6, r19	; 0x06
    1ee4:	4f 83       	std	Y+7, r20	; 0x07
    1ee6:	58 87       	std	Y+8, r21	; 0x08
    1ee8:	89 e0       	ldi	r24, 0x09	; 9
    1eea:	e8 2e       	mov	r14, r24
    1eec:	f1 2c       	mov	r15, r1
    1eee:	ec 0e       	add	r14, r28
    1ef0:	fd 1e       	adc	r15, r29
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1efc:	8e 01       	movw	r16, r28
    1efe:	0f 5e       	subi	r16, 0xEF	; 239
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	ce 01       	movw	r24, r28
    1f04:	05 96       	adiw	r24, 0x05	; 5
    1f06:	b8 01       	movw	r22, r16
    1f08:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	40 f0       	brcs	.+16     	; 0x1f22 <__gesf2+0x56>
    1f12:	89 89       	ldd	r24, Y+17	; 0x11
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	28 f0       	brcs	.+10     	; 0x1f22 <__gesf2+0x56>
    1f18:	c7 01       	movw	r24, r14
    1f1a:	b8 01       	movw	r22, r16
    1f1c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__fpcmp_parts_f>
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <__gesf2+0x58>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	68 96       	adiw	r28, 0x18	; 24
    1f26:	e6 e0       	ldi	r30, 0x06	; 6
    1f28:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00001f2c <__ltsf2>:
    1f2c:	a8 e1       	ldi	r26, 0x18	; 24
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ec e9       	ldi	r30, 0x9C	; 156
    1f32:	ff e0       	ldi	r31, 0x0F	; 15
    1f34:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
    1f38:	69 83       	std	Y+1, r22	; 0x01
    1f3a:	7a 83       	std	Y+2, r23	; 0x02
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	2d 83       	std	Y+5, r18	; 0x05
    1f42:	3e 83       	std	Y+6, r19	; 0x06
    1f44:	4f 83       	std	Y+7, r20	; 0x07
    1f46:	58 87       	std	Y+8, r21	; 0x08
    1f48:	89 e0       	ldi	r24, 0x09	; 9
    1f4a:	e8 2e       	mov	r14, r24
    1f4c:	f1 2c       	mov	r15, r1
    1f4e:	ec 0e       	add	r14, r28
    1f50:	fd 1e       	adc	r15, r29
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	b7 01       	movw	r22, r14
    1f58:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1f5c:	8e 01       	movw	r16, r28
    1f5e:	0f 5e       	subi	r16, 0xEF	; 239
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	ce 01       	movw	r24, r28
    1f64:	05 96       	adiw	r24, 0x05	; 5
    1f66:	b8 01       	movw	r22, r16
    1f68:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	40 f0       	brcs	.+16     	; 0x1f82 <__ltsf2+0x56>
    1f72:	89 89       	ldd	r24, Y+17	; 0x11
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	28 f0       	brcs	.+10     	; 0x1f82 <__ltsf2+0x56>
    1f78:	c7 01       	movw	r24, r14
    1f7a:	b8 01       	movw	r22, r16
    1f7c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__fpcmp_parts_f>
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <__ltsf2+0x58>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	68 96       	adiw	r28, 0x18	; 24
    1f86:	e6 e0       	ldi	r30, 0x06	; 6
    1f88:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00001f8c <__fixsfsi>:
    1f8c:	ac e0       	ldi	r26, 0x0C	; 12
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ec ec       	ldi	r30, 0xCC	; 204
    1f92:	ff e0       	ldi	r31, 0x0F	; 15
    1f94:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__+0x20>
    1f98:	69 83       	std	Y+1, r22	; 0x01
    1f9a:	7a 83       	std	Y+2, r23	; 0x02
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	be 01       	movw	r22, r28
    1fa6:	6b 5f       	subi	r22, 0xFB	; 251
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	0e 94 ef 10 	call	0x21de	; 0x21de <__unpack_f>
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	61 f1       	breq	.+88     	; 0x200c <__fixsfsi+0x80>
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	50 f1       	brcs	.+84     	; 0x200c <__fixsfsi+0x80>
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	21 f4       	brne	.+8      	; 0x1fc4 <__fixsfsi+0x38>
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	88 23       	and	r24, r24
    1fc0:	51 f1       	breq	.+84     	; 0x2016 <__fixsfsi+0x8a>
    1fc2:	2e c0       	rjmp	.+92     	; 0x2020 <__fixsfsi+0x94>
    1fc4:	2f 81       	ldd	r18, Y+7	; 0x07
    1fc6:	38 85       	ldd	r19, Y+8	; 0x08
    1fc8:	37 fd       	sbrc	r19, 7
    1fca:	20 c0       	rjmp	.+64     	; 0x200c <__fixsfsi+0x80>
    1fcc:	6e 81       	ldd	r22, Y+6	; 0x06
    1fce:	2f 31       	cpi	r18, 0x1F	; 31
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	1c f0       	brlt	.+6      	; 0x1fda <__fixsfsi+0x4e>
    1fd4:	66 23       	and	r22, r22
    1fd6:	f9 f0       	breq	.+62     	; 0x2016 <__fixsfsi+0x8a>
    1fd8:	23 c0       	rjmp	.+70     	; 0x2020 <__fixsfsi+0x94>
    1fda:	8e e1       	ldi	r24, 0x1E	; 30
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	82 1b       	sub	r24, r18
    1fe0:	93 0b       	sbc	r25, r19
    1fe2:	29 85       	ldd	r18, Y+9	; 0x09
    1fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fe8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <__fixsfsi+0x68>
    1fec:	56 95       	lsr	r21
    1fee:	47 95       	ror	r20
    1ff0:	37 95       	ror	r19
    1ff2:	27 95       	ror	r18
    1ff4:	8a 95       	dec	r24
    1ff6:	d2 f7       	brpl	.-12     	; 0x1fec <__fixsfsi+0x60>
    1ff8:	66 23       	and	r22, r22
    1ffa:	b1 f0       	breq	.+44     	; 0x2028 <__fixsfsi+0x9c>
    1ffc:	50 95       	com	r21
    1ffe:	40 95       	com	r20
    2000:	30 95       	com	r19
    2002:	21 95       	neg	r18
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	4f 4f       	sbci	r20, 0xFF	; 255
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <__fixsfsi+0x9c>
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	09 c0       	rjmp	.+18     	; 0x2028 <__fixsfsi+0x9c>
    2016:	2f ef       	ldi	r18, 0xFF	; 255
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f ef       	ldi	r20, 0xFF	; 255
    201c:	5f e7       	ldi	r21, 0x7F	; 127
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <__fixsfsi+0x9c>
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e8       	ldi	r21, 0x80	; 128
    2028:	b9 01       	movw	r22, r18
    202a:	ca 01       	movw	r24, r20
    202c:	2c 96       	adiw	r28, 0x0c	; 12
    202e:	e2 e0       	ldi	r30, 0x02	; 2
    2030:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__+0x20>

00002034 <__pack_f>:
    2034:	df 92       	push	r13
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	fc 01       	movw	r30, r24
    2040:	e4 80       	ldd	r14, Z+4	; 0x04
    2042:	f5 80       	ldd	r15, Z+5	; 0x05
    2044:	06 81       	ldd	r16, Z+6	; 0x06
    2046:	17 81       	ldd	r17, Z+7	; 0x07
    2048:	d1 80       	ldd	r13, Z+1	; 0x01
    204a:	80 81       	ld	r24, Z
    204c:	82 30       	cpi	r24, 0x02	; 2
    204e:	48 f4       	brcc	.+18     	; 0x2062 <__pack_f+0x2e>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a0 e1       	ldi	r26, 0x10	; 16
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e8 2a       	or	r14, r24
    205a:	f9 2a       	or	r15, r25
    205c:	0a 2b       	or	r16, r26
    205e:	1b 2b       	or	r17, r27
    2060:	a5 c0       	rjmp	.+330    	; 0x21ac <__pack_f+0x178>
    2062:	84 30       	cpi	r24, 0x04	; 4
    2064:	09 f4       	brne	.+2      	; 0x2068 <__pack_f+0x34>
    2066:	9f c0       	rjmp	.+318    	; 0x21a6 <__pack_f+0x172>
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	21 f4       	brne	.+8      	; 0x2074 <__pack_f+0x40>
    206c:	ee 24       	eor	r14, r14
    206e:	ff 24       	eor	r15, r15
    2070:	87 01       	movw	r16, r14
    2072:	05 c0       	rjmp	.+10     	; 0x207e <__pack_f+0x4a>
    2074:	e1 14       	cp	r14, r1
    2076:	f1 04       	cpc	r15, r1
    2078:	01 05       	cpc	r16, r1
    207a:	11 05       	cpc	r17, r1
    207c:	19 f4       	brne	.+6      	; 0x2084 <__pack_f+0x50>
    207e:	e0 e0       	ldi	r30, 0x00	; 0
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	96 c0       	rjmp	.+300    	; 0x21b0 <__pack_f+0x17c>
    2084:	62 81       	ldd	r22, Z+2	; 0x02
    2086:	73 81       	ldd	r23, Z+3	; 0x03
    2088:	9f ef       	ldi	r25, 0xFF	; 255
    208a:	62 38       	cpi	r22, 0x82	; 130
    208c:	79 07       	cpc	r23, r25
    208e:	0c f0       	brlt	.+2      	; 0x2092 <__pack_f+0x5e>
    2090:	5b c0       	rjmp	.+182    	; 0x2148 <__pack_f+0x114>
    2092:	22 e8       	ldi	r18, 0x82	; 130
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	26 1b       	sub	r18, r22
    2098:	37 0b       	sbc	r19, r23
    209a:	2a 31       	cpi	r18, 0x1A	; 26
    209c:	31 05       	cpc	r19, r1
    209e:	2c f0       	brlt	.+10     	; 0x20aa <__pack_f+0x76>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	2a c0       	rjmp	.+84     	; 0x20fe <__pack_f+0xca>
    20aa:	b8 01       	movw	r22, r16
    20ac:	a7 01       	movw	r20, r14
    20ae:	02 2e       	mov	r0, r18
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <__pack_f+0x86>
    20b2:	76 95       	lsr	r23
    20b4:	67 95       	ror	r22
    20b6:	57 95       	ror	r21
    20b8:	47 95       	ror	r20
    20ba:	0a 94       	dec	r0
    20bc:	d2 f7       	brpl	.-12     	; 0x20b2 <__pack_f+0x7e>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <__pack_f+0x9c>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	2a 95       	dec	r18
    20d2:	d2 f7       	brpl	.-12     	; 0x20c8 <__pack_f+0x94>
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	a1 09       	sbc	r26, r1
    20d8:	b1 09       	sbc	r27, r1
    20da:	8e 21       	and	r24, r14
    20dc:	9f 21       	and	r25, r15
    20de:	a0 23       	and	r26, r16
    20e0:	b1 23       	and	r27, r17
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	a1 05       	cpc	r26, r1
    20e6:	b1 05       	cpc	r27, r1
    20e8:	21 f0       	breq	.+8      	; 0x20f2 <__pack_f+0xbe>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	9a 01       	movw	r18, r20
    20f4:	ab 01       	movw	r20, r22
    20f6:	28 2b       	or	r18, r24
    20f8:	39 2b       	or	r19, r25
    20fa:	4a 2b       	or	r20, r26
    20fc:	5b 2b       	or	r21, r27
    20fe:	da 01       	movw	r26, r20
    2100:	c9 01       	movw	r24, r18
    2102:	8f 77       	andi	r24, 0x7F	; 127
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	a0 70       	andi	r26, 0x00	; 0
    2108:	b0 70       	andi	r27, 0x00	; 0
    210a:	80 34       	cpi	r24, 0x40	; 64
    210c:	91 05       	cpc	r25, r1
    210e:	a1 05       	cpc	r26, r1
    2110:	b1 05       	cpc	r27, r1
    2112:	39 f4       	brne	.+14     	; 0x2122 <__pack_f+0xee>
    2114:	27 ff       	sbrs	r18, 7
    2116:	09 c0       	rjmp	.+18     	; 0x212a <__pack_f+0xf6>
    2118:	20 5c       	subi	r18, 0xC0	; 192
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	4f 4f       	sbci	r20, 0xFF	; 255
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
    2120:	04 c0       	rjmp	.+8      	; 0x212a <__pack_f+0xf6>
    2122:	21 5c       	subi	r18, 0xC1	; 193
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	4f 4f       	sbci	r20, 0xFF	; 255
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	e0 e0       	ldi	r30, 0x00	; 0
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	20 30       	cpi	r18, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	3a 07       	cpc	r19, r26
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	4a 07       	cpc	r20, r26
    2138:	a0 e4       	ldi	r26, 0x40	; 64
    213a:	5a 07       	cpc	r21, r26
    213c:	10 f0       	brcs	.+4      	; 0x2142 <__pack_f+0x10e>
    213e:	e1 e0       	ldi	r30, 0x01	; 1
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	79 01       	movw	r14, r18
    2144:	8a 01       	movw	r16, r20
    2146:	27 c0       	rjmp	.+78     	; 0x2196 <__pack_f+0x162>
    2148:	60 38       	cpi	r22, 0x80	; 128
    214a:	71 05       	cpc	r23, r1
    214c:	64 f5       	brge	.+88     	; 0x21a6 <__pack_f+0x172>
    214e:	fb 01       	movw	r30, r22
    2150:	e1 58       	subi	r30, 0x81	; 129
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	d8 01       	movw	r26, r16
    2156:	c7 01       	movw	r24, r14
    2158:	8f 77       	andi	r24, 0x7F	; 127
    215a:	90 70       	andi	r25, 0x00	; 0
    215c:	a0 70       	andi	r26, 0x00	; 0
    215e:	b0 70       	andi	r27, 0x00	; 0
    2160:	80 34       	cpi	r24, 0x40	; 64
    2162:	91 05       	cpc	r25, r1
    2164:	a1 05       	cpc	r26, r1
    2166:	b1 05       	cpc	r27, r1
    2168:	39 f4       	brne	.+14     	; 0x2178 <__pack_f+0x144>
    216a:	e7 fe       	sbrs	r14, 7
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <__pack_f+0x154>
    216e:	80 e4       	ldi	r24, 0x40	; 64
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__pack_f+0x14c>
    2178:	8f e3       	ldi	r24, 0x3F	; 63
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e8 0e       	add	r14, r24
    2182:	f9 1e       	adc	r15, r25
    2184:	0a 1f       	adc	r16, r26
    2186:	1b 1f       	adc	r17, r27
    2188:	17 ff       	sbrs	r17, 7
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <__pack_f+0x162>
    218c:	16 95       	lsr	r17
    218e:	07 95       	ror	r16
    2190:	f7 94       	ror	r15
    2192:	e7 94       	ror	r14
    2194:	31 96       	adiw	r30, 0x01	; 1
    2196:	87 e0       	ldi	r24, 0x07	; 7
    2198:	16 95       	lsr	r17
    219a:	07 95       	ror	r16
    219c:	f7 94       	ror	r15
    219e:	e7 94       	ror	r14
    21a0:	8a 95       	dec	r24
    21a2:	d1 f7       	brne	.-12     	; 0x2198 <__pack_f+0x164>
    21a4:	05 c0       	rjmp	.+10     	; 0x21b0 <__pack_f+0x17c>
    21a6:	ee 24       	eor	r14, r14
    21a8:	ff 24       	eor	r15, r15
    21aa:	87 01       	movw	r16, r14
    21ac:	ef ef       	ldi	r30, 0xFF	; 255
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	6e 2f       	mov	r22, r30
    21b2:	67 95       	ror	r22
    21b4:	66 27       	eor	r22, r22
    21b6:	67 95       	ror	r22
    21b8:	90 2f       	mov	r25, r16
    21ba:	9f 77       	andi	r25, 0x7F	; 127
    21bc:	d7 94       	ror	r13
    21be:	dd 24       	eor	r13, r13
    21c0:	d7 94       	ror	r13
    21c2:	8e 2f       	mov	r24, r30
    21c4:	86 95       	lsr	r24
    21c6:	49 2f       	mov	r20, r25
    21c8:	46 2b       	or	r20, r22
    21ca:	58 2f       	mov	r21, r24
    21cc:	5d 29       	or	r21, r13
    21ce:	b7 01       	movw	r22, r14
    21d0:	ca 01       	movw	r24, r20
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	08 95       	ret

000021de <__unpack_f>:
    21de:	fc 01       	movw	r30, r24
    21e0:	db 01       	movw	r26, r22
    21e2:	40 81       	ld	r20, Z
    21e4:	51 81       	ldd	r21, Z+1	; 0x01
    21e6:	22 81       	ldd	r18, Z+2	; 0x02
    21e8:	62 2f       	mov	r22, r18
    21ea:	6f 77       	andi	r22, 0x7F	; 127
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	22 1f       	adc	r18, r18
    21f0:	22 27       	eor	r18, r18
    21f2:	22 1f       	adc	r18, r18
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	89 2f       	mov	r24, r25
    21f8:	88 0f       	add	r24, r24
    21fa:	82 2b       	or	r24, r18
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	99 1f       	adc	r25, r25
    2202:	99 27       	eor	r25, r25
    2204:	99 1f       	adc	r25, r25
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	9c 93       	st	X, r25
    220a:	11 97       	sbiw	r26, 0x01	; 1
    220c:	21 15       	cp	r18, r1
    220e:	31 05       	cpc	r19, r1
    2210:	a9 f5       	brne	.+106    	; 0x227c <__stack+0x7d>
    2212:	41 15       	cp	r20, r1
    2214:	51 05       	cpc	r21, r1
    2216:	61 05       	cpc	r22, r1
    2218:	71 05       	cpc	r23, r1
    221a:	11 f4       	brne	.+4      	; 0x2220 <__stack+0x21>
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	37 c0       	rjmp	.+110    	; 0x228e <__stack+0x8f>
    2220:	82 e8       	ldi	r24, 0x82	; 130
    2222:	9f ef       	ldi	r25, 0xFF	; 255
    2224:	13 96       	adiw	r26, 0x03	; 3
    2226:	9c 93       	st	X, r25
    2228:	8e 93       	st	-X, r24
    222a:	12 97       	sbiw	r26, 0x02	; 2
    222c:	9a 01       	movw	r18, r20
    222e:	ab 01       	movw	r20, r22
    2230:	67 e0       	ldi	r22, 0x07	; 7
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	44 1f       	adc	r20, r20
    2238:	55 1f       	adc	r21, r21
    223a:	6a 95       	dec	r22
    223c:	d1 f7       	brne	.-12     	; 0x2232 <__stack+0x33>
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	8c 93       	st	X, r24
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__stack+0x5f>
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	44 1f       	adc	r20, r20
    224a:	55 1f       	adc	r21, r21
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	8d 91       	ld	r24, X+
    2250:	9c 91       	ld	r25, X
    2252:	13 97       	sbiw	r26, 0x03	; 3
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	13 96       	adiw	r26, 0x03	; 3
    2258:	9c 93       	st	X, r25
    225a:	8e 93       	st	-X, r24
    225c:	12 97       	sbiw	r26, 0x02	; 2
    225e:	20 30       	cpi	r18, 0x00	; 0
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	38 07       	cpc	r19, r24
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	48 07       	cpc	r20, r24
    2268:	80 e4       	ldi	r24, 0x40	; 64
    226a:	58 07       	cpc	r21, r24
    226c:	58 f3       	brcs	.-42     	; 0x2244 <__stack+0x45>
    226e:	14 96       	adiw	r26, 0x04	; 4
    2270:	2d 93       	st	X+, r18
    2272:	3d 93       	st	X+, r19
    2274:	4d 93       	st	X+, r20
    2276:	5c 93       	st	X, r21
    2278:	17 97       	sbiw	r26, 0x07	; 7
    227a:	08 95       	ret
    227c:	2f 3f       	cpi	r18, 0xFF	; 255
    227e:	31 05       	cpc	r19, r1
    2280:	79 f4       	brne	.+30     	; 0x22a0 <__stack+0xa1>
    2282:	41 15       	cp	r20, r1
    2284:	51 05       	cpc	r21, r1
    2286:	61 05       	cpc	r22, r1
    2288:	71 05       	cpc	r23, r1
    228a:	19 f4       	brne	.+6      	; 0x2292 <__stack+0x93>
    228c:	84 e0       	ldi	r24, 0x04	; 4
    228e:	8c 93       	st	X, r24
    2290:	08 95       	ret
    2292:	64 ff       	sbrs	r22, 4
    2294:	03 c0       	rjmp	.+6      	; 0x229c <__stack+0x9d>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	8c 93       	st	X, r24
    229a:	12 c0       	rjmp	.+36     	; 0x22c0 <__stack+0xc1>
    229c:	1c 92       	st	X, r1
    229e:	10 c0       	rjmp	.+32     	; 0x22c0 <__stack+0xc1>
    22a0:	2f 57       	subi	r18, 0x7F	; 127
    22a2:	30 40       	sbci	r19, 0x00	; 0
    22a4:	13 96       	adiw	r26, 0x03	; 3
    22a6:	3c 93       	st	X, r19
    22a8:	2e 93       	st	-X, r18
    22aa:	12 97       	sbiw	r26, 0x02	; 2
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	8c 93       	st	X, r24
    22b0:	87 e0       	ldi	r24, 0x07	; 7
    22b2:	44 0f       	add	r20, r20
    22b4:	55 1f       	adc	r21, r21
    22b6:	66 1f       	adc	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	8a 95       	dec	r24
    22bc:	d1 f7       	brne	.-12     	; 0x22b2 <__stack+0xb3>
    22be:	70 64       	ori	r23, 0x40	; 64
    22c0:	14 96       	adiw	r26, 0x04	; 4
    22c2:	4d 93       	st	X+, r20
    22c4:	5d 93       	st	X+, r21
    22c6:	6d 93       	st	X+, r22
    22c8:	7c 93       	st	X, r23
    22ca:	17 97       	sbiw	r26, 0x07	; 7
    22cc:	08 95       	ret

000022ce <__fpcmp_parts_f>:
    22ce:	1f 93       	push	r17
    22d0:	dc 01       	movw	r26, r24
    22d2:	fb 01       	movw	r30, r22
    22d4:	9c 91       	ld	r25, X
    22d6:	92 30       	cpi	r25, 0x02	; 2
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <__fpcmp_parts_f+0xe>
    22da:	47 c0       	rjmp	.+142    	; 0x236a <__fpcmp_parts_f+0x9c>
    22dc:	80 81       	ld	r24, Z
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <__fpcmp_parts_f+0x16>
    22e2:	43 c0       	rjmp	.+134    	; 0x236a <__fpcmp_parts_f+0x9c>
    22e4:	94 30       	cpi	r25, 0x04	; 4
    22e6:	51 f4       	brne	.+20     	; 0x22fc <__fpcmp_parts_f+0x2e>
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	1c 91       	ld	r17, X
    22ec:	84 30       	cpi	r24, 0x04	; 4
    22ee:	99 f5       	brne	.+102    	; 0x2356 <__fpcmp_parts_f+0x88>
    22f0:	81 81       	ldd	r24, Z+1	; 0x01
    22f2:	68 2f       	mov	r22, r24
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	61 1b       	sub	r22, r17
    22f8:	71 09       	sbc	r23, r1
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <__fpcmp_parts_f+0xac>
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	21 f0       	breq	.+8      	; 0x2308 <__fpcmp_parts_f+0x3a>
    2300:	92 30       	cpi	r25, 0x02	; 2
    2302:	31 f4       	brne	.+12     	; 0x2310 <__fpcmp_parts_f+0x42>
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	b9 f1       	breq	.+110    	; 0x2376 <__fpcmp_parts_f+0xa8>
    2308:	81 81       	ldd	r24, Z+1	; 0x01
    230a:	88 23       	and	r24, r24
    230c:	89 f1       	breq	.+98     	; 0x2370 <__fpcmp_parts_f+0xa2>
    230e:	2d c0       	rjmp	.+90     	; 0x236a <__fpcmp_parts_f+0x9c>
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	1c 91       	ld	r17, X
    2314:	11 97       	sbiw	r26, 0x01	; 1
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	f1 f0       	breq	.+60     	; 0x2356 <__fpcmp_parts_f+0x88>
    231a:	81 81       	ldd	r24, Z+1	; 0x01
    231c:	18 17       	cp	r17, r24
    231e:	d9 f4       	brne	.+54     	; 0x2356 <__fpcmp_parts_f+0x88>
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	2d 91       	ld	r18, X+
    2324:	3c 91       	ld	r19, X
    2326:	13 97       	sbiw	r26, 0x03	; 3
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	82 17       	cp	r24, r18
    232e:	93 07       	cpc	r25, r19
    2330:	94 f0       	brlt	.+36     	; 0x2356 <__fpcmp_parts_f+0x88>
    2332:	28 17       	cp	r18, r24
    2334:	39 07       	cpc	r19, r25
    2336:	bc f0       	brlt	.+46     	; 0x2366 <__fpcmp_parts_f+0x98>
    2338:	14 96       	adiw	r26, 0x04	; 4
    233a:	8d 91       	ld	r24, X+
    233c:	9d 91       	ld	r25, X+
    233e:	0d 90       	ld	r0, X+
    2340:	bc 91       	ld	r27, X
    2342:	a0 2d       	mov	r26, r0
    2344:	24 81       	ldd	r18, Z+4	; 0x04
    2346:	35 81       	ldd	r19, Z+5	; 0x05
    2348:	46 81       	ldd	r20, Z+6	; 0x06
    234a:	57 81       	ldd	r21, Z+7	; 0x07
    234c:	28 17       	cp	r18, r24
    234e:	39 07       	cpc	r19, r25
    2350:	4a 07       	cpc	r20, r26
    2352:	5b 07       	cpc	r21, r27
    2354:	18 f4       	brcc	.+6      	; 0x235c <__fpcmp_parts_f+0x8e>
    2356:	11 23       	and	r17, r17
    2358:	41 f0       	breq	.+16     	; 0x236a <__fpcmp_parts_f+0x9c>
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <__fpcmp_parts_f+0xa2>
    235c:	82 17       	cp	r24, r18
    235e:	93 07       	cpc	r25, r19
    2360:	a4 07       	cpc	r26, r20
    2362:	b5 07       	cpc	r27, r21
    2364:	40 f4       	brcc	.+16     	; 0x2376 <__fpcmp_parts_f+0xa8>
    2366:	11 23       	and	r17, r17
    2368:	19 f0       	breq	.+6      	; 0x2370 <__fpcmp_parts_f+0xa2>
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	05 c0       	rjmp	.+10     	; 0x237a <__fpcmp_parts_f+0xac>
    2370:	6f ef       	ldi	r22, 0xFF	; 255
    2372:	7f ef       	ldi	r23, 0xFF	; 255
    2374:	02 c0       	rjmp	.+4      	; 0x237a <__fpcmp_parts_f+0xac>
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	cb 01       	movw	r24, r22
    237c:	1f 91       	pop	r17
    237e:	08 95       	ret

00002380 <__udivmodhi4>:
    2380:	aa 1b       	sub	r26, r26
    2382:	bb 1b       	sub	r27, r27
    2384:	51 e1       	ldi	r21, 0x11	; 17
    2386:	07 c0       	rjmp	.+14     	; 0x2396 <__udivmodhi4_ep>

00002388 <__udivmodhi4_loop>:
    2388:	aa 1f       	adc	r26, r26
    238a:	bb 1f       	adc	r27, r27
    238c:	a6 17       	cp	r26, r22
    238e:	b7 07       	cpc	r27, r23
    2390:	10 f0       	brcs	.+4      	; 0x2396 <__udivmodhi4_ep>
    2392:	a6 1b       	sub	r26, r22
    2394:	b7 0b       	sbc	r27, r23

00002396 <__udivmodhi4_ep>:
    2396:	88 1f       	adc	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	5a 95       	dec	r21
    239c:	a9 f7       	brne	.-22     	; 0x2388 <__udivmodhi4_loop>
    239e:	80 95       	com	r24
    23a0:	90 95       	com	r25
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	08 95       	ret

000023a8 <__prologue_saves__>:
    23a8:	2f 92       	push	r2
    23aa:	3f 92       	push	r3
    23ac:	4f 92       	push	r4
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	ca 1b       	sub	r28, r26
    23d2:	db 0b       	sbc	r29, r27
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	19 94       	eijmp

000023e0 <__epilogue_restores__>:
    23e0:	2a 88       	ldd	r2, Y+18	; 0x12
    23e2:	39 88       	ldd	r3, Y+17	; 0x11
    23e4:	48 88       	ldd	r4, Y+16	; 0x10
    23e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f2:	b9 84       	ldd	r11, Y+9	; 0x09
    23f4:	c8 84       	ldd	r12, Y+8	; 0x08
    23f6:	df 80       	ldd	r13, Y+7	; 0x07
    23f8:	ee 80       	ldd	r14, Y+6	; 0x06
    23fa:	fd 80       	ldd	r15, Y+5	; 0x05
    23fc:	0c 81       	ldd	r16, Y+4	; 0x04
    23fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2400:	aa 81       	ldd	r26, Y+2	; 0x02
    2402:	b9 81       	ldd	r27, Y+1	; 0x01
    2404:	ce 0f       	add	r28, r30
    2406:	d1 1d       	adc	r29, r1
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	ed 01       	movw	r28, r26
    2414:	08 95       	ret

00002416 <_exit>:
    2416:	f8 94       	cli

00002418 <__stop_program>:
    2418:	ff cf       	rjmp	.-2      	; 0x2418 <__stop_program>
