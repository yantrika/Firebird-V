
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00002310  000023a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800216  00800216  000023ba  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000163  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000183  00000000  00000000  00002d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b80  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000218  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e1       	ldi	r30, 0x10	; 16
      fc:	f3 e2       	ldi	r31, 0x23	; 35
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 31       	cpi	r26, 0x16	; 22
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a6 e1       	ldi	r26, 0x16	; 22
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 32       	cpi	r26, 0x2F	; 47
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 28 0b 	call	0x1650	; 0x1650 <main>
     122:	0c 94 86 11 	jmp	0x230c	; 0x230c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:



/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	2d ec       	ldi	r18, 0xCD	; 205
     170:	3c ec       	ldi	r19, 0xCC	; 204
     172:	4c e2       	ldi	r20, 0x2C	; 44
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	84 e1       	ldi	r24, 0x14	; 20
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	2d ec       	ldi	r18, 0xCD	; 205
     308:	3c ec       	ldi	r19, 0xCC	; 204
     30a:	4c e2       	ldi	r20, 0x2C	; 44
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c e2       	ldi	r20, 0x2C	; 44
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	84 e1       	ldi	r24, 0x14	; 20
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	2d ec       	ldi	r18, 0xCD	; 205
     614:	3c ec       	ldi	r19, 0xCC	; 204
     616:	4c e2       	ldi	r20, 0x2C	; 44
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	2d ec       	ldi	r18, 0xCD	; 205
     71a:	3c ec       	ldi	r19, 0xCC	; 204
     71c:	4c e2       	ldi	r20, 0x2C	; 44
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	2d ec       	ldi	r18, 0xCD	; 205
     830:	3c ec       	ldi	r19, 0xCC	; 204
     832:	4c e2       	ldi	r20, 0x2C	; 44
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	84 e1       	ldi	r24, 0x14	; 20
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	2d ec       	ldi	r18, 0xCD	; 205
     922:	3c ec       	ldi	r19, 0xCC	; 204
     924:	4c e2       	ldi	r20, 0x2C	; 44
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	2d ec       	ldi	r18, 0xCD	; 205
     a38:	3c ec       	ldi	r19, 0xCC	; 204
     a3a:	4c e2       	ldi	r20, 0x2C	; 44
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	84 e1       	ldi	r24, 0x14	; 20
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c e2       	ldi	r20, 0x2C	; 44
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c2c:	8e e0       	ldi	r24, 0x0E	; 14
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c32:	80 e8       	ldi	r24, 0x80	; 128
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	2d ec       	ldi	r18, 0xCD	; 205
     cd2:	3c ec       	ldi	r19, 0xCC	; 204
     cd4:	4c e2       	ldi	r20, 0x2C	; 44
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	84 e1       	ldi	r24, 0x14	; 20
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	2d ec       	ldi	r18, 0xCD	; 205
     e1a:	3c ec       	ldi	r19, 0xCC	; 204
     e1c:	4c e2       	ldi	r20, 0x2C	; 44
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	84 e1       	ldi	r24, 0x14	; 20
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	2d ec       	ldi	r18, 0xCD	; 205
     f86:	3c ec       	ldi	r19, 0xCC	; 204
     f88:	4c e2       	ldi	r20, 0x2C	; 44
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	2d ec       	ldi	r18, 0xCD	; 205
    10ce:	3c ec       	ldi	r19, 0xCC	; 204
    10d0:	4c e2       	ldi	r20, 0x2C	; 44
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	84 e1       	ldi	r24, 0x14	; 20
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


/*****Function to bring cursor at home position*****/
void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD*****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 1f 02 	sts	0x021F, r25
    12ec:	80 93 1e 02 	sts	0x021E, r24
		lcd_wr_char(million);
    12f0:	80 91 1e 02 	lds	r24, 0x021E
    12f4:	90 91 1f 02 	lds	r25, 0x021F
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 21 02 	sts	0x0221, r25
    1324:	80 93 20 02 	sts	0x0220, r24
		thousand = temp%10 + 48;
    1328:	80 91 20 02 	lds	r24, 0x0220
    132c:	90 91 21 02 	lds	r25, 0x0221
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 2e 02 	sts	0x022E, r25
    1340:	80 93 2d 02 	sts	0x022D, r24
		lcd_wr_char(thousand);
    1344:	80 91 2d 02 	lds	r24, 0x022D
    1348:	90 91 2e 02 	lds	r25, 0x022E
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 21 02 	sts	0x0221, r25
    1378:	80 93 20 02 	sts	0x0220, r24
		hundred = temp%10 + 48;
    137c:	80 91 20 02 	lds	r24, 0x0220
    1380:	90 91 21 02 	lds	r25, 0x0221
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 27 02 	sts	0x0227, r25
    1394:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(hundred);
    1398:	80 91 26 02 	lds	r24, 0x0226
    139c:	90 91 27 02 	lds	r25, 0x0227
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 21 02 	sts	0x0221, r25
    13cc:	80 93 20 02 	sts	0x0220, r24
		tens = temp%10 + 48;
    13d0:	80 91 20 02 	lds	r24, 0x0220
    13d4:	90 91 21 02 	lds	r25, 0x0221
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 25 02 	sts	0x0225, r25
    13e8:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(tens);
    13ec:	80 91 24 02 	lds	r24, 0x0224
    13f0:	90 91 25 02 	lds	r25, 0x0225
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 2c 02 	sts	0x022C, r25
    1420:	80 93 2b 02 	sts	0x022B, r24
		lcd_wr_char(unit);
    1424:	80 91 2b 02 	lds	r24, 0x022B
    1428:	90 91 2c 02 	lds	r25, 0x022C
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <spi_pin_config>:
#include "lcd.c"

unsigned char data_received [3];

void spi_pin_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x07;
    145a:	a4 e2       	ldi	r26, 0x24	; 36
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e2       	ldi	r30, 0x24	; 36
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 60       	ori	r24, 0x07	; 7
    1466:	8c 93       	st	X, r24
 PORTB = PORTB | 0x07;
    1468:	a5 e2       	ldi	r26, 0x25	; 37
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e2       	ldi	r30, 0x25	; 37
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	87 60       	ori	r24, 0x07	; 7
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <lcd_port_config>:

void lcd_port_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1484:	a7 e2       	ldi	r26, 0x27	; 39
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e2       	ldi	r30, 0x27	; 39
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	87 6f       	ori	r24, 0xF7	; 247
    1490:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1492:	a8 e2       	ldi	r26, 0x28	; 40
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e2       	ldi	r30, 0x28	; 40
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 78       	andi	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <port_init>:

//Initialization of ports
void port_init(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 spi_pin_config();
    14ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <spi_pin_config>
 lcd_port_config();
    14b2:	0e 94 3e 0a 	call	0x147c	; 0x147c <lcd_port_config>
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <spi_init>:


//Function To Initialize SPI bus
// clock rate: 921600hz
void spi_init(void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
 SPCR = 0x53; //setup SPI
    14c4:	ec e4       	ldi	r30, 0x4C	; 76
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	83 e5       	ldi	r24, 0x53	; 83
    14ca:	80 83       	st	Z, r24
 SPSR = 0x00; //setup SPI
    14cc:	ed e4       	ldi	r30, 0x4D	; 77
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	10 82       	st	Z, r1
 SPDR = 0x00;
    14d2:	ee e4       	ldi	r30, 0x4E	; 78
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <spi_master_tx_and_rx>:

//Function to send byte to the slave microcontroller and get ADC channel data from the slave microcontroller
unsigned char spi_master_tx_and_rx (unsigned char data)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	60 97       	sbiw	r28, 0x10	; 16
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	88 8b       	std	Y+16, r24	; 0x10
 unsigned char rx_data = 0;
    14f4:	1f 86       	std	Y+15, r1	; 0x0f

 PORTB = PORTB & 0xFE; // make SS pin low
    14f6:	a5 e2       	ldi	r26, 0x25	; 37
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e2       	ldi	r30, 0x25	; 37
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8e 7f       	andi	r24, 0xFE	; 254
    1502:	8c 93       	st	X, r24
 SPDR = data;
    1504:	ee e4       	ldi	r30, 0x4E	; 78
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	88 89       	ldd	r24, Y+16	; 0x10
    150a:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF))); //wait for data transmission to complete
    150c:	ed e4       	ldi	r30, 0x4D	; 77
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	88 23       	and	r24, r24
    1514:	dc f7       	brge	.-10     	; 0x150c <spi_master_tx_and_rx+0x2e>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e8       	ldi	r26, 0x80	; 128
    151c:	bf e3       	ldi	r27, 0x3F	; 63
    151e:	8b 87       	std	Y+11, r24	; 0x0b
    1520:	9c 87       	std	Y+12, r25	; 0x0c
    1522:	ad 87       	std	Y+13, r26	; 0x0d
    1524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	6b 85       	ldd	r22, Y+11	; 0x0b
    1528:	7c 85       	ldd	r23, Y+12	; 0x0c
    152a:	8d 85       	ldd	r24, Y+13	; 0x0d
    152c:	9e 85       	ldd	r25, Y+14	; 0x0e
    152e:	2d ec       	ldi	r18, 0xCD	; 205
    1530:	3c ec       	ldi	r19, 0xCC	; 204
    1532:	4c e2       	ldi	r20, 0x2C	; 44
    1534:	55 e4       	ldi	r21, 0x45	; 69
    1536:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8f 83       	std	Y+7, r24	; 0x07
    1540:	98 87       	std	Y+8, r25	; 0x08
    1542:	a9 87       	std	Y+9, r26	; 0x09
    1544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <spi_master_tx_and_rx+0x8a>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <spi_master_tx_and_rx+0x108>
	else if (__tmp > 65535)
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <spi_master_tx_and_rx+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	6b 85       	ldd	r22, Y+11	; 0x0b
    1582:	7c 85       	ldd	r23, Y+12	; 0x0c
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	9e 85       	ldd	r25, Y+14	; 0x0e
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <spi_master_tx_and_rx+0xea>
    15aa:	84 e1       	ldi	r24, 0x14	; 20
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <spi_master_tx_and_rx+0xd8>
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <spi_master_tx_and_rx+0xcc>
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <spi_master_tx_and_rx+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6f 81       	ldd	r22, Y+7	; 0x07
    15d4:	78 85       	ldd	r23, Y+8	; 0x08
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <spi_master_tx_and_rx+0x114>
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01

 _delay_ms(1); //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50; // send dummy byte to read back data from the slave microcontroller
    15fa:	ee e4       	ldi	r30, 0x4E	; 78
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 e5       	ldi	r24, 0x50	; 80
    1600:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF))); //wait for data reception to complete
    1602:	ed e4       	ldi	r30, 0x4D	; 77
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	dc f7       	brge	.-10     	; 0x1602 <spi_master_tx_and_rx+0x124>
 rx_data = SPDR;
    160c:	ee e4       	ldi	r30, 0x4E	; 78
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 87       	std	Y+15, r24	; 0x0f
 PORTB = PORTB | 0x01; // make SS high
    1614:	a5 e2       	ldi	r26, 0x25	; 37
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e5 e2       	ldi	r30, 0x25	; 37
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
 return rx_data;
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1624:	60 96       	adiw	r28, 0x10	; 16
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    163e:	f8 94       	cli
 port_init();
    1640:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <port_init>
 spi_init();
    1644:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <spi_init>
 sei(); //re-enable interrupts
    1648:	78 94       	sei
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <main>:

//Main Function
int main(void)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	2e 97       	sbiw	r28, 0x0e	; 14
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
 init_devices();
    1664:	0e 94 1b 0b 	call	0x1636	; 0x1636 <init_devices>
 lcd_set_4bit();
    1668:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 lcd_init();
    166c:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>

 while(1)
 {
  data_received [0] = spi_master_tx_and_rx(5);
    1670:	85 e0       	ldi	r24, 0x05	; 5
    1672:	0e 94 6f 0a 	call	0x14de	; 0x14de <spi_master_tx_and_rx>
    1676:	80 93 28 02 	sts	0x0228, r24
  data_received [1] = spi_master_tx_and_rx(6);
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	0e 94 6f 0a 	call	0x14de	; 0x14de <spi_master_tx_and_rx>
    1680:	80 93 29 02 	sts	0x0229, r24
  data_received [2] = spi_master_tx_and_rx(7);
    1684:	87 e0       	ldi	r24, 0x07	; 7
    1686:	0e 94 6f 0a 	call	0x14de	; 0x14de <spi_master_tx_and_rx>
    168a:	80 93 2a 02 	sts	0x022A, r24
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e2       	ldi	r26, 0x20	; 32
    1694:	b1 e4       	ldi	r27, 0x41	; 65
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
    169a:	ad 87       	std	Y+13, r26	; 0x0d
    169c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	2d ec       	ldi	r18, 0xCD	; 205
    16a8:	3c ec       	ldi	r19, 0xCC	; 204
    16aa:	4c e2       	ldi	r20, 0x2C	; 44
    16ac:	55 e4       	ldi	r21, 0x45	; 69
    16ae:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	a9 87       	std	Y+9, r26	; 0x09
    16bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <main+0x90>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	3f c0       	rjmp	.+126    	; 0x175e <main+0x10e>
	else if (__tmp > 65535)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <main+0xf0>
    1722:	84 e1       	ldi	r24, 0x14	; 20
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <main+0xde>
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <main+0xd2>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <main+0x11a>
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
  
 _delay_ms(10); // dalay to control LCD refresh rate

 lcd_home();
    1772:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
 lcd_string("IR6  IR7  IR8");
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
 lcd_print(2, 1, data_received [0], 3);
    177e:	80 91 28 02 	lds	r24, 0x0228
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	a9 01       	movw	r20, r18
    178c:	23 e0       	ldi	r18, 0x03	; 3
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
 lcd_print(2, 6, data_received [1], 3);
    1794:	80 91 29 02 	lds	r24, 0x0229
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	66 e0       	ldi	r22, 0x06	; 6
    17a0:	a9 01       	movw	r20, r18
    17a2:	23 e0       	ldi	r18, 0x03	; 3
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
 lcd_print(2, 11, data_received [2], 3);
    17aa:	80 91 2a 02 	lds	r24, 0x022A
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	6b e0       	ldi	r22, 0x0B	; 11
    17b6:	a9 01       	movw	r20, r18
    17b8:	23 e0       	ldi	r18, 0x03	; 3
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    17c0:	57 cf       	rjmp	.-338    	; 0x1670 <main+0x20>

000017c2 <__fixunssfsi>:
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	7b 01       	movw	r14, r22
    17cc:	8c 01       	movw	r16, r24
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	5f e4       	ldi	r21, 0x4F	; 79
    17d6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__gesf2>
    17da:	88 23       	and	r24, r24
    17dc:	8c f0       	brlt	.+34     	; 0x1800 <__fixunssfsi+0x3e>
    17de:	c8 01       	movw	r24, r16
    17e0:	b7 01       	movw	r22, r14
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	5f e4       	ldi	r21, 0x4F	; 79
    17ea:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__subsf3>
    17ee:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__fixsfsi>
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	20 50       	subi	r18, 0x00	; 0
    17f8:	30 40       	sbci	r19, 0x00	; 0
    17fa:	40 40       	sbci	r20, 0x00	; 0
    17fc:	50 48       	sbci	r21, 0x80	; 128
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <__fixunssfsi+0x4a>
    1800:	c8 01       	movw	r24, r16
    1802:	b7 01       	movw	r22, r14
    1804:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__fixsfsi>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	b9 01       	movw	r22, r18
    180e:	ca 01       	movw	r24, r20
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	08 95       	ret

0000181a <_fpadd_parts>:
    181a:	a0 e0       	ldi	r26, 0x00	; 0
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e1       	ldi	r30, 0x13	; 19
    1820:	fc e0       	ldi	r31, 0x0C	; 12
    1822:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__>
    1826:	dc 01       	movw	r26, r24
    1828:	2b 01       	movw	r4, r22
    182a:	fa 01       	movw	r30, r20
    182c:	9c 91       	ld	r25, X
    182e:	92 30       	cpi	r25, 0x02	; 2
    1830:	08 f4       	brcc	.+2      	; 0x1834 <_fpadd_parts+0x1a>
    1832:	39 c1       	rjmp	.+626    	; 0x1aa6 <_fpadd_parts+0x28c>
    1834:	eb 01       	movw	r28, r22
    1836:	88 81       	ld	r24, Y
    1838:	82 30       	cpi	r24, 0x02	; 2
    183a:	08 f4       	brcc	.+2      	; 0x183e <_fpadd_parts+0x24>
    183c:	33 c1       	rjmp	.+614    	; 0x1aa4 <_fpadd_parts+0x28a>
    183e:	94 30       	cpi	r25, 0x04	; 4
    1840:	69 f4       	brne	.+26     	; 0x185c <_fpadd_parts+0x42>
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	09 f0       	breq	.+2      	; 0x1848 <_fpadd_parts+0x2e>
    1846:	2f c1       	rjmp	.+606    	; 0x1aa6 <_fpadd_parts+0x28c>
    1848:	11 96       	adiw	r26, 0x01	; 1
    184a:	9c 91       	ld	r25, X
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	98 17       	cp	r25, r24
    1852:	09 f4       	brne	.+2      	; 0x1856 <_fpadd_parts+0x3c>
    1854:	28 c1       	rjmp	.+592    	; 0x1aa6 <_fpadd_parts+0x28c>
    1856:	ae e0       	ldi	r26, 0x0E	; 14
    1858:	b2 e0       	ldi	r27, 0x02	; 2
    185a:	25 c1       	rjmp	.+586    	; 0x1aa6 <_fpadd_parts+0x28c>
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	09 f4       	brne	.+2      	; 0x1862 <_fpadd_parts+0x48>
    1860:	21 c1       	rjmp	.+578    	; 0x1aa4 <_fpadd_parts+0x28a>
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	a9 f4       	brne	.+42     	; 0x1890 <_fpadd_parts+0x76>
    1866:	92 30       	cpi	r25, 0x02	; 2
    1868:	09 f0       	breq	.+2      	; 0x186c <_fpadd_parts+0x52>
    186a:	1d c1       	rjmp	.+570    	; 0x1aa6 <_fpadd_parts+0x28c>
    186c:	9a 01       	movw	r18, r20
    186e:	ad 01       	movw	r20, r26
    1870:	88 e0       	ldi	r24, 0x08	; 8
    1872:	ea 01       	movw	r28, r20
    1874:	09 90       	ld	r0, Y+
    1876:	ae 01       	movw	r20, r28
    1878:	e9 01       	movw	r28, r18
    187a:	09 92       	st	Y+, r0
    187c:	9e 01       	movw	r18, r28
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	c1 f7       	brne	.-16     	; 0x1872 <_fpadd_parts+0x58>
    1882:	e2 01       	movw	r28, r4
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	9c 91       	ld	r25, X
    188a:	89 23       	and	r24, r25
    188c:	81 83       	std	Z+1, r24	; 0x01
    188e:	08 c1       	rjmp	.+528    	; 0x1aa0 <_fpadd_parts+0x286>
    1890:	92 30       	cpi	r25, 0x02	; 2
    1892:	09 f4       	brne	.+2      	; 0x1896 <_fpadd_parts+0x7c>
    1894:	07 c1       	rjmp	.+526    	; 0x1aa4 <_fpadd_parts+0x28a>
    1896:	12 96       	adiw	r26, 0x02	; 2
    1898:	2d 90       	ld	r2, X+
    189a:	3c 90       	ld	r3, X
    189c:	13 97       	sbiw	r26, 0x03	; 3
    189e:	eb 01       	movw	r28, r22
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	14 96       	adiw	r26, 0x04	; 4
    18a6:	ad 90       	ld	r10, X+
    18a8:	bd 90       	ld	r11, X+
    18aa:	cd 90       	ld	r12, X+
    18ac:	dc 90       	ld	r13, X
    18ae:	17 97       	sbiw	r26, 0x07	; 7
    18b0:	ec 80       	ldd	r14, Y+4	; 0x04
    18b2:	fd 80       	ldd	r15, Y+5	; 0x05
    18b4:	0e 81       	ldd	r16, Y+6	; 0x06
    18b6:	1f 81       	ldd	r17, Y+7	; 0x07
    18b8:	91 01       	movw	r18, r2
    18ba:	28 1b       	sub	r18, r24
    18bc:	39 0b       	sbc	r19, r25
    18be:	b9 01       	movw	r22, r18
    18c0:	37 ff       	sbrs	r19, 7
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <_fpadd_parts+0xb2>
    18c4:	66 27       	eor	r22, r22
    18c6:	77 27       	eor	r23, r23
    18c8:	62 1b       	sub	r22, r18
    18ca:	73 0b       	sbc	r23, r19
    18cc:	60 32       	cpi	r22, 0x20	; 32
    18ce:	71 05       	cpc	r23, r1
    18d0:	0c f0       	brlt	.+2      	; 0x18d4 <_fpadd_parts+0xba>
    18d2:	61 c0       	rjmp	.+194    	; 0x1996 <_fpadd_parts+0x17c>
    18d4:	12 16       	cp	r1, r18
    18d6:	13 06       	cpc	r1, r19
    18d8:	6c f5       	brge	.+90     	; 0x1934 <_fpadd_parts+0x11a>
    18da:	37 01       	movw	r6, r14
    18dc:	48 01       	movw	r8, r16
    18de:	06 2e       	mov	r0, r22
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <_fpadd_parts+0xd0>
    18e2:	96 94       	lsr	r9
    18e4:	87 94       	ror	r8
    18e6:	77 94       	ror	r7
    18e8:	67 94       	ror	r6
    18ea:	0a 94       	dec	r0
    18ec:	d2 f7       	brpl	.-12     	; 0x18e2 <_fpadd_parts+0xc8>
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <_fpadd_parts+0xe6>
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	44 1f       	adc	r20, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	6a 95       	dec	r22
    1902:	d2 f7       	brpl	.-12     	; 0x18f8 <_fpadd_parts+0xde>
    1904:	21 50       	subi	r18, 0x01	; 1
    1906:	30 40       	sbci	r19, 0x00	; 0
    1908:	40 40       	sbci	r20, 0x00	; 0
    190a:	50 40       	sbci	r21, 0x00	; 0
    190c:	2e 21       	and	r18, r14
    190e:	3f 21       	and	r19, r15
    1910:	40 23       	and	r20, r16
    1912:	51 23       	and	r21, r17
    1914:	21 15       	cp	r18, r1
    1916:	31 05       	cpc	r19, r1
    1918:	41 05       	cpc	r20, r1
    191a:	51 05       	cpc	r21, r1
    191c:	21 f0       	breq	.+8      	; 0x1926 <_fpadd_parts+0x10c>
    191e:	21 e0       	ldi	r18, 0x01	; 1
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	79 01       	movw	r14, r18
    1928:	8a 01       	movw	r16, r20
    192a:	e6 28       	or	r14, r6
    192c:	f7 28       	or	r15, r7
    192e:	08 29       	or	r16, r8
    1930:	19 29       	or	r17, r9
    1932:	3c c0       	rjmp	.+120    	; 0x19ac <_fpadd_parts+0x192>
    1934:	23 2b       	or	r18, r19
    1936:	d1 f1       	breq	.+116    	; 0x19ac <_fpadd_parts+0x192>
    1938:	26 0e       	add	r2, r22
    193a:	37 1e       	adc	r3, r23
    193c:	35 01       	movw	r6, r10
    193e:	46 01       	movw	r8, r12
    1940:	06 2e       	mov	r0, r22
    1942:	04 c0       	rjmp	.+8      	; 0x194c <_fpadd_parts+0x132>
    1944:	96 94       	lsr	r9
    1946:	87 94       	ror	r8
    1948:	77 94       	ror	r7
    194a:	67 94       	ror	r6
    194c:	0a 94       	dec	r0
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <_fpadd_parts+0x12a>
    1950:	21 e0       	ldi	r18, 0x01	; 1
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <_fpadd_parts+0x148>
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	44 1f       	adc	r20, r20
    1960:	55 1f       	adc	r21, r21
    1962:	6a 95       	dec	r22
    1964:	d2 f7       	brpl	.-12     	; 0x195a <_fpadd_parts+0x140>
    1966:	21 50       	subi	r18, 0x01	; 1
    1968:	30 40       	sbci	r19, 0x00	; 0
    196a:	40 40       	sbci	r20, 0x00	; 0
    196c:	50 40       	sbci	r21, 0x00	; 0
    196e:	2a 21       	and	r18, r10
    1970:	3b 21       	and	r19, r11
    1972:	4c 21       	and	r20, r12
    1974:	5d 21       	and	r21, r13
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	41 05       	cpc	r20, r1
    197c:	51 05       	cpc	r21, r1
    197e:	21 f0       	breq	.+8      	; 0x1988 <_fpadd_parts+0x16e>
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	59 01       	movw	r10, r18
    198a:	6a 01       	movw	r12, r20
    198c:	a6 28       	or	r10, r6
    198e:	b7 28       	or	r11, r7
    1990:	c8 28       	or	r12, r8
    1992:	d9 28       	or	r13, r9
    1994:	0b c0       	rjmp	.+22     	; 0x19ac <_fpadd_parts+0x192>
    1996:	82 15       	cp	r24, r2
    1998:	93 05       	cpc	r25, r3
    199a:	2c f0       	brlt	.+10     	; 0x19a6 <_fpadd_parts+0x18c>
    199c:	1c 01       	movw	r2, r24
    199e:	aa 24       	eor	r10, r10
    19a0:	bb 24       	eor	r11, r11
    19a2:	65 01       	movw	r12, r10
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <_fpadd_parts+0x192>
    19a6:	ee 24       	eor	r14, r14
    19a8:	ff 24       	eor	r15, r15
    19aa:	87 01       	movw	r16, r14
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	9c 91       	ld	r25, X
    19b0:	d2 01       	movw	r26, r4
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	8c 91       	ld	r24, X
    19b6:	98 17       	cp	r25, r24
    19b8:	09 f4       	brne	.+2      	; 0x19bc <_fpadd_parts+0x1a2>
    19ba:	45 c0       	rjmp	.+138    	; 0x1a46 <_fpadd_parts+0x22c>
    19bc:	99 23       	and	r25, r25
    19be:	39 f0       	breq	.+14     	; 0x19ce <_fpadd_parts+0x1b4>
    19c0:	a8 01       	movw	r20, r16
    19c2:	97 01       	movw	r18, r14
    19c4:	2a 19       	sub	r18, r10
    19c6:	3b 09       	sbc	r19, r11
    19c8:	4c 09       	sbc	r20, r12
    19ca:	5d 09       	sbc	r21, r13
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <_fpadd_parts+0x1c0>
    19ce:	a6 01       	movw	r20, r12
    19d0:	95 01       	movw	r18, r10
    19d2:	2e 19       	sub	r18, r14
    19d4:	3f 09       	sbc	r19, r15
    19d6:	40 0b       	sbc	r20, r16
    19d8:	51 0b       	sbc	r21, r17
    19da:	57 fd       	sbrc	r21, 7
    19dc:	08 c0       	rjmp	.+16     	; 0x19ee <_fpadd_parts+0x1d4>
    19de:	11 82       	std	Z+1, r1	; 0x01
    19e0:	33 82       	std	Z+3, r3	; 0x03
    19e2:	22 82       	std	Z+2, r2	; 0x02
    19e4:	24 83       	std	Z+4, r18	; 0x04
    19e6:	35 83       	std	Z+5, r19	; 0x05
    19e8:	46 83       	std	Z+6, r20	; 0x06
    19ea:	57 83       	std	Z+7, r21	; 0x07
    19ec:	1d c0       	rjmp	.+58     	; 0x1a28 <_fpadd_parts+0x20e>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	81 83       	std	Z+1, r24	; 0x01
    19f2:	33 82       	std	Z+3, r3	; 0x03
    19f4:	22 82       	std	Z+2, r2	; 0x02
    19f6:	88 27       	eor	r24, r24
    19f8:	99 27       	eor	r25, r25
    19fa:	dc 01       	movw	r26, r24
    19fc:	82 1b       	sub	r24, r18
    19fe:	93 0b       	sbc	r25, r19
    1a00:	a4 0b       	sbc	r26, r20
    1a02:	b5 0b       	sbc	r27, r21
    1a04:	84 83       	std	Z+4, r24	; 0x04
    1a06:	95 83       	std	Z+5, r25	; 0x05
    1a08:	a6 83       	std	Z+6, r26	; 0x06
    1a0a:	b7 83       	std	Z+7, r27	; 0x07
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <_fpadd_parts+0x20e>
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	44 1f       	adc	r20, r20
    1a14:	55 1f       	adc	r21, r21
    1a16:	24 83       	std	Z+4, r18	; 0x04
    1a18:	35 83       	std	Z+5, r19	; 0x05
    1a1a:	46 83       	std	Z+6, r20	; 0x06
    1a1c:	57 83       	std	Z+7, r21	; 0x07
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	93 83       	std	Z+3, r25	; 0x03
    1a26:	82 83       	std	Z+2, r24	; 0x02
    1a28:	24 81       	ldd	r18, Z+4	; 0x04
    1a2a:	35 81       	ldd	r19, Z+5	; 0x05
    1a2c:	46 81       	ldd	r20, Z+6	; 0x06
    1a2e:	57 81       	ldd	r21, Z+7	; 0x07
    1a30:	da 01       	movw	r26, r20
    1a32:	c9 01       	movw	r24, r18
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	a1 09       	sbc	r26, r1
    1a38:	b1 09       	sbc	r27, r1
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	af 4f       	sbci	r26, 0xFF	; 255
    1a40:	bf 43       	sbci	r27, 0x3F	; 63
    1a42:	28 f3       	brcs	.-54     	; 0x1a0e <_fpadd_parts+0x1f4>
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <_fpadd_parts+0x242>
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	33 82       	std	Z+3, r3	; 0x03
    1a4a:	22 82       	std	Z+2, r2	; 0x02
    1a4c:	ea 0c       	add	r14, r10
    1a4e:	fb 1c       	adc	r15, r11
    1a50:	0c 1d       	adc	r16, r12
    1a52:	1d 1d       	adc	r17, r13
    1a54:	e4 82       	std	Z+4, r14	; 0x04
    1a56:	f5 82       	std	Z+5, r15	; 0x05
    1a58:	06 83       	std	Z+6, r16	; 0x06
    1a5a:	17 83       	std	Z+7, r17	; 0x07
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	80 83       	st	Z, r24
    1a60:	24 81       	ldd	r18, Z+4	; 0x04
    1a62:	35 81       	ldd	r19, Z+5	; 0x05
    1a64:	46 81       	ldd	r20, Z+6	; 0x06
    1a66:	57 81       	ldd	r21, Z+7	; 0x07
    1a68:	57 ff       	sbrs	r21, 7
    1a6a:	1a c0       	rjmp	.+52     	; 0x1aa0 <_fpadd_parts+0x286>
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	aa 27       	eor	r26, r26
    1a70:	97 fd       	sbrc	r25, 7
    1a72:	a0 95       	com	r26
    1a74:	ba 2f       	mov	r27, r26
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	a0 70       	andi	r26, 0x00	; 0
    1a7c:	b0 70       	andi	r27, 0x00	; 0
    1a7e:	56 95       	lsr	r21
    1a80:	47 95       	ror	r20
    1a82:	37 95       	ror	r19
    1a84:	27 95       	ror	r18
    1a86:	82 2b       	or	r24, r18
    1a88:	93 2b       	or	r25, r19
    1a8a:	a4 2b       	or	r26, r20
    1a8c:	b5 2b       	or	r27, r21
    1a8e:	84 83       	std	Z+4, r24	; 0x04
    1a90:	95 83       	std	Z+5, r25	; 0x05
    1a92:	a6 83       	std	Z+6, r26	; 0x06
    1a94:	b7 83       	std	Z+7, r27	; 0x07
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	93 83       	std	Z+3, r25	; 0x03
    1a9e:	82 83       	std	Z+2, r24	; 0x02
    1aa0:	df 01       	movw	r26, r30
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <_fpadd_parts+0x28c>
    1aa4:	d2 01       	movw	r26, r4
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	e2 e1       	ldi	r30, 0x12	; 18
    1aae:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__>

00001ab2 <__subsf3>:
    1ab2:	a0 e2       	ldi	r26, 0x20	; 32
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ef e5       	ldi	r30, 0x5F	; 95
    1ab8:	fd e0       	ldi	r31, 0x0D	; 13
    1aba:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
    1abe:	69 83       	std	Y+1, r22	; 0x01
    1ac0:	7a 83       	std	Y+2, r23	; 0x02
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	2d 83       	std	Y+5, r18	; 0x05
    1ac8:	3e 83       	std	Y+6, r19	; 0x06
    1aca:	4f 83       	std	Y+7, r20	; 0x07
    1acc:	58 87       	std	Y+8, r21	; 0x08
    1ace:	e9 e0       	ldi	r30, 0x09	; 9
    1ad0:	ee 2e       	mov	r14, r30
    1ad2:	f1 2c       	mov	r15, r1
    1ad4:	ec 0e       	add	r14, r28
    1ad6:	fd 1e       	adc	r15, r29
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	b7 01       	movw	r22, r14
    1ade:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1ae2:	8e 01       	movw	r16, r28
    1ae4:	0f 5e       	subi	r16, 0xEF	; 239
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	ce 01       	movw	r24, r28
    1aea:	05 96       	adiw	r24, 0x05	; 5
    1aec:	b8 01       	movw	r22, r16
    1aee:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1af2:	8a 89       	ldd	r24, Y+18	; 0x12
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	89 27       	eor	r24, r25
    1af8:	8a 8b       	std	Y+18, r24	; 0x12
    1afa:	c7 01       	movw	r24, r14
    1afc:	b8 01       	movw	r22, r16
    1afe:	ae 01       	movw	r20, r28
    1b00:	47 5e       	subi	r20, 0xE7	; 231
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
    1b04:	0e 94 0d 0c 	call	0x181a	; 0x181a <_fpadd_parts>
    1b08:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__pack_f>
    1b0c:	a0 96       	adiw	r28, 0x20	; 32
    1b0e:	e6 e0       	ldi	r30, 0x06	; 6
    1b10:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00001b14 <__addsf3>:
    1b14:	a0 e2       	ldi	r26, 0x20	; 32
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e0 e9       	ldi	r30, 0x90	; 144
    1b1a:	fd e0       	ldi	r31, 0x0D	; 13
    1b1c:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
    1b20:	69 83       	std	Y+1, r22	; 0x01
    1b22:	7a 83       	std	Y+2, r23	; 0x02
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	2d 83       	std	Y+5, r18	; 0x05
    1b2a:	3e 83       	std	Y+6, r19	; 0x06
    1b2c:	4f 83       	std	Y+7, r20	; 0x07
    1b2e:	58 87       	std	Y+8, r21	; 0x08
    1b30:	f9 e0       	ldi	r31, 0x09	; 9
    1b32:	ef 2e       	mov	r14, r31
    1b34:	f1 2c       	mov	r15, r1
    1b36:	ec 0e       	add	r14, r28
    1b38:	fd 1e       	adc	r15, r29
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	b7 01       	movw	r22, r14
    1b40:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1b44:	8e 01       	movw	r16, r28
    1b46:	0f 5e       	subi	r16, 0xEF	; 239
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	05 96       	adiw	r24, 0x05	; 5
    1b4e:	b8 01       	movw	r22, r16
    1b50:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1b54:	c7 01       	movw	r24, r14
    1b56:	b8 01       	movw	r22, r16
    1b58:	ae 01       	movw	r20, r28
    1b5a:	47 5e       	subi	r20, 0xE7	; 231
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	0e 94 0d 0c 	call	0x181a	; 0x181a <_fpadd_parts>
    1b62:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__pack_f>
    1b66:	a0 96       	adiw	r28, 0x20	; 32
    1b68:	e6 e0       	ldi	r30, 0x06	; 6
    1b6a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00001b6e <__mulsf3>:
    1b6e:	a0 e2       	ldi	r26, 0x20	; 32
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ed eb       	ldi	r30, 0xBD	; 189
    1b74:	fd e0       	ldi	r31, 0x0D	; 13
    1b76:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__>
    1b7a:	69 83       	std	Y+1, r22	; 0x01
    1b7c:	7a 83       	std	Y+2, r23	; 0x02
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	2d 83       	std	Y+5, r18	; 0x05
    1b84:	3e 83       	std	Y+6, r19	; 0x06
    1b86:	4f 83       	std	Y+7, r20	; 0x07
    1b88:	58 87       	std	Y+8, r21	; 0x08
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	be 01       	movw	r22, r28
    1b90:	67 5f       	subi	r22, 0xF7	; 247
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1b98:	ce 01       	movw	r24, r28
    1b9a:	05 96       	adiw	r24, 0x05	; 5
    1b9c:	be 01       	movw	r22, r28
    1b9e:	6f 5e       	subi	r22, 0xEF	; 239
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1ba6:	99 85       	ldd	r25, Y+9	; 0x09
    1ba8:	92 30       	cpi	r25, 0x02	; 2
    1baa:	88 f0       	brcs	.+34     	; 0x1bce <__mulsf3+0x60>
    1bac:	89 89       	ldd	r24, Y+17	; 0x11
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	c8 f0       	brcs	.+50     	; 0x1be4 <__mulsf3+0x76>
    1bb2:	94 30       	cpi	r25, 0x04	; 4
    1bb4:	19 f4       	brne	.+6      	; 0x1bbc <__mulsf3+0x4e>
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	51 f4       	brne	.+20     	; 0x1bce <__mulsf3+0x60>
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <__mulsf3+0x56>
    1bbc:	84 30       	cpi	r24, 0x04	; 4
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <__mulsf3+0x5c>
    1bc0:	92 30       	cpi	r25, 0x02	; 2
    1bc2:	81 f4       	brne	.+32     	; 0x1be4 <__mulsf3+0x76>
    1bc4:	8e e0       	ldi	r24, 0x0E	; 14
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	c6 c0       	rjmp	.+396    	; 0x1d56 <__mulsf3+0x1e8>
    1bca:	92 30       	cpi	r25, 0x02	; 2
    1bcc:	49 f4       	brne	.+18     	; 0x1be0 <__mulsf3+0x72>
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd4:	98 13       	cpse	r25, r24
    1bd6:	21 e0       	ldi	r18, 0x01	; 1
    1bd8:	2a 87       	std	Y+10, r18	; 0x0a
    1bda:	ce 01       	movw	r24, r28
    1bdc:	09 96       	adiw	r24, 0x09	; 9
    1bde:	bb c0       	rjmp	.+374    	; 0x1d56 <__mulsf3+0x1e8>
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	49 f4       	brne	.+18     	; 0x1bf6 <__mulsf3+0x88>
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bea:	98 13       	cpse	r25, r24
    1bec:	21 e0       	ldi	r18, 0x01	; 1
    1bee:	2a 8b       	std	Y+18, r18	; 0x12
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	41 96       	adiw	r24, 0x11	; 17
    1bf4:	b0 c0       	rjmp	.+352    	; 0x1d56 <__mulsf3+0x1e8>
    1bf6:	2d 84       	ldd	r2, Y+13	; 0x0d
    1bf8:	3e 84       	ldd	r3, Y+14	; 0x0e
    1bfa:	4f 84       	ldd	r4, Y+15	; 0x0f
    1bfc:	58 88       	ldd	r5, Y+16	; 0x10
    1bfe:	6d 88       	ldd	r6, Y+21	; 0x15
    1c00:	7e 88       	ldd	r7, Y+22	; 0x16
    1c02:	8f 88       	ldd	r8, Y+23	; 0x17
    1c04:	98 8c       	ldd	r9, Y+24	; 0x18
    1c06:	ee 24       	eor	r14, r14
    1c08:	ff 24       	eor	r15, r15
    1c0a:	87 01       	movw	r16, r14
    1c0c:	aa 24       	eor	r10, r10
    1c0e:	bb 24       	eor	r11, r11
    1c10:	65 01       	movw	r12, r10
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	e0 e0       	ldi	r30, 0x00	; 0
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	c1 01       	movw	r24, r2
    1c20:	81 70       	andi	r24, 0x01	; 1
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	89 2b       	or	r24, r25
    1c26:	e9 f0       	breq	.+58     	; 0x1c62 <__mulsf3+0xf4>
    1c28:	e6 0c       	add	r14, r6
    1c2a:	f7 1c       	adc	r15, r7
    1c2c:	08 1d       	adc	r16, r8
    1c2e:	19 1d       	adc	r17, r9
    1c30:	9a 01       	movw	r18, r20
    1c32:	ab 01       	movw	r20, r22
    1c34:	2a 0d       	add	r18, r10
    1c36:	3b 1d       	adc	r19, r11
    1c38:	4c 1d       	adc	r20, r12
    1c3a:	5d 1d       	adc	r21, r13
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e6 14       	cp	r14, r6
    1c46:	f7 04       	cpc	r15, r7
    1c48:	08 05       	cpc	r16, r8
    1c4a:	19 05       	cpc	r17, r9
    1c4c:	20 f4       	brcc	.+8      	; 0x1c56 <__mulsf3+0xe8>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	ba 01       	movw	r22, r20
    1c58:	a9 01       	movw	r20, r18
    1c5a:	48 0f       	add	r20, r24
    1c5c:	59 1f       	adc	r21, r25
    1c5e:	6a 1f       	adc	r22, r26
    1c60:	7b 1f       	adc	r23, r27
    1c62:	aa 0c       	add	r10, r10
    1c64:	bb 1c       	adc	r11, r11
    1c66:	cc 1c       	adc	r12, r12
    1c68:	dd 1c       	adc	r13, r13
    1c6a:	97 fe       	sbrs	r9, 7
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <__mulsf3+0x110>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	a8 2a       	or	r10, r24
    1c78:	b9 2a       	or	r11, r25
    1c7a:	ca 2a       	or	r12, r26
    1c7c:	db 2a       	or	r13, r27
    1c7e:	31 96       	adiw	r30, 0x01	; 1
    1c80:	e0 32       	cpi	r30, 0x20	; 32
    1c82:	f1 05       	cpc	r31, r1
    1c84:	49 f0       	breq	.+18     	; 0x1c98 <__mulsf3+0x12a>
    1c86:	66 0c       	add	r6, r6
    1c88:	77 1c       	adc	r7, r7
    1c8a:	88 1c       	adc	r8, r8
    1c8c:	99 1c       	adc	r9, r9
    1c8e:	56 94       	lsr	r5
    1c90:	47 94       	ror	r4
    1c92:	37 94       	ror	r3
    1c94:	27 94       	ror	r2
    1c96:	c3 cf       	rjmp	.-122    	; 0x1c1e <__mulsf3+0xb0>
    1c98:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c9a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c9c:	2b 89       	ldd	r18, Y+19	; 0x13
    1c9e:	3c 89       	ldd	r19, Y+20	; 0x14
    1ca0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ca4:	28 0f       	add	r18, r24
    1ca6:	39 1f       	adc	r19, r25
    1ca8:	2e 5f       	subi	r18, 0xFE	; 254
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	17 c0       	rjmp	.+46     	; 0x1cdc <__mulsf3+0x16e>
    1cae:	ca 01       	movw	r24, r20
    1cb0:	81 70       	andi	r24, 0x01	; 1
    1cb2:	90 70       	andi	r25, 0x00	; 0
    1cb4:	89 2b       	or	r24, r25
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <__mulsf3+0x162>
    1cb8:	16 95       	lsr	r17
    1cba:	07 95       	ror	r16
    1cbc:	f7 94       	ror	r15
    1cbe:	e7 94       	ror	r14
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e0       	ldi	r26, 0x00	; 0
    1cc6:	b0 e8       	ldi	r27, 0x80	; 128
    1cc8:	e8 2a       	or	r14, r24
    1cca:	f9 2a       	or	r15, r25
    1ccc:	0a 2b       	or	r16, r26
    1cce:	1b 2b       	or	r17, r27
    1cd0:	76 95       	lsr	r23
    1cd2:	67 95       	ror	r22
    1cd4:	57 95       	ror	r21
    1cd6:	47 95       	ror	r20
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	77 fd       	sbrc	r23, 7
    1cde:	e7 cf       	rjmp	.-50     	; 0x1cae <__mulsf3+0x140>
    1ce0:	0c c0       	rjmp	.+24     	; 0x1cfa <__mulsf3+0x18c>
    1ce2:	44 0f       	add	r20, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	66 1f       	adc	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	17 fd       	sbrc	r17, 7
    1cec:	41 60       	ori	r20, 0x01	; 1
    1cee:	ee 0c       	add	r14, r14
    1cf0:	ff 1c       	adc	r15, r15
    1cf2:	00 1f       	adc	r16, r16
    1cf4:	11 1f       	adc	r17, r17
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	30 40       	sbci	r19, 0x00	; 0
    1cfa:	40 30       	cpi	r20, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	59 07       	cpc	r21, r25
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	69 07       	cpc	r22, r25
    1d04:	90 e4       	ldi	r25, 0x40	; 64
    1d06:	79 07       	cpc	r23, r25
    1d08:	60 f3       	brcs	.-40     	; 0x1ce2 <__mulsf3+0x174>
    1d0a:	2b 8f       	std	Y+27, r18	; 0x1b
    1d0c:	3c 8f       	std	Y+28, r19	; 0x1c
    1d0e:	db 01       	movw	r26, r22
    1d10:	ca 01       	movw	r24, r20
    1d12:	8f 77       	andi	r24, 0x7F	; 127
    1d14:	90 70       	andi	r25, 0x00	; 0
    1d16:	a0 70       	andi	r26, 0x00	; 0
    1d18:	b0 70       	andi	r27, 0x00	; 0
    1d1a:	80 34       	cpi	r24, 0x40	; 64
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	a1 05       	cpc	r26, r1
    1d20:	b1 05       	cpc	r27, r1
    1d22:	61 f4       	brne	.+24     	; 0x1d3c <__mulsf3+0x1ce>
    1d24:	47 fd       	sbrc	r20, 7
    1d26:	0a c0       	rjmp	.+20     	; 0x1d3c <__mulsf3+0x1ce>
    1d28:	e1 14       	cp	r14, r1
    1d2a:	f1 04       	cpc	r15, r1
    1d2c:	01 05       	cpc	r16, r1
    1d2e:	11 05       	cpc	r17, r1
    1d30:	29 f0       	breq	.+10     	; 0x1d3c <__mulsf3+0x1ce>
    1d32:	40 5c       	subi	r20, 0xC0	; 192
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	6f 4f       	sbci	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	40 78       	andi	r20, 0x80	; 128
    1d3c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d3e:	fe 17       	cp	r31, r30
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <__mulsf3+0x1d8>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	8a 8f       	std	Y+26, r24	; 0x1a
    1d46:	4d 8f       	std	Y+29, r20	; 0x1d
    1d48:	5e 8f       	std	Y+30, r21	; 0x1e
    1d4a:	6f 8f       	std	Y+31, r22	; 0x1f
    1d4c:	78 a3       	std	Y+32, r23	; 0x20
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	89 8f       	std	Y+25, r24	; 0x19
    1d52:	ce 01       	movw	r24, r28
    1d54:	49 96       	adiw	r24, 0x19	; 25
    1d56:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__pack_f>
    1d5a:	a0 96       	adiw	r28, 0x20	; 32
    1d5c:	e2 e1       	ldi	r30, 0x12	; 18
    1d5e:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__>

00001d62 <__gtsf2>:
    1d62:	a8 e1       	ldi	r26, 0x18	; 24
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e7 eb       	ldi	r30, 0xB7	; 183
    1d68:	fe e0       	ldi	r31, 0x0E	; 14
    1d6a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
    1d6e:	69 83       	std	Y+1, r22	; 0x01
    1d70:	7a 83       	std	Y+2, r23	; 0x02
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	2d 83       	std	Y+5, r18	; 0x05
    1d78:	3e 83       	std	Y+6, r19	; 0x06
    1d7a:	4f 83       	std	Y+7, r20	; 0x07
    1d7c:	58 87       	std	Y+8, r21	; 0x08
    1d7e:	89 e0       	ldi	r24, 0x09	; 9
    1d80:	e8 2e       	mov	r14, r24
    1d82:	f1 2c       	mov	r15, r1
    1d84:	ec 0e       	add	r14, r28
    1d86:	fd 1e       	adc	r15, r29
    1d88:	ce 01       	movw	r24, r28
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1d92:	8e 01       	movw	r16, r28
    1d94:	0f 5e       	subi	r16, 0xEF	; 239
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	ce 01       	movw	r24, r28
    1d9a:	05 96       	adiw	r24, 0x05	; 5
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	40 f0       	brcs	.+16     	; 0x1db8 <__gtsf2+0x56>
    1da8:	89 89       	ldd	r24, Y+17	; 0x11
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	28 f0       	brcs	.+10     	; 0x1db8 <__gtsf2+0x56>
    1dae:	c7 01       	movw	r24, r14
    1db0:	b8 01       	movw	r22, r16
    1db2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fpcmp_parts_f>
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <__gtsf2+0x58>
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	68 96       	adiw	r28, 0x18	; 24
    1dbc:	e6 e0       	ldi	r30, 0x06	; 6
    1dbe:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00001dc2 <__gesf2>:
    1dc2:	a8 e1       	ldi	r26, 0x18	; 24
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e7 ee       	ldi	r30, 0xE7	; 231
    1dc8:	fe e0       	ldi	r31, 0x0E	; 14
    1dca:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
    1dce:	69 83       	std	Y+1, r22	; 0x01
    1dd0:	7a 83       	std	Y+2, r23	; 0x02
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	2d 83       	std	Y+5, r18	; 0x05
    1dd8:	3e 83       	std	Y+6, r19	; 0x06
    1dda:	4f 83       	std	Y+7, r20	; 0x07
    1ddc:	58 87       	std	Y+8, r21	; 0x08
    1dde:	89 e0       	ldi	r24, 0x09	; 9
    1de0:	e8 2e       	mov	r14, r24
    1de2:	f1 2c       	mov	r15, r1
    1de4:	ec 0e       	add	r14, r28
    1de6:	fd 1e       	adc	r15, r29
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	b7 01       	movw	r22, r14
    1dee:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1df2:	8e 01       	movw	r16, r28
    1df4:	0f 5e       	subi	r16, 0xEF	; 239
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	ce 01       	movw	r24, r28
    1dfa:	05 96       	adiw	r24, 0x05	; 5
    1dfc:	b8 01       	movw	r22, r16
    1dfe:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	40 f0       	brcs	.+16     	; 0x1e18 <__gesf2+0x56>
    1e08:	89 89       	ldd	r24, Y+17	; 0x11
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	28 f0       	brcs	.+10     	; 0x1e18 <__gesf2+0x56>
    1e0e:	c7 01       	movw	r24, r14
    1e10:	b8 01       	movw	r22, r16
    1e12:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fpcmp_parts_f>
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <__gesf2+0x58>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	68 96       	adiw	r28, 0x18	; 24
    1e1c:	e6 e0       	ldi	r30, 0x06	; 6
    1e1e:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00001e22 <__ltsf2>:
    1e22:	a8 e1       	ldi	r26, 0x18	; 24
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e7 e1       	ldi	r30, 0x17	; 23
    1e28:	ff e0       	ldi	r31, 0x0F	; 15
    1e2a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
    1e2e:	69 83       	std	Y+1, r22	; 0x01
    1e30:	7a 83       	std	Y+2, r23	; 0x02
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	2d 83       	std	Y+5, r18	; 0x05
    1e38:	3e 83       	std	Y+6, r19	; 0x06
    1e3a:	4f 83       	std	Y+7, r20	; 0x07
    1e3c:	58 87       	std	Y+8, r21	; 0x08
    1e3e:	89 e0       	ldi	r24, 0x09	; 9
    1e40:	e8 2e       	mov	r14, r24
    1e42:	f1 2c       	mov	r15, r1
    1e44:	ec 0e       	add	r14, r28
    1e46:	fd 1e       	adc	r15, r29
    1e48:	ce 01       	movw	r24, r28
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	b7 01       	movw	r22, r14
    1e4e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1e52:	8e 01       	movw	r16, r28
    1e54:	0f 5e       	subi	r16, 0xEF	; 239
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	ce 01       	movw	r24, r28
    1e5a:	05 96       	adiw	r24, 0x05	; 5
    1e5c:	b8 01       	movw	r22, r16
    1e5e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	40 f0       	brcs	.+16     	; 0x1e78 <__ltsf2+0x56>
    1e68:	89 89       	ldd	r24, Y+17	; 0x11
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	28 f0       	brcs	.+10     	; 0x1e78 <__ltsf2+0x56>
    1e6e:	c7 01       	movw	r24, r14
    1e70:	b8 01       	movw	r22, r16
    1e72:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__fpcmp_parts_f>
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <__ltsf2+0x58>
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	68 96       	adiw	r28, 0x18	; 24
    1e7c:	e6 e0       	ldi	r30, 0x06	; 6
    1e7e:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00001e82 <__fixsfsi>:
    1e82:	ac e0       	ldi	r26, 0x0C	; 12
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e7 e4       	ldi	r30, 0x47	; 71
    1e88:	ff e0       	ldi	r31, 0x0F	; 15
    1e8a:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__prologue_saves__+0x20>
    1e8e:	69 83       	std	Y+1, r22	; 0x01
    1e90:	7a 83       	std	Y+2, r23	; 0x02
    1e92:	8b 83       	std	Y+3, r24	; 0x03
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	be 01       	movw	r22, r28
    1e9c:	6b 5f       	subi	r22, 0xFB	; 251
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__unpack_f>
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	61 f1       	breq	.+88     	; 0x1f02 <__fixsfsi+0x80>
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	50 f1       	brcs	.+84     	; 0x1f02 <__fixsfsi+0x80>
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	21 f4       	brne	.+8      	; 0x1eba <__fixsfsi+0x38>
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	88 23       	and	r24, r24
    1eb6:	51 f1       	breq	.+84     	; 0x1f0c <__fixsfsi+0x8a>
    1eb8:	2e c0       	rjmp	.+92     	; 0x1f16 <__fixsfsi+0x94>
    1eba:	2f 81       	ldd	r18, Y+7	; 0x07
    1ebc:	38 85       	ldd	r19, Y+8	; 0x08
    1ebe:	37 fd       	sbrc	r19, 7
    1ec0:	20 c0       	rjmp	.+64     	; 0x1f02 <__fixsfsi+0x80>
    1ec2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ec4:	2f 31       	cpi	r18, 0x1F	; 31
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	1c f0       	brlt	.+6      	; 0x1ed0 <__fixsfsi+0x4e>
    1eca:	66 23       	and	r22, r22
    1ecc:	f9 f0       	breq	.+62     	; 0x1f0c <__fixsfsi+0x8a>
    1ece:	23 c0       	rjmp	.+70     	; 0x1f16 <__fixsfsi+0x94>
    1ed0:	8e e1       	ldi	r24, 0x1E	; 30
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	82 1b       	sub	r24, r18
    1ed6:	93 0b       	sbc	r25, r19
    1ed8:	29 85       	ldd	r18, Y+9	; 0x09
    1eda:	3a 85       	ldd	r19, Y+10	; 0x0a
    1edc:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ede:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <__fixsfsi+0x68>
    1ee2:	56 95       	lsr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	37 95       	ror	r19
    1ee8:	27 95       	ror	r18
    1eea:	8a 95       	dec	r24
    1eec:	d2 f7       	brpl	.-12     	; 0x1ee2 <__fixsfsi+0x60>
    1eee:	66 23       	and	r22, r22
    1ef0:	b1 f0       	breq	.+44     	; 0x1f1e <__fixsfsi+0x9c>
    1ef2:	50 95       	com	r21
    1ef4:	40 95       	com	r20
    1ef6:	30 95       	com	r19
    1ef8:	21 95       	neg	r18
    1efa:	3f 4f       	sbci	r19, 0xFF	; 255
    1efc:	4f 4f       	sbci	r20, 0xFF	; 255
    1efe:	5f 4f       	sbci	r21, 0xFF	; 255
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <__fixsfsi+0x9c>
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <__fixsfsi+0x9c>
    1f0c:	2f ef       	ldi	r18, 0xFF	; 255
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f ef       	ldi	r20, 0xFF	; 255
    1f12:	5f e7       	ldi	r21, 0x7F	; 127
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <__fixsfsi+0x9c>
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e8       	ldi	r21, 0x80	; 128
    1f1e:	b9 01       	movw	r22, r18
    1f20:	ca 01       	movw	r24, r20
    1f22:	2c 96       	adiw	r28, 0x0c	; 12
    1f24:	e2 e0       	ldi	r30, 0x02	; 2
    1f26:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__epilogue_restores__+0x20>

00001f2a <__pack_f>:
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	fc 01       	movw	r30, r24
    1f36:	e4 80       	ldd	r14, Z+4	; 0x04
    1f38:	f5 80       	ldd	r15, Z+5	; 0x05
    1f3a:	06 81       	ldd	r16, Z+6	; 0x06
    1f3c:	17 81       	ldd	r17, Z+7	; 0x07
    1f3e:	d1 80       	ldd	r13, Z+1	; 0x01
    1f40:	80 81       	ld	r24, Z
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	48 f4       	brcc	.+18     	; 0x1f58 <__pack_f+0x2e>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e1       	ldi	r26, 0x10	; 16
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e8 2a       	or	r14, r24
    1f50:	f9 2a       	or	r15, r25
    1f52:	0a 2b       	or	r16, r26
    1f54:	1b 2b       	or	r17, r27
    1f56:	a5 c0       	rjmp	.+330    	; 0x20a2 <__pack_f+0x178>
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <__pack_f+0x34>
    1f5c:	9f c0       	rjmp	.+318    	; 0x209c <__pack_f+0x172>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	21 f4       	brne	.+8      	; 0x1f6a <__pack_f+0x40>
    1f62:	ee 24       	eor	r14, r14
    1f64:	ff 24       	eor	r15, r15
    1f66:	87 01       	movw	r16, r14
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <__pack_f+0x4a>
    1f6a:	e1 14       	cp	r14, r1
    1f6c:	f1 04       	cpc	r15, r1
    1f6e:	01 05       	cpc	r16, r1
    1f70:	11 05       	cpc	r17, r1
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <__pack_f+0x50>
    1f74:	e0 e0       	ldi	r30, 0x00	; 0
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	96 c0       	rjmp	.+300    	; 0x20a6 <__pack_f+0x17c>
    1f7a:	62 81       	ldd	r22, Z+2	; 0x02
    1f7c:	73 81       	ldd	r23, Z+3	; 0x03
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	62 38       	cpi	r22, 0x82	; 130
    1f82:	79 07       	cpc	r23, r25
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <__pack_f+0x5e>
    1f86:	5b c0       	rjmp	.+182    	; 0x203e <__pack_f+0x114>
    1f88:	22 e8       	ldi	r18, 0x82	; 130
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	26 1b       	sub	r18, r22
    1f8e:	37 0b       	sbc	r19, r23
    1f90:	2a 31       	cpi	r18, 0x1A	; 26
    1f92:	31 05       	cpc	r19, r1
    1f94:	2c f0       	brlt	.+10     	; 0x1fa0 <__pack_f+0x76>
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	2a c0       	rjmp	.+84     	; 0x1ff4 <__pack_f+0xca>
    1fa0:	b8 01       	movw	r22, r16
    1fa2:	a7 01       	movw	r20, r14
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <__pack_f+0x86>
    1fa8:	76 95       	lsr	r23
    1faa:	67 95       	ror	r22
    1fac:	57 95       	ror	r21
    1fae:	47 95       	ror	r20
    1fb0:	0a 94       	dec	r0
    1fb2:	d2 f7       	brpl	.-12     	; 0x1fa8 <__pack_f+0x7e>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <__pack_f+0x9c>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	aa 1f       	adc	r26, r26
    1fc4:	bb 1f       	adc	r27, r27
    1fc6:	2a 95       	dec	r18
    1fc8:	d2 f7       	brpl	.-12     	; 0x1fbe <__pack_f+0x94>
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	a1 09       	sbc	r26, r1
    1fce:	b1 09       	sbc	r27, r1
    1fd0:	8e 21       	and	r24, r14
    1fd2:	9f 21       	and	r25, r15
    1fd4:	a0 23       	and	r26, r16
    1fd6:	b1 23       	and	r27, r17
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	a1 05       	cpc	r26, r1
    1fdc:	b1 05       	cpc	r27, r1
    1fde:	21 f0       	breq	.+8      	; 0x1fe8 <__pack_f+0xbe>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	9a 01       	movw	r18, r20
    1fea:	ab 01       	movw	r20, r22
    1fec:	28 2b       	or	r18, r24
    1fee:	39 2b       	or	r19, r25
    1ff0:	4a 2b       	or	r20, r26
    1ff2:	5b 2b       	or	r21, r27
    1ff4:	da 01       	movw	r26, r20
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	8f 77       	andi	r24, 0x7F	; 127
    1ffa:	90 70       	andi	r25, 0x00	; 0
    1ffc:	a0 70       	andi	r26, 0x00	; 0
    1ffe:	b0 70       	andi	r27, 0x00	; 0
    2000:	80 34       	cpi	r24, 0x40	; 64
    2002:	91 05       	cpc	r25, r1
    2004:	a1 05       	cpc	r26, r1
    2006:	b1 05       	cpc	r27, r1
    2008:	39 f4       	brne	.+14     	; 0x2018 <__pack_f+0xee>
    200a:	27 ff       	sbrs	r18, 7
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <__pack_f+0xf6>
    200e:	20 5c       	subi	r18, 0xC0	; 192
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	4f 4f       	sbci	r20, 0xFF	; 255
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <__pack_f+0xf6>
    2018:	21 5c       	subi	r18, 0xC1	; 193
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	4f 4f       	sbci	r20, 0xFF	; 255
    201e:	5f 4f       	sbci	r21, 0xFF	; 255
    2020:	e0 e0       	ldi	r30, 0x00	; 0
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	20 30       	cpi	r18, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	3a 07       	cpc	r19, r26
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	4a 07       	cpc	r20, r26
    202e:	a0 e4       	ldi	r26, 0x40	; 64
    2030:	5a 07       	cpc	r21, r26
    2032:	10 f0       	brcs	.+4      	; 0x2038 <__pack_f+0x10e>
    2034:	e1 e0       	ldi	r30, 0x01	; 1
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	79 01       	movw	r14, r18
    203a:	8a 01       	movw	r16, r20
    203c:	27 c0       	rjmp	.+78     	; 0x208c <__pack_f+0x162>
    203e:	60 38       	cpi	r22, 0x80	; 128
    2040:	71 05       	cpc	r23, r1
    2042:	64 f5       	brge	.+88     	; 0x209c <__pack_f+0x172>
    2044:	fb 01       	movw	r30, r22
    2046:	e1 58       	subi	r30, 0x81	; 129
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	d8 01       	movw	r26, r16
    204c:	c7 01       	movw	r24, r14
    204e:	8f 77       	andi	r24, 0x7F	; 127
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	a0 70       	andi	r26, 0x00	; 0
    2054:	b0 70       	andi	r27, 0x00	; 0
    2056:	80 34       	cpi	r24, 0x40	; 64
    2058:	91 05       	cpc	r25, r1
    205a:	a1 05       	cpc	r26, r1
    205c:	b1 05       	cpc	r27, r1
    205e:	39 f4       	brne	.+14     	; 0x206e <__pack_f+0x144>
    2060:	e7 fe       	sbrs	r14, 7
    2062:	0d c0       	rjmp	.+26     	; 0x207e <__pack_f+0x154>
    2064:	80 e4       	ldi	r24, 0x40	; 64
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a0 e0       	ldi	r26, 0x00	; 0
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <__pack_f+0x14c>
    206e:	8f e3       	ldi	r24, 0x3F	; 63
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e8 0e       	add	r14, r24
    2078:	f9 1e       	adc	r15, r25
    207a:	0a 1f       	adc	r16, r26
    207c:	1b 1f       	adc	r17, r27
    207e:	17 ff       	sbrs	r17, 7
    2080:	05 c0       	rjmp	.+10     	; 0x208c <__pack_f+0x162>
    2082:	16 95       	lsr	r17
    2084:	07 95       	ror	r16
    2086:	f7 94       	ror	r15
    2088:	e7 94       	ror	r14
    208a:	31 96       	adiw	r30, 0x01	; 1
    208c:	87 e0       	ldi	r24, 0x07	; 7
    208e:	16 95       	lsr	r17
    2090:	07 95       	ror	r16
    2092:	f7 94       	ror	r15
    2094:	e7 94       	ror	r14
    2096:	8a 95       	dec	r24
    2098:	d1 f7       	brne	.-12     	; 0x208e <__pack_f+0x164>
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <__pack_f+0x17c>
    209c:	ee 24       	eor	r14, r14
    209e:	ff 24       	eor	r15, r15
    20a0:	87 01       	movw	r16, r14
    20a2:	ef ef       	ldi	r30, 0xFF	; 255
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	6e 2f       	mov	r22, r30
    20a8:	67 95       	ror	r22
    20aa:	66 27       	eor	r22, r22
    20ac:	67 95       	ror	r22
    20ae:	90 2f       	mov	r25, r16
    20b0:	9f 77       	andi	r25, 0x7F	; 127
    20b2:	d7 94       	ror	r13
    20b4:	dd 24       	eor	r13, r13
    20b6:	d7 94       	ror	r13
    20b8:	8e 2f       	mov	r24, r30
    20ba:	86 95       	lsr	r24
    20bc:	49 2f       	mov	r20, r25
    20be:	46 2b       	or	r20, r22
    20c0:	58 2f       	mov	r21, r24
    20c2:	5d 29       	or	r21, r13
    20c4:	b7 01       	movw	r22, r14
    20c6:	ca 01       	movw	r24, r20
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	08 95       	ret

000020d4 <__unpack_f>:
    20d4:	fc 01       	movw	r30, r24
    20d6:	db 01       	movw	r26, r22
    20d8:	40 81       	ld	r20, Z
    20da:	51 81       	ldd	r21, Z+1	; 0x01
    20dc:	22 81       	ldd	r18, Z+2	; 0x02
    20de:	62 2f       	mov	r22, r18
    20e0:	6f 77       	andi	r22, 0x7F	; 127
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	22 1f       	adc	r18, r18
    20e6:	22 27       	eor	r18, r18
    20e8:	22 1f       	adc	r18, r18
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	89 2f       	mov	r24, r25
    20ee:	88 0f       	add	r24, r24
    20f0:	82 2b       	or	r24, r18
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	99 1f       	adc	r25, r25
    20f8:	99 27       	eor	r25, r25
    20fa:	99 1f       	adc	r25, r25
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	9c 93       	st	X, r25
    2100:	11 97       	sbiw	r26, 0x01	; 1
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	a9 f5       	brne	.+106    	; 0x2172 <__unpack_f+0x9e>
    2108:	41 15       	cp	r20, r1
    210a:	51 05       	cpc	r21, r1
    210c:	61 05       	cpc	r22, r1
    210e:	71 05       	cpc	r23, r1
    2110:	11 f4       	brne	.+4      	; 0x2116 <__unpack_f+0x42>
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	37 c0       	rjmp	.+110    	; 0x2184 <__unpack_f+0xb0>
    2116:	82 e8       	ldi	r24, 0x82	; 130
    2118:	9f ef       	ldi	r25, 0xFF	; 255
    211a:	13 96       	adiw	r26, 0x03	; 3
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
    2120:	12 97       	sbiw	r26, 0x02	; 2
    2122:	9a 01       	movw	r18, r20
    2124:	ab 01       	movw	r20, r22
    2126:	67 e0       	ldi	r22, 0x07	; 7
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	44 1f       	adc	r20, r20
    212e:	55 1f       	adc	r21, r21
    2130:	6a 95       	dec	r22
    2132:	d1 f7       	brne	.-12     	; 0x2128 <__unpack_f+0x54>
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	8c 93       	st	X, r24
    2138:	0d c0       	rjmp	.+26     	; 0x2154 <__unpack_f+0x80>
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	44 1f       	adc	r20, r20
    2140:	55 1f       	adc	r21, r21
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	13 97       	sbiw	r26, 0x03	; 3
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	13 96       	adiw	r26, 0x03	; 3
    214e:	9c 93       	st	X, r25
    2150:	8e 93       	st	-X, r24
    2152:	12 97       	sbiw	r26, 0x02	; 2
    2154:	20 30       	cpi	r18, 0x00	; 0
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	38 07       	cpc	r19, r24
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	48 07       	cpc	r20, r24
    215e:	80 e4       	ldi	r24, 0x40	; 64
    2160:	58 07       	cpc	r21, r24
    2162:	58 f3       	brcs	.-42     	; 0x213a <__unpack_f+0x66>
    2164:	14 96       	adiw	r26, 0x04	; 4
    2166:	2d 93       	st	X+, r18
    2168:	3d 93       	st	X+, r19
    216a:	4d 93       	st	X+, r20
    216c:	5c 93       	st	X, r21
    216e:	17 97       	sbiw	r26, 0x07	; 7
    2170:	08 95       	ret
    2172:	2f 3f       	cpi	r18, 0xFF	; 255
    2174:	31 05       	cpc	r19, r1
    2176:	79 f4       	brne	.+30     	; 0x2196 <__unpack_f+0xc2>
    2178:	41 15       	cp	r20, r1
    217a:	51 05       	cpc	r21, r1
    217c:	61 05       	cpc	r22, r1
    217e:	71 05       	cpc	r23, r1
    2180:	19 f4       	brne	.+6      	; 0x2188 <__unpack_f+0xb4>
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	8c 93       	st	X, r24
    2186:	08 95       	ret
    2188:	64 ff       	sbrs	r22, 4
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <__unpack_f+0xbe>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8c 93       	st	X, r24
    2190:	12 c0       	rjmp	.+36     	; 0x21b6 <__unpack_f+0xe2>
    2192:	1c 92       	st	X, r1
    2194:	10 c0       	rjmp	.+32     	; 0x21b6 <__unpack_f+0xe2>
    2196:	2f 57       	subi	r18, 0x7F	; 127
    2198:	30 40       	sbci	r19, 0x00	; 0
    219a:	13 96       	adiw	r26, 0x03	; 3
    219c:	3c 93       	st	X, r19
    219e:	2e 93       	st	-X, r18
    21a0:	12 97       	sbiw	r26, 0x02	; 2
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	8c 93       	st	X, r24
    21a6:	87 e0       	ldi	r24, 0x07	; 7
    21a8:	44 0f       	add	r20, r20
    21aa:	55 1f       	adc	r21, r21
    21ac:	66 1f       	adc	r22, r22
    21ae:	77 1f       	adc	r23, r23
    21b0:	8a 95       	dec	r24
    21b2:	d1 f7       	brne	.-12     	; 0x21a8 <__unpack_f+0xd4>
    21b4:	70 64       	ori	r23, 0x40	; 64
    21b6:	14 96       	adiw	r26, 0x04	; 4
    21b8:	4d 93       	st	X+, r20
    21ba:	5d 93       	st	X+, r21
    21bc:	6d 93       	st	X+, r22
    21be:	7c 93       	st	X, r23
    21c0:	17 97       	sbiw	r26, 0x07	; 7
    21c2:	08 95       	ret

000021c4 <__fpcmp_parts_f>:
    21c4:	1f 93       	push	r17
    21c6:	dc 01       	movw	r26, r24
    21c8:	fb 01       	movw	r30, r22
    21ca:	9c 91       	ld	r25, X
    21cc:	92 30       	cpi	r25, 0x02	; 2
    21ce:	08 f4       	brcc	.+2      	; 0x21d2 <__fpcmp_parts_f+0xe>
    21d0:	47 c0       	rjmp	.+142    	; 0x2260 <__stack+0x61>
    21d2:	80 81       	ld	r24, Z
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	08 f4       	brcc	.+2      	; 0x21da <__fpcmp_parts_f+0x16>
    21d8:	43 c0       	rjmp	.+134    	; 0x2260 <__stack+0x61>
    21da:	94 30       	cpi	r25, 0x04	; 4
    21dc:	51 f4       	brne	.+20     	; 0x21f2 <__fpcmp_parts_f+0x2e>
    21de:	11 96       	adiw	r26, 0x01	; 1
    21e0:	1c 91       	ld	r17, X
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	99 f5       	brne	.+102    	; 0x224c <__stack+0x4d>
    21e6:	81 81       	ldd	r24, Z+1	; 0x01
    21e8:	68 2f       	mov	r22, r24
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	61 1b       	sub	r22, r17
    21ee:	71 09       	sbc	r23, r1
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <__stack+0x71>
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	21 f0       	breq	.+8      	; 0x21fe <__fpcmp_parts_f+0x3a>
    21f6:	92 30       	cpi	r25, 0x02	; 2
    21f8:	31 f4       	brne	.+12     	; 0x2206 <__stack+0x7>
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	b9 f1       	breq	.+110    	; 0x226c <__stack+0x6d>
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	88 23       	and	r24, r24
    2202:	89 f1       	breq	.+98     	; 0x2266 <__stack+0x67>
    2204:	2d c0       	rjmp	.+90     	; 0x2260 <__stack+0x61>
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	1c 91       	ld	r17, X
    220a:	11 97       	sbiw	r26, 0x01	; 1
    220c:	82 30       	cpi	r24, 0x02	; 2
    220e:	f1 f0       	breq	.+60     	; 0x224c <__stack+0x4d>
    2210:	81 81       	ldd	r24, Z+1	; 0x01
    2212:	18 17       	cp	r17, r24
    2214:	d9 f4       	brne	.+54     	; 0x224c <__stack+0x4d>
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	2d 91       	ld	r18, X+
    221a:	3c 91       	ld	r19, X
    221c:	13 97       	sbiw	r26, 0x03	; 3
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	82 17       	cp	r24, r18
    2224:	93 07       	cpc	r25, r19
    2226:	94 f0       	brlt	.+36     	; 0x224c <__stack+0x4d>
    2228:	28 17       	cp	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	bc f0       	brlt	.+46     	; 0x225c <__stack+0x5d>
    222e:	14 96       	adiw	r26, 0x04	; 4
    2230:	8d 91       	ld	r24, X+
    2232:	9d 91       	ld	r25, X+
    2234:	0d 90       	ld	r0, X+
    2236:	bc 91       	ld	r27, X
    2238:	a0 2d       	mov	r26, r0
    223a:	24 81       	ldd	r18, Z+4	; 0x04
    223c:	35 81       	ldd	r19, Z+5	; 0x05
    223e:	46 81       	ldd	r20, Z+6	; 0x06
    2240:	57 81       	ldd	r21, Z+7	; 0x07
    2242:	28 17       	cp	r18, r24
    2244:	39 07       	cpc	r19, r25
    2246:	4a 07       	cpc	r20, r26
    2248:	5b 07       	cpc	r21, r27
    224a:	18 f4       	brcc	.+6      	; 0x2252 <__stack+0x53>
    224c:	11 23       	and	r17, r17
    224e:	41 f0       	breq	.+16     	; 0x2260 <__stack+0x61>
    2250:	0a c0       	rjmp	.+20     	; 0x2266 <__stack+0x67>
    2252:	82 17       	cp	r24, r18
    2254:	93 07       	cpc	r25, r19
    2256:	a4 07       	cpc	r26, r20
    2258:	b5 07       	cpc	r27, r21
    225a:	40 f4       	brcc	.+16     	; 0x226c <__stack+0x6d>
    225c:	11 23       	and	r17, r17
    225e:	19 f0       	breq	.+6      	; 0x2266 <__stack+0x67>
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	05 c0       	rjmp	.+10     	; 0x2270 <__stack+0x71>
    2266:	6f ef       	ldi	r22, 0xFF	; 255
    2268:	7f ef       	ldi	r23, 0xFF	; 255
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <__stack+0x71>
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	cb 01       	movw	r24, r22
    2272:	1f 91       	pop	r17
    2274:	08 95       	ret

00002276 <__udivmodhi4>:
    2276:	aa 1b       	sub	r26, r26
    2278:	bb 1b       	sub	r27, r27
    227a:	51 e1       	ldi	r21, 0x11	; 17
    227c:	07 c0       	rjmp	.+14     	; 0x228c <__udivmodhi4_ep>

0000227e <__udivmodhi4_loop>:
    227e:	aa 1f       	adc	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	a6 17       	cp	r26, r22
    2284:	b7 07       	cpc	r27, r23
    2286:	10 f0       	brcs	.+4      	; 0x228c <__udivmodhi4_ep>
    2288:	a6 1b       	sub	r26, r22
    228a:	b7 0b       	sbc	r27, r23

0000228c <__udivmodhi4_ep>:
    228c:	88 1f       	adc	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	5a 95       	dec	r21
    2292:	a9 f7       	brne	.-22     	; 0x227e <__udivmodhi4_loop>
    2294:	80 95       	com	r24
    2296:	90 95       	com	r25
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	08 95       	ret

0000229e <__prologue_saves__>:
    229e:	2f 92       	push	r2
    22a0:	3f 92       	push	r3
    22a2:	4f 92       	push	r4
    22a4:	5f 92       	push	r5
    22a6:	6f 92       	push	r6
    22a8:	7f 92       	push	r7
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	ca 1b       	sub	r28, r26
    22c8:	db 0b       	sbc	r29, r27
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	19 94       	eijmp

000022d6 <__epilogue_restores__>:
    22d6:	2a 88       	ldd	r2, Y+18	; 0x12
    22d8:	39 88       	ldd	r3, Y+17	; 0x11
    22da:	48 88       	ldd	r4, Y+16	; 0x10
    22dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    22de:	6e 84       	ldd	r6, Y+14	; 0x0e
    22e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    22e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    22e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    22e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22e8:	b9 84       	ldd	r11, Y+9	; 0x09
    22ea:	c8 84       	ldd	r12, Y+8	; 0x08
    22ec:	df 80       	ldd	r13, Y+7	; 0x07
    22ee:	ee 80       	ldd	r14, Y+6	; 0x06
    22f0:	fd 80       	ldd	r15, Y+5	; 0x05
    22f2:	0c 81       	ldd	r16, Y+4	; 0x04
    22f4:	1b 81       	ldd	r17, Y+3	; 0x03
    22f6:	aa 81       	ldd	r26, Y+2	; 0x02
    22f8:	b9 81       	ldd	r27, Y+1	; 0x01
    22fa:	ce 0f       	add	r28, r30
    22fc:	d1 1d       	adc	r29, r1
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	ed 01       	movw	r28, r26
    230a:	08 95       	ret

0000230c <_exit>:
    230c:	f8 94       	cli

0000230e <__stop_program>:
    230e:	ff cf       	rjmp	.-2      	; 0x230e <__stop_program>
