
Serial_Communication_ZigBee_wireless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  000003b2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ab  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014c  00000000  00000000  0000047d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a0  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024e  00000000  00000000  00000669  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000181  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 30       	cpi	r26, 0x01	; 1
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 96 01 	call	0x32c	; 0x32c <main>
 122:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:
#include<util/delay.h>

unsigned char data; //to store received data from UDR1

void buzzer_pin_config (void)
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 132:	a7 e2       	ldi	r26, 0x27	; 39
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e7 e2       	ldi	r30, 0x27	; 39
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 140:	a8 e2       	ldi	r26, 0x28	; 40
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e8 e2       	ldi	r30, 0x28	; 40
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8c 93       	st	X, r24
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <motion_pin_config>:

void motion_pin_config (void)
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
 15c:	a1 e2       	ldi	r26, 0x21	; 33
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e1 e2       	ldi	r30, 0x21	; 33
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
 16a:	a2 e2       	ldi	r26, 0x22	; 34
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e2 e2       	ldi	r30, 0x22	; 34
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 178:	aa e0       	ldi	r26, 0x0A	; 10
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	ea e0       	ldi	r30, 0x0A	; 10
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	88 61       	ori	r24, 0x18	; 24
 184:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 186:	ab e0       	ldi	r26, 0x0B	; 11
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	eb e0       	ldi	r30, 0x0B	; 11
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	80 81       	ld	r24, Z
 190:	88 61       	ori	r24, 0x18	; 24
 192:	8c 93       	st	X, r24
}
 194:	cf 91       	pop	r28
 196:	df 91       	pop	r29
 198:	08 95       	ret

0000019a <port_init>:

//Function to initialize ports
void port_init()
{
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1a2:	0e 94 aa 00 	call	0x154	; 0x154 <motion_pin_config>
	buzzer_pin_config();
 1a6:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_pin_config>
}
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	08 95       	ret

000001b0 <buzzer_on>:

void buzzer_on (void)
{
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	0f 92       	push	r0
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 1ba:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 1bc:	e6 e2       	ldi	r30, 0x26	; 38
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 1ca:	e8 e2       	ldi	r30, 0x28	; 40
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	80 83       	st	Z, r24
}
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <buzzer_off>:

void buzzer_off (void)
{
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	0f 92       	push	r0
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
 1e4:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
 1e6:	e6 e2       	ldi	r30, 0x26	; 38
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
 1f4:	e8 e2       	ldi	r30, 0x28	; 40
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	80 83       	st	Z, r24
}
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
 20c:	e1 ec       	ldi	r30, 0xC1	; 193
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	10 82       	st	Z, r1
 UCSR0A = 0x00;
 212:	e0 ec       	ldi	r30, 0xC0	; 192
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	10 82       	st	Z, r1
 UCSR0C = 0x06;
 218:	e2 ec       	ldi	r30, 0xC2	; 194
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
 220:	e4 ec       	ldi	r30, 0xC4	; 196
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	8f e5       	ldi	r24, 0x5F	; 95
 226:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
 228:	e5 ec       	ldi	r30, 0xC5	; 197
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
 UCSR0B = 0x98;
 22e:	e1 ec       	ldi	r30, 0xC1	; 193
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	88 e9       	ldi	r24, 0x98	; 152
 234:	80 83       	st	Z, r24
}
 236:	cf 91       	pop	r28
 238:	df 91       	pop	r29
 23a:	08 95       	ret

0000023c <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	00 90 5b 00 	lds	r0, 0x005B
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
 26c:	e6 ec       	ldi	r30, 0xC6	; 198
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 93 00 02 	sts	0x0200, r24

	UDR0 = data; 				//echo data back to PC
 276:	e6 ec       	ldi	r30, 0xC6	; 198
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 91 00 02 	lds	r24, 0x0200
 27e:	80 83       	st	Z, r24

		if(data == 0x38) //ASCII value of 8
 280:	80 91 00 02 	lds	r24, 0x0200
 284:	88 33       	cpi	r24, 0x38	; 56
 286:	21 f4       	brne	.+8      	; 0x290 <__vector_25+0x54>
		{
			PORTA=0x06;  //forward
 288:	e2 e2       	ldi	r30, 0x22	; 34
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 83       	st	Z, r24
		}

		if(data == 0x32) //ASCII value of 2
 290:	80 91 00 02 	lds	r24, 0x0200
 294:	82 33       	cpi	r24, 0x32	; 50
 296:	21 f4       	brne	.+8      	; 0x2a0 <__vector_25+0x64>
		{
			PORTA=0x09; //back
 298:	e2 e2       	ldi	r30, 0x22	; 34
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	89 e0       	ldi	r24, 0x09	; 9
 29e:	80 83       	st	Z, r24
		}

		if(data == 0x34) //ASCII value of 4
 2a0:	80 91 00 02 	lds	r24, 0x0200
 2a4:	84 33       	cpi	r24, 0x34	; 52
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <__vector_25+0x74>
		{
			PORTA=0x05;  //left
 2a8:	e2 e2       	ldi	r30, 0x22	; 34
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	80 83       	st	Z, r24
		}

		if(data == 0x36) //ASCII value of 6
 2b0:	80 91 00 02 	lds	r24, 0x0200
 2b4:	86 33       	cpi	r24, 0x36	; 54
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <__vector_25+0x84>
		{
			PORTA=0x0A; //right
 2b8:	e2 e2       	ldi	r30, 0x22	; 34
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	80 83       	st	Z, r24
		}

		if(data == 0x35) //ASCII value of 5
 2c0:	80 91 00 02 	lds	r24, 0x0200
 2c4:	85 33       	cpi	r24, 0x35	; 53
 2c6:	19 f4       	brne	.+6      	; 0x2ce <__vector_25+0x92>
		{
			PORTA=0x00; //stop
 2c8:	e2 e2       	ldi	r30, 0x22	; 34
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	10 82       	st	Z, r1
		}

		if(data == 0x37) //ASCII value of 7
 2ce:	80 91 00 02 	lds	r24, 0x0200
 2d2:	87 33       	cpi	r24, 0x37	; 55
 2d4:	11 f4       	brne	.+4      	; 0x2da <__vector_25+0x9e>
		{
			buzzer_on();
 2d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <buzzer_on>
		}

		if(data == 0x39) //ASCII value of 9
 2da:	80 91 00 02 	lds	r24, 0x0200
 2de:	89 33       	cpi	r24, 0x39	; 57
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <__vector_25+0xaa>
		{
			buzzer_off();
 2e2:	0e 94 ed 00 	call	0x1da	; 0x1da <buzzer_off>
		}

}
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	00 92 5b 00 	sts	0x005B, r0
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 312:	df 93       	push	r29
 314:	cf 93       	push	r28
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
 31a:	f8 94       	cli
 port_init();  //Initializes all the ports
 31c:	0e 94 cd 00 	call	0x19a	; 0x19a <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
 320:	0e 94 02 01 	call	0x204	; 0x204 <uart0_init>
 sei();   //Enables the global interrupts
 324:	78 94       	sei
}
 326:	cf 91       	pop	r28
 328:	df 91       	pop	r29
 32a:	08 95       	ret

0000032c <main>:

//Main Function
int main(void)
{
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 334:	0e 94 89 01 	call	0x312	; 0x312 <init_devices>
 338:	ff cf       	rjmp	.-2      	; 0x338 <main+0xc>

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
