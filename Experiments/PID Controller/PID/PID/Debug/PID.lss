
PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080020c  0080020c  00000d3a  2**0
                  ALLOC
  3 .stab         00001bc0  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec5  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e0  00000000  00000000  00003de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c9  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00004690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004db  00000000  00000000  00004c0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 33       	cpi	r26, 0x3C	; 60
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <main>
 122:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_set_4bit+0xa>
 134:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 136:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 138:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	e1 ee       	ldi	r30, 0xE1	; 225
 142:	f4 e0       	ldi	r31, 0x04	; 4
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x20>
 14a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14c:	42 98       	cbi	0x08, 2	; 8
 14e:	e9 ef       	ldi	r30, 0xF9	; 249
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_set_4bit+0x2e>
 158:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 15c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	e1 ee       	ldi	r30, 0xE1	; 225
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_set_4bit+0x3c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_set_4bit+0x42>
 16c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16e:	42 98       	cbi	0x08, 2	; 8
 170:	e9 ef       	ldi	r30, 0xF9	; 249
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x4a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_set_4bit+0x50>
 17a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 17e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 182:	42 9a       	sbi	0x08, 2	; 8
 184:	81 ee       	ldi	r24, 0xE1	; 225
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_set_4bit+0x5e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_set_4bit+0x64>
 18e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 190:	42 98       	cbi	0x08, 2	; 8
 192:	e9 ef       	ldi	r30, 0xF9	; 249
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x6c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x72>
 19c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1a6:	42 9a       	sbi	0x08, 2	; 8
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_set_4bit+0x88>
 1b2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b4:	42 98       	cbi	0x08, 2	; 8

	
}
 1b6:	08 95       	ret

000001b8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1be:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1c0:	28 2f       	mov	r18, r24
 1c2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1c4:	92 2b       	or	r25, r18
 1c6:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	e1 ee       	ldi	r30, 0xE1	; 225
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_wr_command+0x1a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_wr_command+0x20>
 1d8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1da:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1e2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e8:	89 2b       	or	r24, r25
 1ea:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1f0:	42 9a       	sbi	0x08, 2	; 8
 1f2:	81 ee       	ldi	r24, 0xE1	; 225
 1f4:	94 e0       	ldi	r25, 0x04	; 4
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_wr_command+0x3e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_wr_command+0x44>
 1fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1fe:	42 98       	cbi	0x08, 2	; 8
}
 200:	08 95       	ret

00000202 <lcd_init>:
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_init+0xa>
 20c:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x01);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x06);
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x0E);
 220:	8e e0       	ldi	r24, 0x0E	; 14
 222:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x80);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	
}
 22c:	08 95       	ret

0000022e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 22e:	98 b1       	in	r25, 0x08	; 8
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 234:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 236:	28 2f       	mov	r18, r24
 238:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 23a:	92 2b       	or	r25, r18
 23c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 23e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 240:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 242:	42 9a       	sbi	0x08, 2	; 8
 244:	e1 ee       	ldi	r30, 0xE1	; 225
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_wr_char+0x1a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_wr_char+0x20>
 24e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 250:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 252:	98 b1       	in	r25, 0x08	; 8
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 258:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 25a:	82 95       	swap	r24
 25c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 25e:	89 2b       	or	r24, r25
 260:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 262:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 264:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 266:	42 9a       	sbi	0x08, 2	; 8
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	94 e0       	ldi	r25, 0x04	; 4
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_wr_char+0x3e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_wr_char+0x44>
 272:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 274:	42 98       	cbi	0x08, 2	; 8
}
 276:	08 95       	ret

00000278 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
}
 27e:	08 95       	ret

00000280 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
	while(*str != '\0')
 286:	88 81       	ld	r24, Y
 288:	88 23       	and	r24, r24
 28a:	31 f0       	breq	.+12     	; 0x298 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
 28c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 28e:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
 292:	89 91       	ld	r24, Y+
 294:	88 23       	and	r24, r24
 296:	d9 f7       	brne	.-10     	; 0x28e <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	79 f0       	breq	.+30     	; 0x2c0 <lcd_cursor+0x22>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <lcd_cursor+0xe>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	c9 f4       	brne	.+50     	; 0x2dc <lcd_cursor+0x3e>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <lcd_cursor+0x18>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	69 f0       	breq	.+26     	; 0x2ca <lcd_cursor+0x2c>
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	a1 f4       	brne	.+40     	; 0x2dc <lcd_cursor+0x3e>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b6:	86 2f       	mov	r24, r22
 2b8:	81 58       	subi	r24, 0x81	; 129
 2ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2be:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2c0:	86 2f       	mov	r24, r22
 2c2:	81 54       	subi	r24, 0x41	; 65
 2c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2c8:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2ca:	86 2f       	mov	r24, r22
 2cc:	8d 56       	subi	r24, 0x6D	; 109
 2ce:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2d2:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2d4:	86 2f       	mov	r24, r22
 2d6:	8d 52       	subi	r24, 0x2D	; 45
 2d8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2dc:	08 95       	ret

000002de <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	8a 01       	movw	r16, r20
 2e8:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2ea:	88 23       	and	r24, r24
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <lcd_print+0x14>
 2ee:	66 23       	and	r22, r22
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <lcd_print+0x1a>
	{
		lcd_home();
 2f2:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_home>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2fc:	c5 30       	cpi	r28, 0x05	; 5
 2fe:	d1 05       	cpc	r29, r1
 300:	71 f4       	brne	.+28     	; 0x31e <lcd_print+0x40>
	{
		million=value/10000+48;
 302:	c8 01       	movw	r24, r16
 304:	60 e1       	ldi	r22, 0x10	; 16
 306:	77 e2       	ldi	r23, 0x27	; 39
 308:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 30c:	cb 01       	movw	r24, r22
 30e:	c0 96       	adiw	r24, 0x30	; 48
 310:	90 93 2d 02 	sts	0x022D, r25
 314:	80 93 2c 02 	sts	0x022C, r24
		lcd_wr_char(million);
 318:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 31e:	c4 30       	cpi	r28, 0x04	; 4
 320:	d1 05       	cpc	r29, r1
 322:	b9 f4       	brne	.+46     	; 0x352 <lcd_print+0x74>
	{
		temp = value/1000;
 324:	c8 01       	movw	r24, r16
 326:	68 ee       	ldi	r22, 0xE8	; 232
 328:	73 e0       	ldi	r23, 0x03	; 3
 32a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 32e:	cb 01       	movw	r24, r22
 330:	70 93 2f 02 	sts	0x022F, r23
 334:	60 93 2e 02 	sts	0x022E, r22
		thousand = temp%10 + 48;
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 340:	c0 96       	adiw	r24, 0x30	; 48
 342:	90 93 3b 02 	sts	0x023B, r25
 346:	80 93 3a 02 	sts	0x023A, r24
		lcd_wr_char(thousand);
 34a:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	01 c0       	rjmp	.+2      	; 0x354 <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 352:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 354:	c3 30       	cpi	r28, 0x03	; 3
 356:	d1 05       	cpc	r29, r1
 358:	11 f0       	breq	.+4      	; 0x35e <lcd_print+0x80>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	b1 f4       	brne	.+44     	; 0x38a <lcd_print+0xac>
	{
		temp = value/100;
 35e:	c8 01       	movw	r24, r16
 360:	64 e6       	ldi	r22, 0x64	; 100
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 368:	cb 01       	movw	r24, r22
 36a:	70 93 2f 02 	sts	0x022F, r23
 36e:	60 93 2e 02 	sts	0x022E, r22
		hundred = temp%10 + 48;
 372:	6a e0       	ldi	r22, 0x0A	; 10
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 37a:	c0 96       	adiw	r24, 0x30	; 48
 37c:	90 93 37 02 	sts	0x0237, r25
 380:	80 93 36 02 	sts	0x0236, r24
		lcd_wr_char(hundred);
 384:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 388:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 38a:	c2 30       	cpi	r28, 0x02	; 2
 38c:	d1 05       	cpc	r29, r1
 38e:	11 f0       	breq	.+4      	; 0x394 <lcd_print+0xb6>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	b1 f4       	brne	.+44     	; 0x3c0 <lcd_print+0xe2>
	{
		temp = value/10;
 394:	2a e0       	ldi	r18, 0x0A	; 10
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	c8 01       	movw	r24, r16
 39a:	b9 01       	movw	r22, r18
 39c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 3a0:	cb 01       	movw	r24, r22
 3a2:	70 93 2f 02 	sts	0x022F, r23
 3a6:	60 93 2e 02 	sts	0x022E, r22
		tens = temp%10 + 48;
 3aa:	b9 01       	movw	r22, r18
 3ac:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 3b0:	c0 96       	adiw	r24, 0x30	; 48
 3b2:	90 93 34 02 	sts	0x0234, r25
 3b6:	80 93 33 02 	sts	0x0233, r24
		lcd_wr_char(tens);
 3ba:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3c0:	c1 30       	cpi	r28, 0x01	; 1
 3c2:	d1 05       	cpc	r29, r1
 3c4:	11 f0       	breq	.+4      	; 0x3ca <lcd_print+0xec>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	61 f4       	brne	.+24     	; 0x3e2 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3ca:	c8 01       	movw	r24, r16
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodhi4>
 3d4:	c0 96       	adiw	r24, 0x30	; 48
 3d6:	90 93 39 02 	sts	0x0239, r25
 3da:	80 93 38 02 	sts	0x0238, r24
		lcd_wr_char(unit);
 3de:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
	}
	if(digits>5)
 3e2:	c6 30       	cpi	r28, 0x06	; 6
 3e4:	d1 05       	cpc	r29, r1
 3e6:	1c f0       	brlt	.+6      	; 0x3ee <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e8:	85 e4       	ldi	r24, 0x45	; 69
 3ea:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
	}
	
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <lcd_port_config>:
unsigned char Center_white_line = 0;
unsigned char Right_white_line = 0;

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	87 6f       	ori	r24, 0xF7	; 247
 3fc:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 3fe:	88 b1       	in	r24, 0x08	; 8
 400:	80 78       	andi	r24, 0x80	; 128
 402:	88 b9       	out	0x08, r24	; 8
}
 404:	08 95       	ret

00000406 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
 406:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
 408:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
 40a:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
 40e:	10 92 08 01 	sts	0x0108, r1
}
 412:	08 95       	ret

00000414 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 414:	e1 e2       	ldi	r30, 0x21	; 33
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 426:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 42a:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 42e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 432:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 436:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 43a:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 43e:	89 ea       	ldi	r24, 0xA9	; 169
 440:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 444:	8b e0       	ldi	r24, 0x0B	; 11
 446:	80 83       	st	Z, r24
}
 448:	08 95       	ret

0000044a <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 44a:	ea e7       	ldi	r30, 0x7A	; 122
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 450:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 45e:	86 e8       	ldi	r24, 0x86	; 134
 460:	80 83       	st	Z, r24
}
 462:	08 95       	ret

00000464 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 464:	88 30       	cpi	r24, 0x08	; 8
 466:	18 f0       	brcs	.+6      	; 0x46e <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 468:	98 e0       	ldi	r25, 0x08	; 8
 46a:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
 46e:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 470:	80 62       	ori	r24, 0x20	; 32
 472:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 480:	80 81       	ld	r24, Z
 482:	84 ff       	sbrs	r24, 4
 484:	fd cf       	rjmp	.-6      	; 0x480 <ADC_Conversion+0x1c>
	a=ADCH;
 486:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 48a:	ea e7       	ldi	r30, 0x7A	; 122
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	90 81       	ld	r25, Z
 490:	90 61       	ori	r25, 0x10	; 16
 492:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 494:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 498:	08 95       	ret

0000049a <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	d8 2f       	mov	r29, r24
 4a0:	c6 2f       	mov	r28, r22
 4a2:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 4a4:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 4a8:	48 2f       	mov	r20, r24
 4aa:	80 93 30 02 	sts	0x0230, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 4ae:	8d 2f       	mov	r24, r29
 4b0:	6c 2f       	mov	r22, r28
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	23 e0       	ldi	r18, 0x03	; 3
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 4c2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 4c6:	60 93 2a 01 	sts	0x012A, r22
}
 4ca:	08 95       	ret

000004cc <buzzer_pin_config>:
// ***************************************************************************************************

unsigned char data; //to store received data from UDR1
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 4cc:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 4ce:	43 98       	cbi	0x08, 3	; 8
}
 4d0:	08 95       	ret

000004d2 <motion_pin_config>:

void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
 4d2:	81 b1       	in	r24, 0x01	; 1
 4d4:	8f 60       	ori	r24, 0x0F	; 15
 4d6:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 4d8:	82 b1       	in	r24, 0x02	; 2
 4da:	80 7f       	andi	r24, 0xF0	; 240
 4dc:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 4de:	ea e0       	ldi	r30, 0x0A	; 10
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	80 81       	ld	r24, Z
 4e4:	88 61       	ori	r24, 0x18	; 24
 4e6:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 4e8:	eb e0       	ldi	r30, 0x0B	; 11
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	80 81       	ld	r24, Z
 4ee:	88 61       	ori	r24, 0x18	; 24
 4f0:	80 83       	st	Z, r24
}
 4f2:	08 95       	ret

000004f4 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
 4f4:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 4f6:	90 7f       	andi	r25, 0xF0	; 240

void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
 4f8:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 4fa:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
 4fc:	92 b9       	out	0x02, r25	; 2
}
 4fe:	08 95       	ret

00000500 <forward>:

void forward (void)
{
	motion_set (0x06);
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 506:	08 95       	ret

00000508 <stop>:

void stop (void)
{
	motion_set (0x00);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 50e:	08 95       	ret

00000510 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 516:	08 95       	ret

00000518 <port_init>:
}
*/
//Function to initialize ports
void port_init()
{
	lcd_port_config();
 518:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_port_config>
	adc_pin_config();
 51c:	0e 94 03 02 	call	0x406	; 0x406 <adc_pin_config>
	motion_pin_config();
 520:	0e 94 69 02 	call	0x4d2	; 0x4d2 <motion_pin_config>
	buzzer_pin_config();
 524:	0e 94 66 02 	call	0x4cc	; 0x4cc <buzzer_pin_config>
}
 528:	08 95       	ret

0000052a <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 52a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 52c:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 52e:	88 b9       	out	0x08, r24	; 8
}
 530:	08 95       	ret

00000532 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 532:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 534:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 536:	88 b9       	out	0x08, r24	; 8
}
 538:	08 95       	ret

0000053a <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 53a:	e1 ec       	ldi	r30, 0xC1	; 193
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 540:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 544:	86 e0       	ldi	r24, 0x06	; 6
 546:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 54a:	8f e5       	ldi	r24, 0x5F	; 95
 54c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 550:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 554:	88 e9       	ldi	r24, 0x98	; 152
 556:	80 83       	st	Z, r24
}
 558:	08 95       	ret

0000055a <pid_control>:

void pid_control (data)
{
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
		while(data != 0x20)
 560:	80 32       	cpi	r24, 0x20	; 32
 562:	91 05       	cpc	r25, r1
 564:	31 f1       	breq	.+76     	; 0x5b2 <pid_control+0x58>
		{
			data = UDR0;	//Echo back to zigbee
 566:	c6 ec       	ldi	r28, 0xC6	; 198
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	18 81       	ld	r17, Y
			UDR0 = data;
 56c:	18 83       	st	Y, r17
			
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 574:	80 93 2a 02 	sts	0x022A, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 57e:	80 93 29 02 	sts	0x0229, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 588:	80 93 28 02 	sts	0x0228, r24

			flag=0;
 58c:	10 92 2b 02 	sts	0x022B, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	43 e0       	ldi	r20, 0x03	; 3
 596:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	65 e0       	ldi	r22, 0x05	; 5
 59e:	42 e0       	ldi	r20, 0x02	; 2
 5a0:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	69 e0       	ldi	r22, 0x09	; 9
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
	UCSR0B = 0x98;
}

void pid_control (data)
{
		while(data != 0x20)
 5ae:	10 32       	cpi	r17, 0x20	; 32
 5b0:	e1 f6       	brne	.-72     	; 0x56a <pid_control+0x10>

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		}
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	08 95       	ret

000005ba <back_white_line>:

void back_white_line (data)
{
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
	while(data != 0x20) {
 5c0:	80 32       	cpi	r24, 0x20	; 32
 5c2:	91 05       	cpc	r25, r1
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <back_white_line+0xe>
 5c6:	68 c0       	rjmp	.+208    	; 0x698 <back_white_line+0xde>
			data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 5c8:	c6 ec       	ldi	r28, 0xC6	; 198
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	18 81       	ld	r17, Y

			UDR0 = data;
 5ce:	18 83       	st	Y, r17
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 5d0:	83 e0       	ldi	r24, 0x03	; 3
 5d2:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 5d6:	80 93 2a 02 	sts	0x022A, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 5e0:	80 93 29 02 	sts	0x0229, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 5ea:	80 93 28 02 	sts	0x0228, r24

		flag=0;
 5ee:	10 92 2b 02 	sts	0x022B, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	43 e0       	ldi	r20, 0x03	; 3
 5f8:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	65 e0       	ldi	r22, 0x05	; 5
 600:	42 e0       	ldi	r20, 0x02	; 2
 602:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	69 e0       	ldi	r22, 0x09	; 9
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>

		if(Center_white_line<0x28)	//40
 610:	80 91 29 02 	lds	r24, 0x0229
 614:	88 32       	cpi	r24, 0x28	; 40
 616:	48 f4       	brcc	.+18     	; 0x62a <back_white_line+0x70>
		{
			flag=1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 2b 02 	sts	0x022B, r24
			back();
 61e:	0e 94 88 02 	call	0x510	; 0x510 <back>
			velocity(150,150);
 622:	86 e9       	ldi	r24, 0x96	; 150
 624:	66 e9       	ldi	r22, 0x96	; 150
 626:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
		}

		if((Left_white_line>0x28) && (flag==0))
 62a:	80 91 2a 02 	lds	r24, 0x022A
 62e:	89 32       	cpi	r24, 0x29	; 41
 630:	68 f0       	brcs	.+26     	; 0x64c <back_white_line+0x92>
 632:	80 91 2b 02 	lds	r24, 0x022B
 636:	88 23       	and	r24, r24
 638:	49 f4       	brne	.+18     	; 0x64c <back_white_line+0x92>
		{
			flag=1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 2b 02 	sts	0x022B, r24
			back();
 640:	0e 94 88 02 	call	0x510	; 0x510 <back>
			velocity(50,130);
 644:	82 e3       	ldi	r24, 0x32	; 50
 646:	62 e8       	ldi	r22, 0x82	; 130
 648:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
		}

		if((Right_white_line>0x28) && (flag==0))
 64c:	80 91 28 02 	lds	r24, 0x0228
 650:	89 32       	cpi	r24, 0x29	; 41
 652:	68 f0       	brcs	.+26     	; 0x66e <back_white_line+0xb4>
 654:	80 91 2b 02 	lds	r24, 0x022B
 658:	88 23       	and	r24, r24
 65a:	49 f4       	brne	.+18     	; 0x66e <back_white_line+0xb4>
		{
			flag=1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 2b 02 	sts	0x022B, r24
			back();
 662:	0e 94 88 02 	call	0x510	; 0x510 <back>
			velocity(130,50);
 666:	82 e8       	ldi	r24, 0x82	; 130
 668:	62 e3       	ldi	r22, 0x32	; 50
 66a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
 66e:	80 91 29 02 	lds	r24, 0x0229
 672:	89 32       	cpi	r24, 0x29	; 41
 674:	70 f0       	brcs	.+28     	; 0x692 <back_white_line+0xd8>
 676:	80 91 2a 02 	lds	r24, 0x022A
 67a:	89 32       	cpi	r24, 0x29	; 41
 67c:	50 f0       	brcs	.+20     	; 0x692 <back_white_line+0xd8>
 67e:	80 91 28 02 	lds	r24, 0x0228
 682:	89 32       	cpi	r24, 0x29	; 41
 684:	30 f0       	brcs	.+12     	; 0x692 <back_white_line+0xd8>
		{
			forward();
 686:	0e 94 80 02 	call	0x500	; 0x500 <forward>
			velocity(0,0);
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
		}
}

void back_white_line (data)
{
	while(data != 0x20) {
 692:	10 32       	cpi	r17, 0x20	; 32
 694:	09 f0       	breq	.+2      	; 0x698 <back_white_line+0xde>
 696:	9a cf       	rjmp	.-204    	; 0x5cc <back_white_line+0x12>
		{
			forward();
			velocity(0,0);
		}
	}	
}
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	08 95       	ret

000006a0 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
	cli(); //Clears the global interrupts
 6a0:	f8 94       	cli
	port_init();  //Initializes all the ports
 6a2:	0e 94 8c 02 	call	0x518	; 0x518 <port_init>
	// uart0_init(); //Initailize UART1 for serial communiaction
	adc_init();
 6a6:	0e 94 25 02 	call	0x44a	; 0x44a <adc_init>
	lcd_init();
 6aa:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
	timer5_init();
 6ae:	0e 94 0a 02 	call	0x414	; 0x414 <timer5_init>
	sei();   //Enables the global interrupts
 6b2:	78 94       	sei
}
 6b4:	08 95       	ret

000006b6 <main>:


//Main Function
int main(void)
{
	init_devices();
 6b6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <init_devices>
	lcd_set_4bit();
 6ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 6be:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 6c8:	80 93 2a 02 	sts	0x022A, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 6d2:	80 93 29 02 	sts	0x0229, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 6dc:	80 93 28 02 	sts	0x0228, r24

		flag=0;
 6e0:	10 92 2b 02 	sts	0x022B, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	43 e0       	ldi	r20, 0x03	; 3
 6ea:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	65 e0       	ldi	r22, 0x05	; 5
 6f2:	42 e0       	ldi	r20, 0x02	; 2
 6f4:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	69 e0       	ldi	r22, 0x09	; 9
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		
		Setpoint = 0x28;
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e2       	ldi	r26, 0x20	; 32
 708:	b2 e4       	ldi	r27, 0x42	; 66
 70a:	80 93 24 02 	sts	0x0224, r24
 70e:	90 93 25 02 	sts	0x0225, r25
 712:	a0 93 26 02 	sts	0x0226, r26
 716:	b0 93 27 02 	sts	0x0227, r27
		
		if (Left_white_line < 0x28)
 71a:	30 90 2a 02 	lds	r3, 0x022A
 71e:	97 e2       	ldi	r25, 0x27	; 39
 720:	93 15       	cp	r25, r3
 722:	88 f0       	brcs	.+34     	; 0x746 <main+0x90>
		{
			Processedvar = Left_white_line;
 724:	63 2d       	mov	r22, r3
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatunsisf>
 730:	dc 01       	movw	r26, r24
 732:	cb 01       	movw	r24, r22
 734:	80 93 1c 02 	sts	0x021C, r24
 738:	90 93 1d 02 	sts	0x021D, r25
 73c:	a0 93 1e 02 	sts	0x021E, r26
 740:	b0 93 1f 02 	sts	0x021F, r27
 744:	11 c0       	rjmp	.+34     	; 0x768 <main+0xb2>
		}
		else
		{
			Processedvar = Right_white_line;
 746:	60 91 28 02 	lds	r22, 0x0228
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 46 05 	call	0xa8c	; 0xa8c <__floatunsisf>
 754:	dc 01       	movw	r26, r24
 756:	cb 01       	movw	r24, r22
 758:	80 93 1c 02 	sts	0x021C, r24
 75c:	90 93 1d 02 	sts	0x021D, r25
 760:	a0 93 1e 02 	sts	0x021E, r26
 764:	b0 93 1f 02 	sts	0x021F, r27
		}
		error = Setpoint - Processedvar;
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	92 e4       	ldi	r25, 0x42	; 66
 770:	20 91 1c 02 	lds	r18, 0x021C
 774:	30 91 1d 02 	lds	r19, 0x021D
 778:	40 91 1e 02 	lds	r20, 0x021E
 77c:	50 91 1f 02 	lds	r21, 0x021F
 780:	0e 94 b5 04 	call	0x96a	; 0x96a <__subsf3>
 784:	16 2f       	mov	r17, r22
 786:	d7 2f       	mov	r29, r23
 788:	c8 2f       	mov	r28, r24
 78a:	c9 2e       	mov	r12, r25
 78c:	86 2f       	mov	r24, r22
 78e:	9d 2f       	mov	r25, r29
 790:	ac 2f       	mov	r26, r28
 792:	bc 2d       	mov	r27, r12
 794:	80 93 20 02 	sts	0x0220, r24
 798:	90 93 21 02 	sts	0x0221, r25
 79c:	a0 93 22 02 	sts	0x0222, r26
 7a0:	b0 93 23 02 	sts	0x0223, r27
		integral += error;
 7a4:	bc 01       	movw	r22, r24
 7a6:	cd 01       	movw	r24, r26
 7a8:	20 91 14 02 	lds	r18, 0x0214
 7ac:	30 91 15 02 	lds	r19, 0x0215
 7b0:	40 91 16 02 	lds	r20, 0x0216
 7b4:	50 91 17 02 	lds	r21, 0x0217
 7b8:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3>
 7bc:	f6 2e       	mov	r15, r22
 7be:	07 2f       	mov	r16, r23
 7c0:	e8 2e       	mov	r14, r24
 7c2:	d9 2e       	mov	r13, r25
 7c4:	86 2f       	mov	r24, r22
 7c6:	90 2f       	mov	r25, r16
 7c8:	ae 2d       	mov	r26, r14
 7ca:	bd 2d       	mov	r27, r13
 7cc:	80 93 14 02 	sts	0x0214, r24
 7d0:	90 93 15 02 	sts	0x0215, r25
 7d4:	a0 93 16 02 	sts	0x0216, r26
 7d8:	b0 93 17 02 	sts	0x0217, r27
		derivative = -lasterror+error;
 7dc:	81 2f       	mov	r24, r17
 7de:	9d 2f       	mov	r25, r29
 7e0:	ac 2f       	mov	r26, r28
 7e2:	bc 2d       	mov	r27, r12
 7e4:	bc 01       	movw	r22, r24
 7e6:	cd 01       	movw	r24, r26
 7e8:	20 91 0c 02 	lds	r18, 0x020C
 7ec:	30 91 0d 02 	lds	r19, 0x020D
 7f0:	40 91 0e 02 	lds	r20, 0x020E
 7f4:	50 91 0f 02 	lds	r21, 0x020F
 7f8:	0e 94 b5 04 	call	0x96a	; 0x96a <__subsf3>
 7fc:	76 2e       	mov	r7, r22
 7fe:	67 2e       	mov	r6, r23
 800:	58 2e       	mov	r5, r24
 802:	49 2e       	mov	r4, r25
 804:	86 2f       	mov	r24, r22
 806:	96 2d       	mov	r25, r6
 808:	a5 2d       	mov	r26, r5
 80a:	b4 2d       	mov	r27, r4
 80c:	80 93 10 02 	sts	0x0210, r24
 810:	90 93 11 02 	sts	0x0211, r25
 814:	a0 93 12 02 	sts	0x0212, r26
 818:	b0 93 13 02 	sts	0x0213, r27
		lasterror = error;
 81c:	81 2f       	mov	r24, r17
 81e:	9d 2f       	mov	r25, r29
 820:	ac 2f       	mov	r26, r28
 822:	bc 2d       	mov	r27, r12
 824:	80 93 0c 02 	sts	0x020C, r24
 828:	90 93 0d 02 	sts	0x020D, r25
 82c:	a0 93 0e 02 	sts	0x020E, r26
 830:	b0 93 0f 02 	sts	0x020F, r27
		
		
		PID = kp * error + ki * integral + kd * derivative;
 834:	bc 01       	movw	r22, r24
 836:	cd 01       	movw	r24, r26
 838:	20 91 08 02 	lds	r18, 0x0208
 83c:	30 91 09 02 	lds	r19, 0x0209
 840:	40 91 0a 02 	lds	r20, 0x020A
 844:	50 91 0b 02 	lds	r21, 0x020B
 848:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 84c:	4b 01       	movw	r8, r22
 84e:	5c 01       	movw	r10, r24
 850:	8f 2d       	mov	r24, r15
 852:	90 2f       	mov	r25, r16
 854:	ae 2d       	mov	r26, r14
 856:	bd 2d       	mov	r27, r13
 858:	bc 01       	movw	r22, r24
 85a:	cd 01       	movw	r24, r26
 85c:	20 91 04 02 	lds	r18, 0x0204
 860:	30 91 05 02 	lds	r19, 0x0205
 864:	40 91 06 02 	lds	r20, 0x0206
 868:	50 91 07 02 	lds	r21, 0x0207
 86c:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 870:	9b 01       	movw	r18, r22
 872:	ac 01       	movw	r20, r24
 874:	c5 01       	movw	r24, r10
 876:	b4 01       	movw	r22, r8
 878:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3>
 87c:	6b 01       	movw	r12, r22
 87e:	7c 01       	movw	r14, r24
 880:	87 2d       	mov	r24, r7
 882:	96 2d       	mov	r25, r6
 884:	a5 2d       	mov	r26, r5
 886:	b4 2d       	mov	r27, r4
 888:	bc 01       	movw	r22, r24
 88a:	cd 01       	movw	r24, r26
 88c:	20 91 00 02 	lds	r18, 0x0200
 890:	30 91 01 02 	lds	r19, 0x0201
 894:	40 91 02 02 	lds	r20, 0x0202
 898:	50 91 03 02 	lds	r21, 0x0203
 89c:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 8a0:	9b 01       	movw	r18, r22
 8a2:	ac 01       	movw	r20, r24
 8a4:	c7 01       	movw	r24, r14
 8a6:	b6 01       	movw	r22, r12
 8a8:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3>
 8ac:	dc 01       	movw	r26, r24
 8ae:	cb 01       	movw	r24, r22
 8b0:	80 93 18 02 	sts	0x0218, r24
 8b4:	90 93 19 02 	sts	0x0219, r25
 8b8:	a0 93 1a 02 	sts	0x021A, r26
 8bc:	b0 93 1b 02 	sts	0x021B, r27
		
		if(Left_white_line < 0x28)
 8c0:	a7 e2       	ldi	r26, 0x27	; 39
 8c2:	a3 15       	cp	r26, r3
 8c4:	48 f1       	brcs	.+82     	; 0x918 <main+0x262>
		{
			forward();
 8c6:	0e 94 80 02 	call	0x500	; 0x500 <forward>
			velocity(200+PID, 200-PID);
 8ca:	c0 90 18 02 	lds	r12, 0x0218
 8ce:	d0 90 19 02 	lds	r13, 0x0219
 8d2:	e0 90 1a 02 	lds	r14, 0x021A
 8d6:	f0 90 1b 02 	lds	r15, 0x021B
 8da:	c7 01       	movw	r24, r14
 8dc:	b6 01       	movw	r22, r12
 8de:	20 e0       	ldi	r18, 0x00	; 0
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	48 e4       	ldi	r20, 0x48	; 72
 8e4:	53 e4       	ldi	r21, 0x43	; 67
 8e6:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3>
 8ea:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 8ee:	c6 2f       	mov	r28, r22
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	88 e4       	ldi	r24, 0x48	; 72
 8f6:	93 e4       	ldi	r25, 0x43	; 67
 8f8:	a7 01       	movw	r20, r14
 8fa:	96 01       	movw	r18, r12
 8fc:	0e 94 b5 04 	call	0x96a	; 0x96a <__subsf3>
 900:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 904:	8c 2f       	mov	r24, r28
 906:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
 90a:	87 ea       	ldi	r24, 0xA7	; 167
 90c:	91 e6       	ldi	r25, 0x61	; 97
 90e:	01 97       	sbiw	r24, 0x01	; 1
 910:	f1 f7       	brne	.-4      	; 0x90e <main+0x258>
 912:	00 c0       	rjmp	.+0      	; 0x914 <main+0x25e>
 914:	00 00       	nop
 916:	d5 ce       	rjmp	.-598    	; 0x6c2 <main+0xc>
			_delay_ms(100);
		}
		else
		{
			forward();
 918:	0e 94 80 02 	call	0x500	; 0x500 <forward>
			velocity(200-PID, 200+PID);
 91c:	c0 90 18 02 	lds	r12, 0x0218
 920:	d0 90 19 02 	lds	r13, 0x0219
 924:	e0 90 1a 02 	lds	r14, 0x021A
 928:	f0 90 1b 02 	lds	r15, 0x021B
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	88 e4       	ldi	r24, 0x48	; 72
 932:	93 e4       	ldi	r25, 0x43	; 67
 934:	a7 01       	movw	r20, r14
 936:	96 01       	movw	r18, r12
 938:	0e 94 b5 04 	call	0x96a	; 0x96a <__subsf3>
 93c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 940:	c6 2f       	mov	r28, r22
 942:	c7 01       	movw	r24, r14
 944:	b6 01       	movw	r22, r12
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	48 e4       	ldi	r20, 0x48	; 72
 94c:	53 e4       	ldi	r21, 0x43	; 67
 94e:	0e 94 b6 04 	call	0x96c	; 0x96c <__addsf3>
 952:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 956:	8c 2f       	mov	r24, r28
 958:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
 95c:	a7 ea       	ldi	r26, 0xA7	; 167
 95e:	b1 e6       	ldi	r27, 0x61	; 97
 960:	11 97       	sbiw	r26, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <main+0x2aa>
 964:	00 c0       	rjmp	.+0      	; 0x966 <main+0x2b0>
 966:	00 00       	nop
 968:	ac ce       	rjmp	.-680    	; 0x6c2 <main+0xc>

0000096a <__subsf3>:
 96a:	50 58       	subi	r21, 0x80	; 128

0000096c <__addsf3>:
 96c:	bb 27       	eor	r27, r27
 96e:	aa 27       	eor	r26, r26
 970:	0e d0       	rcall	.+28     	; 0x98e <__addsf3x>
 972:	e0 c0       	rjmp	.+448    	; 0xb34 <__fp_round>
 974:	d1 d0       	rcall	.+418    	; 0xb18 <__fp_pscA>
 976:	30 f0       	brcs	.+12     	; 0x984 <__addsf3+0x18>
 978:	d6 d0       	rcall	.+428    	; 0xb26 <__fp_pscB>
 97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3+0x18>
 97c:	31 f4       	brne	.+12     	; 0x98a <__addsf3+0x1e>
 97e:	9f 3f       	cpi	r25, 0xFF	; 255
 980:	11 f4       	brne	.+4      	; 0x986 <__addsf3+0x1a>
 982:	1e f4       	brtc	.+6      	; 0x98a <__addsf3+0x1e>
 984:	c6 c0       	rjmp	.+396    	; 0xb12 <__fp_nan>
 986:	0e f4       	brtc	.+2      	; 0x98a <__addsf3+0x1e>
 988:	e0 95       	com	r30
 98a:	e7 fb       	bst	r30, 7
 98c:	bc c0       	rjmp	.+376    	; 0xb06 <__fp_inf>

0000098e <__addsf3x>:
 98e:	e9 2f       	mov	r30, r25
 990:	e2 d0       	rcall	.+452    	; 0xb56 <__fp_split3>
 992:	80 f3       	brcs	.-32     	; 0x974 <__addsf3+0x8>
 994:	ba 17       	cp	r27, r26
 996:	62 07       	cpc	r22, r18
 998:	73 07       	cpc	r23, r19
 99a:	84 07       	cpc	r24, r20
 99c:	95 07       	cpc	r25, r21
 99e:	18 f0       	brcs	.+6      	; 0x9a6 <__addsf3x+0x18>
 9a0:	71 f4       	brne	.+28     	; 0x9be <__addsf3x+0x30>
 9a2:	9e f5       	brtc	.+102    	; 0xa0a <__addsf3x+0x7c>
 9a4:	fa c0       	rjmp	.+500    	; 0xb9a <__fp_zero>
 9a6:	0e f4       	brtc	.+2      	; 0x9aa <__addsf3x+0x1c>
 9a8:	e0 95       	com	r30
 9aa:	0b 2e       	mov	r0, r27
 9ac:	ba 2f       	mov	r27, r26
 9ae:	a0 2d       	mov	r26, r0
 9b0:	0b 01       	movw	r0, r22
 9b2:	b9 01       	movw	r22, r18
 9b4:	90 01       	movw	r18, r0
 9b6:	0c 01       	movw	r0, r24
 9b8:	ca 01       	movw	r24, r20
 9ba:	a0 01       	movw	r20, r0
 9bc:	11 24       	eor	r1, r1
 9be:	ff 27       	eor	r31, r31
 9c0:	59 1b       	sub	r21, r25
 9c2:	99 f0       	breq	.+38     	; 0x9ea <__addsf3x+0x5c>
 9c4:	59 3f       	cpi	r21, 0xF9	; 249
 9c6:	50 f4       	brcc	.+20     	; 0x9dc <__addsf3x+0x4e>
 9c8:	50 3e       	cpi	r21, 0xE0	; 224
 9ca:	68 f1       	brcs	.+90     	; 0xa26 <__addsf3x+0x98>
 9cc:	1a 16       	cp	r1, r26
 9ce:	f0 40       	sbci	r31, 0x00	; 0
 9d0:	a2 2f       	mov	r26, r18
 9d2:	23 2f       	mov	r18, r19
 9d4:	34 2f       	mov	r19, r20
 9d6:	44 27       	eor	r20, r20
 9d8:	58 5f       	subi	r21, 0xF8	; 248
 9da:	f3 cf       	rjmp	.-26     	; 0x9c2 <__addsf3x+0x34>
 9dc:	46 95       	lsr	r20
 9de:	37 95       	ror	r19
 9e0:	27 95       	ror	r18
 9e2:	a7 95       	ror	r26
 9e4:	f0 40       	sbci	r31, 0x00	; 0
 9e6:	53 95       	inc	r21
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__addsf3x+0x4e>
 9ea:	7e f4       	brtc	.+30     	; 0xa0a <__addsf3x+0x7c>
 9ec:	1f 16       	cp	r1, r31
 9ee:	ba 0b       	sbc	r27, r26
 9f0:	62 0b       	sbc	r22, r18
 9f2:	73 0b       	sbc	r23, r19
 9f4:	84 0b       	sbc	r24, r20
 9f6:	ba f0       	brmi	.+46     	; 0xa26 <__addsf3x+0x98>
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	a1 f0       	breq	.+40     	; 0xa24 <__addsf3x+0x96>
 9fc:	ff 0f       	add	r31, r31
 9fe:	bb 1f       	adc	r27, r27
 a00:	66 1f       	adc	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	c2 f7       	brpl	.-16     	; 0x9f8 <__addsf3x+0x6a>
 a08:	0e c0       	rjmp	.+28     	; 0xa26 <__addsf3x+0x98>
 a0a:	ba 0f       	add	r27, r26
 a0c:	62 1f       	adc	r22, r18
 a0e:	73 1f       	adc	r23, r19
 a10:	84 1f       	adc	r24, r20
 a12:	48 f4       	brcc	.+18     	; 0xa26 <__addsf3x+0x98>
 a14:	87 95       	ror	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f7 95       	ror	r31
 a1e:	9e 3f       	cpi	r25, 0xFE	; 254
 a20:	08 f0       	brcs	.+2      	; 0xa24 <__addsf3x+0x96>
 a22:	b3 cf       	rjmp	.-154    	; 0x98a <__addsf3+0x1e>
 a24:	93 95       	inc	r25
 a26:	88 0f       	add	r24, r24
 a28:	08 f0       	brcs	.+2      	; 0xa2c <__addsf3x+0x9e>
 a2a:	99 27       	eor	r25, r25
 a2c:	ee 0f       	add	r30, r30
 a2e:	97 95       	ror	r25
 a30:	87 95       	ror	r24
 a32:	08 95       	ret

00000a34 <__fixunssfsi>:
 a34:	98 d0       	rcall	.+304    	; 0xb66 <__fp_splitA>
 a36:	88 f0       	brcs	.+34     	; 0xa5a <__fixunssfsi+0x26>
 a38:	9f 57       	subi	r25, 0x7F	; 127
 a3a:	90 f0       	brcs	.+36     	; 0xa60 <__fixunssfsi+0x2c>
 a3c:	b9 2f       	mov	r27, r25
 a3e:	99 27       	eor	r25, r25
 a40:	b7 51       	subi	r27, 0x17	; 23
 a42:	a0 f0       	brcs	.+40     	; 0xa6c <__fixunssfsi+0x38>
 a44:	d1 f0       	breq	.+52     	; 0xa7a <__fixunssfsi+0x46>
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a f0       	brmi	.+6      	; 0xa56 <__fixunssfsi+0x22>
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__fixunssfsi+0x12>
 a54:	12 c0       	rjmp	.+36     	; 0xa7a <__fixunssfsi+0x46>
 a56:	b1 30       	cpi	r27, 0x01	; 1
 a58:	81 f0       	breq	.+32     	; 0xa7a <__fixunssfsi+0x46>
 a5a:	9f d0       	rcall	.+318    	; 0xb9a <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	9c c0       	rjmp	.+312    	; 0xb9a <__fp_zero>
 a62:	67 2f       	mov	r22, r23
 a64:	78 2f       	mov	r23, r24
 a66:	88 27       	eor	r24, r24
 a68:	b8 5f       	subi	r27, 0xF8	; 248
 a6a:	39 f0       	breq	.+14     	; 0xa7a <__fixunssfsi+0x46>
 a6c:	b9 3f       	cpi	r27, 0xF9	; 249
 a6e:	cc f3       	brlt	.-14     	; 0xa62 <__fixunssfsi+0x2e>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b3 95       	inc	r27
 a78:	d9 f7       	brne	.-10     	; 0xa70 <__fixunssfsi+0x3c>
 a7a:	3e f4       	brtc	.+14     	; 0xa8a <__fixunssfsi+0x56>
 a7c:	90 95       	com	r25
 a7e:	80 95       	com	r24
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__floatunsisf>:
 a8c:	e8 94       	clt
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__floatsisf+0x12>

00000a90 <__floatsisf>:
 a90:	97 fb       	bst	r25, 7
 a92:	3e f4       	brtc	.+14     	; 0xaa2 <__floatsisf+0x12>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	99 23       	and	r25, r25
 aa4:	a9 f0       	breq	.+42     	; 0xad0 <__floatsisf+0x40>
 aa6:	f9 2f       	mov	r31, r25
 aa8:	96 e9       	ldi	r25, 0x96	; 150
 aaa:	bb 27       	eor	r27, r27
 aac:	93 95       	inc	r25
 aae:	f6 95       	lsr	r31
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f1 11       	cpse	r31, r1
 aba:	f8 cf       	rjmp	.-16     	; 0xaac <__floatsisf+0x1c>
 abc:	fa f4       	brpl	.+62     	; 0xafc <__floatsisf+0x6c>
 abe:	bb 0f       	add	r27, r27
 ac0:	11 f4       	brne	.+4      	; 0xac6 <__floatsisf+0x36>
 ac2:	60 ff       	sbrs	r22, 0
 ac4:	1b c0       	rjmp	.+54     	; 0xafc <__floatsisf+0x6c>
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	16 c0       	rjmp	.+44     	; 0xafc <__floatsisf+0x6c>
 ad0:	88 23       	and	r24, r24
 ad2:	11 f0       	breq	.+4      	; 0xad8 <__floatsisf+0x48>
 ad4:	96 e9       	ldi	r25, 0x96	; 150
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <__floatsisf+0x6a>
 ad8:	77 23       	and	r23, r23
 ada:	21 f0       	breq	.+8      	; 0xae4 <__floatsisf+0x54>
 adc:	9e e8       	ldi	r25, 0x8E	; 142
 ade:	87 2f       	mov	r24, r23
 ae0:	76 2f       	mov	r23, r22
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <__floatsisf+0x5e>
 ae4:	66 23       	and	r22, r22
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__floatsisf+0x74>
 ae8:	96 e8       	ldi	r25, 0x86	; 134
 aea:	86 2f       	mov	r24, r22
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	2a f0       	brmi	.+10     	; 0xafc <__floatsisf+0x6c>
 af2:	9a 95       	dec	r25
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	da f7       	brpl	.-10     	; 0xaf2 <__floatsisf+0x62>
 afc:	88 0f       	add	r24, r24
 afe:	96 95       	lsr	r25
 b00:	87 95       	ror	r24
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret

00000b06 <__fp_inf>:
 b06:	97 f9       	bld	r25, 7
 b08:	9f 67       	ori	r25, 0x7F	; 127
 b0a:	80 e8       	ldi	r24, 0x80	; 128
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	08 95       	ret

00000b12 <__fp_nan>:
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	80 ec       	ldi	r24, 0xC0	; 192
 b16:	08 95       	ret

00000b18 <__fp_pscA>:
 b18:	00 24       	eor	r0, r0
 b1a:	0a 94       	dec	r0
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	09 06       	cpc	r0, r25
 b24:	08 95       	ret

00000b26 <__fp_pscB>:
 b26:	00 24       	eor	r0, r0
 b28:	0a 94       	dec	r0
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	14 06       	cpc	r1, r20
 b30:	05 06       	cpc	r0, r21
 b32:	08 95       	ret

00000b34 <__fp_round>:
 b34:	09 2e       	mov	r0, r25
 b36:	03 94       	inc	r0
 b38:	00 0c       	add	r0, r0
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0xc>
 b3c:	88 23       	and	r24, r24
 b3e:	52 f0       	brmi	.+20     	; 0xb54 <__fp_round+0x20>
 b40:	bb 0f       	add	r27, r27
 b42:	40 f4       	brcc	.+16     	; 0xb54 <__fp_round+0x20>
 b44:	bf 2b       	or	r27, r31
 b46:	11 f4       	brne	.+4      	; 0xb4c <__fp_round+0x18>
 b48:	60 ff       	sbrs	r22, 0
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__fp_round+0x20>
 b4c:	6f 5f       	subi	r22, 0xFF	; 255
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__fp_split3>:
 b56:	57 fd       	sbrc	r21, 7
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
 b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
 b66:	88 0f       	add	r24, r24
 b68:	97 fb       	bst	r25, 7
 b6a:	99 1f       	adc	r25, r25
 b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
 b72:	87 95       	ror	r24
 b74:	08 95       	ret
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
 b80:	46 95       	lsr	r20
 b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
 b90:	86 95       	lsr	r24
 b92:	71 05       	cpc	r23, r1
 b94:	61 05       	cpc	r22, r1
 b96:	08 94       	sec
 b98:	08 95       	ret

00000b9a <__fp_zero>:
 b9a:	e8 94       	clt

00000b9c <__fp_szero>:
 b9c:	bb 27       	eor	r27, r27
 b9e:	66 27       	eor	r22, r22
 ba0:	77 27       	eor	r23, r23
 ba2:	cb 01       	movw	r24, r22
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__mulsf3>:
 ba8:	0b d0       	rcall	.+22     	; 0xbc0 <__mulsf3x>
 baa:	c4 cf       	rjmp	.-120    	; 0xb34 <__fp_round>
 bac:	b5 df       	rcall	.-150    	; 0xb18 <__fp_pscA>
 bae:	28 f0       	brcs	.+10     	; 0xbba <__mulsf3+0x12>
 bb0:	ba df       	rcall	.-140    	; 0xb26 <__fp_pscB>
 bb2:	18 f0       	brcs	.+6      	; 0xbba <__mulsf3+0x12>
 bb4:	95 23       	and	r25, r21
 bb6:	09 f0       	breq	.+2      	; 0xbba <__mulsf3+0x12>
 bb8:	a6 cf       	rjmp	.-180    	; 0xb06 <__fp_inf>
 bba:	ab cf       	rjmp	.-170    	; 0xb12 <__fp_nan>
 bbc:	11 24       	eor	r1, r1
 bbe:	ee cf       	rjmp	.-36     	; 0xb9c <__fp_szero>

00000bc0 <__mulsf3x>:
 bc0:	ca df       	rcall	.-108    	; 0xb56 <__fp_split3>
 bc2:	a0 f3       	brcs	.-24     	; 0xbac <__mulsf3+0x4>

00000bc4 <__mulsf3_pse>:
 bc4:	95 9f       	mul	r25, r21
 bc6:	d1 f3       	breq	.-12     	; 0xbbc <__mulsf3+0x14>
 bc8:	95 0f       	add	r25, r21
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	55 1f       	adc	r21, r21
 bce:	62 9f       	mul	r22, r18
 bd0:	f0 01       	movw	r30, r0
 bd2:	72 9f       	mul	r23, r18
 bd4:	bb 27       	eor	r27, r27
 bd6:	f0 0d       	add	r31, r0
 bd8:	b1 1d       	adc	r27, r1
 bda:	63 9f       	mul	r22, r19
 bdc:	aa 27       	eor	r26, r26
 bde:	f0 0d       	add	r31, r0
 be0:	b1 1d       	adc	r27, r1
 be2:	aa 1f       	adc	r26, r26
 be4:	64 9f       	mul	r22, r20
 be6:	66 27       	eor	r22, r22
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	66 1f       	adc	r22, r22
 bee:	82 9f       	mul	r24, r18
 bf0:	22 27       	eor	r18, r18
 bf2:	b0 0d       	add	r27, r0
 bf4:	a1 1d       	adc	r26, r1
 bf6:	62 1f       	adc	r22, r18
 bf8:	73 9f       	mul	r23, r19
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	62 1f       	adc	r22, r18
 c00:	83 9f       	mul	r24, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	22 1f       	adc	r18, r18
 c08:	74 9f       	mul	r23, r20
 c0a:	33 27       	eor	r19, r19
 c0c:	a0 0d       	add	r26, r0
 c0e:	61 1d       	adc	r22, r1
 c10:	23 1f       	adc	r18, r19
 c12:	84 9f       	mul	r24, r20
 c14:	60 0d       	add	r22, r0
 c16:	21 1d       	adc	r18, r1
 c18:	82 2f       	mov	r24, r18
 c1a:	76 2f       	mov	r23, r22
 c1c:	6a 2f       	mov	r22, r26
 c1e:	11 24       	eor	r1, r1
 c20:	9f 57       	subi	r25, 0x7F	; 127
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	8a f0       	brmi	.+34     	; 0xc48 <__mulsf3_pse+0x84>
 c26:	e1 f0       	breq	.+56     	; 0xc60 <__mulsf3_pse+0x9c>
 c28:	88 23       	and	r24, r24
 c2a:	4a f0       	brmi	.+18     	; 0xc3e <__mulsf3_pse+0x7a>
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	bb 1f       	adc	r27, r27
 c32:	66 1f       	adc	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	91 50       	subi	r25, 0x01	; 1
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__mulsf3_pse+0x64>
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	51 05       	cpc	r21, r1
 c42:	70 f0       	brcs	.+28     	; 0xc60 <__mulsf3_pse+0x9c>
 c44:	60 cf       	rjmp	.-320    	; 0xb06 <__fp_inf>
 c46:	aa cf       	rjmp	.-172    	; 0xb9c <__fp_szero>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	ec f3       	brlt	.-6      	; 0xc46 <__mulsf3_pse+0x82>
 c4c:	98 3e       	cpi	r25, 0xE8	; 232
 c4e:	dc f3       	brlt	.-10     	; 0xc46 <__mulsf3_pse+0x82>
 c50:	86 95       	lsr	r24
 c52:	77 95       	ror	r23
 c54:	67 95       	ror	r22
 c56:	b7 95       	ror	r27
 c58:	f7 95       	ror	r31
 c5a:	e7 95       	ror	r30
 c5c:	9f 5f       	subi	r25, 0xFF	; 255
 c5e:	c1 f7       	brne	.-16     	; 0xc50 <__mulsf3_pse+0x8c>
 c60:	fe 2b       	or	r31, r30
 c62:	88 0f       	add	r24, r24
 c64:	91 1d       	adc	r25, r1
 c66:	96 95       	lsr	r25
 c68:	87 95       	ror	r24
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <__udivmodhi4>:
 c6e:	aa 1b       	sub	r26, r26
 c70:	bb 1b       	sub	r27, r27
 c72:	51 e1       	ldi	r21, 0x11	; 17
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <__udivmodhi4_ep>

00000c76 <__udivmodhi4_loop>:
 c76:	aa 1f       	adc	r26, r26
 c78:	bb 1f       	adc	r27, r27
 c7a:	a6 17       	cp	r26, r22
 c7c:	b7 07       	cpc	r27, r23
 c7e:	10 f0       	brcs	.+4      	; 0xc84 <__udivmodhi4_ep>
 c80:	a6 1b       	sub	r26, r22
 c82:	b7 0b       	sbc	r27, r23

00000c84 <__udivmodhi4_ep>:
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	5a 95       	dec	r21
 c8a:	a9 f7       	brne	.-22     	; 0xc76 <__udivmodhi4_loop>
 c8c:	80 95       	com	r24
 c8e:	90 95       	com	r25
 c90:	bc 01       	movw	r22, r24
 c92:	cd 01       	movw	r24, r26
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
