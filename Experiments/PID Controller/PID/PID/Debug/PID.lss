
PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000f2c  00000fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800210  00800210  00000fd0  2**0
                  ALLOC
  3 .stab         00001e30  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000645  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003448  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebe  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a4  00000000  00000000  000043a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a6  00000000  00000000  0000464a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00004bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000528  00000000  00000000  0000519e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 34       	cpi	r26, 0x43	; 67
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <main>
 122:	0c 94 94 07 	jmp	0xf28	; 0xf28 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_set_4bit+0xa>
 134:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 136:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 138:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	e1 ee       	ldi	r30, 0xE1	; 225
 142:	f4 e0       	ldi	r31, 0x04	; 4
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x20>
 14a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14c:	42 98       	cbi	0x08, 2	; 8
 14e:	e9 ef       	ldi	r30, 0xF9	; 249
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_set_4bit+0x2e>
 158:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 15c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	e1 ee       	ldi	r30, 0xE1	; 225
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_set_4bit+0x3c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_set_4bit+0x42>
 16c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16e:	42 98       	cbi	0x08, 2	; 8
 170:	e9 ef       	ldi	r30, 0xF9	; 249
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x4a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_set_4bit+0x50>
 17a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 17e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 182:	42 9a       	sbi	0x08, 2	; 8
 184:	81 ee       	ldi	r24, 0xE1	; 225
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_set_4bit+0x5e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_set_4bit+0x64>
 18e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 190:	42 98       	cbi	0x08, 2	; 8
 192:	e9 ef       	ldi	r30, 0xF9	; 249
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x6c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x72>
 19c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1a6:	42 9a       	sbi	0x08, 2	; 8
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_set_4bit+0x88>
 1b2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b4:	42 98       	cbi	0x08, 2	; 8

	
}
 1b6:	08 95       	ret

000001b8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1be:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1c0:	28 2f       	mov	r18, r24
 1c2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1c4:	92 2b       	or	r25, r18
 1c6:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	e1 ee       	ldi	r30, 0xE1	; 225
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_wr_command+0x1a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_wr_command+0x20>
 1d8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1da:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1e2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e8:	89 2b       	or	r24, r25
 1ea:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1f0:	42 9a       	sbi	0x08, 2	; 8
 1f2:	81 ee       	ldi	r24, 0xE1	; 225
 1f4:	94 e0       	ldi	r25, 0x04	; 4
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_wr_command+0x3e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_wr_command+0x44>
 1fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1fe:	42 98       	cbi	0x08, 2	; 8
}
 200:	08 95       	ret

00000202 <lcd_init>:
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_init+0xa>
 20c:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x01);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x06);
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x0E);
 220:	8e e0       	ldi	r24, 0x0E	; 14
 222:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	lcd_wr_command(0x80);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
	
}
 22c:	08 95       	ret

0000022e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 22e:	98 b1       	in	r25, 0x08	; 8
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 234:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 236:	28 2f       	mov	r18, r24
 238:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 23a:	92 2b       	or	r25, r18
 23c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 23e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 240:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 242:	42 9a       	sbi	0x08, 2	; 8
 244:	e1 ee       	ldi	r30, 0xE1	; 225
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_wr_char+0x1a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_wr_char+0x20>
 24e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 250:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 252:	98 b1       	in	r25, 0x08	; 8
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 258:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 25a:	82 95       	swap	r24
 25c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 25e:	89 2b       	or	r24, r25
 260:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 262:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 264:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 266:	42 9a       	sbi	0x08, 2	; 8
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	94 e0       	ldi	r25, 0x04	; 4
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_wr_char+0x3e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_wr_char+0x44>
 272:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 274:	42 98       	cbi	0x08, 2	; 8
}
 276:	08 95       	ret

00000278 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
}
 27e:	08 95       	ret

00000280 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
	while(*str != '\0')
 286:	88 81       	ld	r24, Y
 288:	88 23       	and	r24, r24
 28a:	31 f0       	breq	.+12     	; 0x298 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
 28c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 28e:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
 292:	89 91       	ld	r24, Y+
 294:	88 23       	and	r24, r24
 296:	d9 f7       	brne	.-10     	; 0x28e <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	79 f0       	breq	.+30     	; 0x2c0 <lcd_cursor+0x22>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <lcd_cursor+0xe>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	c9 f4       	brne	.+50     	; 0x2dc <lcd_cursor+0x3e>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <lcd_cursor+0x18>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	69 f0       	breq	.+26     	; 0x2ca <lcd_cursor+0x2c>
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	a1 f4       	brne	.+40     	; 0x2dc <lcd_cursor+0x3e>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b6:	86 2f       	mov	r24, r22
 2b8:	81 58       	subi	r24, 0x81	; 129
 2ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2be:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2c0:	86 2f       	mov	r24, r22
 2c2:	81 54       	subi	r24, 0x41	; 65
 2c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2c8:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2ca:	86 2f       	mov	r24, r22
 2cc:	8d 56       	subi	r24, 0x6D	; 109
 2ce:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2d2:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2d4:	86 2f       	mov	r24, r22
 2d6:	8d 52       	subi	r24, 0x2D	; 45
 2d8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_wr_command>
 2dc:	08 95       	ret

000002de <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	8a 01       	movw	r16, r20
 2e8:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2ea:	88 23       	and	r24, r24
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <lcd_print+0x14>
 2ee:	66 23       	and	r22, r22
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <lcd_print+0x1a>
	{
		lcd_home();
 2f2:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_home>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2fc:	c5 30       	cpi	r28, 0x05	; 5
 2fe:	d1 05       	cpc	r29, r1
 300:	71 f4       	brne	.+28     	; 0x31e <lcd_print+0x40>
	{
		million=value/10000+48;
 302:	c8 01       	movw	r24, r16
 304:	60 e1       	ldi	r22, 0x10	; 16
 306:	77 e2       	ldi	r23, 0x27	; 39
 308:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 30c:	cb 01       	movw	r24, r22
 30e:	c0 96       	adiw	r24, 0x30	; 48
 310:	90 93 31 02 	sts	0x0231, r25
 314:	80 93 30 02 	sts	0x0230, r24
		lcd_wr_char(million);
 318:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 31e:	c4 30       	cpi	r28, 0x04	; 4
 320:	d1 05       	cpc	r29, r1
 322:	b9 f4       	brne	.+46     	; 0x352 <lcd_print+0x74>
	{
		temp = value/1000;
 324:	c8 01       	movw	r24, r16
 326:	68 ee       	ldi	r22, 0xE8	; 232
 328:	73 e0       	ldi	r23, 0x03	; 3
 32a:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 32e:	cb 01       	movw	r24, r22
 330:	70 93 33 02 	sts	0x0233, r23
 334:	60 93 32 02 	sts	0x0232, r22
		thousand = temp%10 + 48;
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 340:	c0 96       	adiw	r24, 0x30	; 48
 342:	90 93 42 02 	sts	0x0242, r25
 346:	80 93 41 02 	sts	0x0241, r24
		lcd_wr_char(thousand);
 34a:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	01 c0       	rjmp	.+2      	; 0x354 <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 352:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 354:	c3 30       	cpi	r28, 0x03	; 3
 356:	d1 05       	cpc	r29, r1
 358:	11 f0       	breq	.+4      	; 0x35e <lcd_print+0x80>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	b1 f4       	brne	.+44     	; 0x38a <lcd_print+0xac>
	{
		temp = value/100;
 35e:	c8 01       	movw	r24, r16
 360:	64 e6       	ldi	r22, 0x64	; 100
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 368:	cb 01       	movw	r24, r22
 36a:	70 93 33 02 	sts	0x0233, r23
 36e:	60 93 32 02 	sts	0x0232, r22
		hundred = temp%10 + 48;
 372:	6a e0       	ldi	r22, 0x0A	; 10
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 37a:	c0 96       	adiw	r24, 0x30	; 48
 37c:	90 93 3e 02 	sts	0x023E, r25
 380:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(hundred);
 384:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 388:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 38a:	c2 30       	cpi	r28, 0x02	; 2
 38c:	d1 05       	cpc	r29, r1
 38e:	11 f0       	breq	.+4      	; 0x394 <lcd_print+0xb6>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	b1 f4       	brne	.+44     	; 0x3c0 <lcd_print+0xe2>
	{
		temp = value/10;
 394:	2a e0       	ldi	r18, 0x0A	; 10
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	c8 01       	movw	r24, r16
 39a:	b9 01       	movw	r22, r18
 39c:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 3a0:	cb 01       	movw	r24, r22
 3a2:	70 93 33 02 	sts	0x0233, r23
 3a6:	60 93 32 02 	sts	0x0232, r22
		tens = temp%10 + 48;
 3aa:	b9 01       	movw	r22, r18
 3ac:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 3b0:	c0 96       	adiw	r24, 0x30	; 48
 3b2:	90 93 38 02 	sts	0x0238, r25
 3b6:	80 93 37 02 	sts	0x0237, r24
		lcd_wr_char(tens);
 3ba:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
		flag=1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3c0:	c1 30       	cpi	r28, 0x01	; 1
 3c2:	d1 05       	cpc	r29, r1
 3c4:	11 f0       	breq	.+4      	; 0x3ca <lcd_print+0xec>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	61 f4       	brne	.+24     	; 0x3e2 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3ca:	c8 01       	movw	r24, r16
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 80 07 	call	0xf00	; 0xf00 <__udivmodhi4>
 3d4:	c0 96       	adiw	r24, 0x30	; 48
 3d6:	90 93 40 02 	sts	0x0240, r25
 3da:	80 93 3f 02 	sts	0x023F, r24
		lcd_wr_char(unit);
 3de:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
	}
	if(digits>5)
 3e2:	c6 30       	cpi	r28, 0x06	; 6
 3e4:	d1 05       	cpc	r29, r1
 3e6:	1c f0       	brlt	.+6      	; 0x3ee <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e8:	85 e4       	ldi	r24, 0x45	; 69
 3ea:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_wr_char>
	}
	
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <lcd_port_config>:
unsigned char max = 0xFF;


void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	87 6f       	ori	r24, 0xF7	; 247
 3fc:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 3fe:	88 b1       	in	r24, 0x08	; 8
 400:	80 78       	andi	r24, 0x80	; 128
 402:	88 b9       	out	0x08, r24	; 8
}
 404:	08 95       	ret

00000406 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
 406:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
 408:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
 40a:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
 40e:	10 92 08 01 	sts	0x0108, r1
}
 412:	08 95       	ret

00000414 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 414:	e1 e2       	ldi	r30, 0x21	; 33
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 426:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 42a:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 42e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 432:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 436:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 43a:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 43e:	89 ea       	ldi	r24, 0xA9	; 169
 440:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 444:	8b e0       	ldi	r24, 0x0B	; 11
 446:	80 83       	st	Z, r24
}
 448:	08 95       	ret

0000044a <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 44a:	ea e7       	ldi	r30, 0x7A	; 122
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 450:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 45e:	86 e8       	ldi	r24, 0x86	; 134
 460:	80 83       	st	Z, r24
}
 462:	08 95       	ret

00000464 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 464:	88 30       	cpi	r24, 0x08	; 8
 466:	18 f0       	brcs	.+6      	; 0x46e <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 468:	98 e0       	ldi	r25, 0x08	; 8
 46a:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
 46e:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 470:	80 62       	ori	r24, 0x20	; 32
 472:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 480:	80 81       	ld	r24, Z
 482:	84 ff       	sbrs	r24, 4
 484:	fd cf       	rjmp	.-6      	; 0x480 <ADC_Conversion+0x1c>
	a=ADCH;
 486:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 48a:	ea e7       	ldi	r30, 0x7A	; 122
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	90 81       	ld	r25, Z
 490:	90 61       	ori	r25, 0x10	; 16
 492:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 494:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 498:	08 95       	ret

0000049a <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	d8 2f       	mov	r29, r24
 4a0:	c6 2f       	mov	r28, r22
 4a2:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 4a4:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 4a8:	48 2f       	mov	r20, r24
 4aa:	80 93 34 02 	sts	0x0234, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 4ae:	8d 2f       	mov	r24, r29
 4b0:	6c 2f       	mov	r22, r28
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	23 e0       	ldi	r18, 0x03	; 3
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 4c2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 4c6:	60 93 2a 01 	sts	0x012A, r22
}
 4ca:	08 95       	ret

000004cc <buzzer_pin_config>:
// ***************************************************************************************************

float data; //to store received data from UDR1
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 4cc:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 4ce:	43 98       	cbi	0x08, 3	; 8
}
 4d0:	08 95       	ret

000004d2 <motion_pin_config>:

void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
 4d2:	81 b1       	in	r24, 0x01	; 1
 4d4:	8f 60       	ori	r24, 0x0F	; 15
 4d6:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 4d8:	82 b1       	in	r24, 0x02	; 2
 4da:	80 7f       	andi	r24, 0xF0	; 240
 4dc:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 4de:	ea e0       	ldi	r30, 0x0A	; 10
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	80 81       	ld	r24, Z
 4e4:	88 61       	ori	r24, 0x18	; 24
 4e6:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 4e8:	eb e0       	ldi	r30, 0x0B	; 11
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	80 81       	ld	r24, Z
 4ee:	88 61       	ori	r24, 0x18	; 24
 4f0:	80 83       	st	Z, r24
}
 4f2:	08 95       	ret

000004f4 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
 4f4:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 4f6:	90 7f       	andi	r25, 0xF0	; 240

void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
 4f8:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 4fa:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
 4fc:	92 b9       	out	0x02, r25	; 2
}
 4fe:	08 95       	ret

00000500 <forward>:

void forward (void)
{
	motion_set (0x06);
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 506:	08 95       	ret

00000508 <stop>:

void stop (void)
{
	motion_set (0x00);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 50e:	08 95       	ret

00000510 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <motion_set>
}
 516:	08 95       	ret

00000518 <port_init>:
}
*/
//Function to initialize ports
void port_init()
{
	lcd_port_config();
 518:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_port_config>
	adc_pin_config();
 51c:	0e 94 03 02 	call	0x406	; 0x406 <adc_pin_config>
	motion_pin_config();
 520:	0e 94 69 02 	call	0x4d2	; 0x4d2 <motion_pin_config>
	buzzer_pin_config();
 524:	0e 94 66 02 	call	0x4cc	; 0x4cc <buzzer_pin_config>
}
 528:	08 95       	ret

0000052a <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 52a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 52c:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 52e:	88 b9       	out	0x08, r24	; 8
}
 530:	08 95       	ret

00000532 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 532:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 534:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 536:	88 b9       	out	0x08, r24	; 8
}
 538:	08 95       	ret

0000053a <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 53a:	e1 ec       	ldi	r30, 0xC1	; 193
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 540:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 544:	86 e0       	ldi	r24, 0x06	; 6
 546:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 54a:	8f e5       	ldi	r24, 0x5F	; 95
 54c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 550:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 554:	88 e9       	ldi	r24, 0x98	; 152
 556:	80 83       	st	Z, r24
}
 558:	08 95       	ret

0000055a <__vector_25>:
}

*/

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	0b b6       	in	r0, 0x3b	; 59
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 58c:	c6 ec       	ldi	r28, 0xC6	; 198
 58e:	d0 e0       	ldi	r29, 0x00	; 0
 590:	68 81       	ld	r22, Y
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__floatunsisf>
 59c:	6b 01       	movw	r12, r22
 59e:	7c 01       	movw	r14, r24
 5a0:	60 93 39 02 	sts	0x0239, r22
 5a4:	70 93 3a 02 	sts	0x023A, r23
 5a8:	80 93 3b 02 	sts	0x023B, r24
 5ac:	90 93 3c 02 	sts	0x023C, r25

	UDR0 = data; 				//echo data back to PC
 5b0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 5b4:	68 83       	st	Y, r22
	
	if(data == 0x31)	//Unicode value of q
 5b6:	c7 01       	movw	r24, r14
 5b8:	b6 01       	movw	r22, r12
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	44 e4       	ldi	r20, 0x44	; 68
 5c0:	52 e4       	ldi	r21, 0x42	; 66
 5c2:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 5c6:	88 23       	and	r24, r24
 5c8:	41 f5       	brne	.+80     	; 0x61a <__vector_25+0xc0>
	{
		kp += 0.5;
 5ca:	60 91 0b 02 	lds	r22, 0x020B
 5ce:	70 91 0c 02 	lds	r23, 0x020C
 5d2:	80 91 0d 02 	lds	r24, 0x020D
 5d6:	90 91 0e 02 	lds	r25, 0x020E
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	5f e3       	ldi	r21, 0x3F	; 63
 5e2:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 5e6:	26 2f       	mov	r18, r22
 5e8:	37 2f       	mov	r19, r23
 5ea:	f8 2f       	mov	r31, r24
 5ec:	e9 2f       	mov	r30, r25
 5ee:	46 2f       	mov	r20, r22
 5f0:	57 2f       	mov	r21, r23
 5f2:	68 2f       	mov	r22, r24
 5f4:	79 2f       	mov	r23, r25
 5f6:	40 93 0b 02 	sts	0x020B, r20
 5fa:	50 93 0c 02 	sts	0x020C, r21
 5fe:	60 93 0d 02 	sts	0x020D, r22
 602:	70 93 0e 02 	sts	0x020E, r23
		UDR0 = kp;
 606:	82 2f       	mov	r24, r18
 608:	93 2f       	mov	r25, r19
 60a:	af 2f       	mov	r26, r31
 60c:	be 2f       	mov	r27, r30
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 616:	60 93 c6 00 	sts	0x00C6, r22
	}
	
	if(data == 0x32) //Unicode value of w
 61a:	60 91 39 02 	lds	r22, 0x0239
 61e:	70 91 3a 02 	lds	r23, 0x023A
 622:	80 91 3b 02 	lds	r24, 0x023B
 626:	90 91 3c 02 	lds	r25, 0x023C
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	48 e4       	ldi	r20, 0x48	; 72
 630:	52 e4       	ldi	r21, 0x42	; 66
 632:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 636:	88 23       	and	r24, r24
 638:	41 f5       	brne	.+80     	; 0x68a <__vector_25+0x130>
	{
		kp-=0.5;
 63a:	60 91 0b 02 	lds	r22, 0x020B
 63e:	70 91 0c 02 	lds	r23, 0x020C
 642:	80 91 0d 02 	lds	r24, 0x020D
 646:	90 91 0e 02 	lds	r25, 0x020E
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	5f e3       	ldi	r21, 0x3F	; 63
 652:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 656:	26 2f       	mov	r18, r22
 658:	37 2f       	mov	r19, r23
 65a:	f8 2f       	mov	r31, r24
 65c:	e9 2f       	mov	r30, r25
 65e:	46 2f       	mov	r20, r22
 660:	57 2f       	mov	r21, r23
 662:	68 2f       	mov	r22, r24
 664:	79 2f       	mov	r23, r25
 666:	40 93 0b 02 	sts	0x020B, r20
 66a:	50 93 0c 02 	sts	0x020C, r21
 66e:	60 93 0d 02 	sts	0x020D, r22
 672:	70 93 0e 02 	sts	0x020E, r23
		UDR0 = kp;
 676:	82 2f       	mov	r24, r18
 678:	93 2f       	mov	r25, r19
 67a:	af 2f       	mov	r26, r31
 67c:	be 2f       	mov	r27, r30
 67e:	bc 01       	movw	r22, r24
 680:	cd 01       	movw	r24, r26
 682:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 686:	60 93 c6 00 	sts	0x00C6, r22
	}
	
	if(data == 0x33) //Unicode value of a
 68a:	60 91 39 02 	lds	r22, 0x0239
 68e:	70 91 3a 02 	lds	r23, 0x023A
 692:	80 91 3b 02 	lds	r24, 0x023B
 696:	90 91 3c 02 	lds	r25, 0x023C
 69a:	20 e0       	ldi	r18, 0x00	; 0
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	4c e4       	ldi	r20, 0x4C	; 76
 6a0:	52 e4       	ldi	r21, 0x42	; 66
 6a2:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 6a6:	88 23       	and	r24, r24
 6a8:	41 f5       	brne	.+80     	; 0x6fa <__vector_25+0x1a0>
	{
		kd+=0.05;
 6aa:	60 91 03 02 	lds	r22, 0x0203
 6ae:	70 91 04 02 	lds	r23, 0x0204
 6b2:	80 91 05 02 	lds	r24, 0x0205
 6b6:	90 91 06 02 	lds	r25, 0x0206
 6ba:	2d ec       	ldi	r18, 0xCD	; 205
 6bc:	3c ec       	ldi	r19, 0xCC	; 204
 6be:	4c e4       	ldi	r20, 0x4C	; 76
 6c0:	5d e3       	ldi	r21, 0x3D	; 61
 6c2:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 6c6:	26 2f       	mov	r18, r22
 6c8:	37 2f       	mov	r19, r23
 6ca:	f8 2f       	mov	r31, r24
 6cc:	e9 2f       	mov	r30, r25
 6ce:	46 2f       	mov	r20, r22
 6d0:	57 2f       	mov	r21, r23
 6d2:	68 2f       	mov	r22, r24
 6d4:	79 2f       	mov	r23, r25
 6d6:	40 93 03 02 	sts	0x0203, r20
 6da:	50 93 04 02 	sts	0x0204, r21
 6de:	60 93 05 02 	sts	0x0205, r22
 6e2:	70 93 06 02 	sts	0x0206, r23
		UDR0 = kd;
 6e6:	82 2f       	mov	r24, r18
 6e8:	93 2f       	mov	r25, r19
 6ea:	af 2f       	mov	r26, r31
 6ec:	be 2f       	mov	r27, r30
 6ee:	bc 01       	movw	r22, r24
 6f0:	cd 01       	movw	r24, r26
 6f2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 6f6:	60 93 c6 00 	sts	0x00C6, r22
	}

	if(data == 0x34) //Unicode value of s
 6fa:	60 91 39 02 	lds	r22, 0x0239
 6fe:	70 91 3a 02 	lds	r23, 0x023A
 702:	80 91 3b 02 	lds	r24, 0x023B
 706:	90 91 3c 02 	lds	r25, 0x023C
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	40 e5       	ldi	r20, 0x50	; 80
 710:	52 e4       	ldi	r21, 0x42	; 66
 712:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 716:	88 23       	and	r24, r24
 718:	41 f5       	brne	.+80     	; 0x76a <__vector_25+0x210>
	{
		kd -= 0.05;
 71a:	60 91 03 02 	lds	r22, 0x0203
 71e:	70 91 04 02 	lds	r23, 0x0204
 722:	80 91 05 02 	lds	r24, 0x0205
 726:	90 91 06 02 	lds	r25, 0x0206
 72a:	2d ec       	ldi	r18, 0xCD	; 205
 72c:	3c ec       	ldi	r19, 0xCC	; 204
 72e:	4c e4       	ldi	r20, 0x4C	; 76
 730:	5d e3       	ldi	r21, 0x3D	; 61
 732:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 736:	26 2f       	mov	r18, r22
 738:	37 2f       	mov	r19, r23
 73a:	f8 2f       	mov	r31, r24
 73c:	e9 2f       	mov	r30, r25
 73e:	46 2f       	mov	r20, r22
 740:	57 2f       	mov	r21, r23
 742:	68 2f       	mov	r22, r24
 744:	79 2f       	mov	r23, r25
 746:	40 93 03 02 	sts	0x0203, r20
 74a:	50 93 04 02 	sts	0x0204, r21
 74e:	60 93 05 02 	sts	0x0205, r22
 752:	70 93 06 02 	sts	0x0206, r23
		UDR0 = kd;
 756:	82 2f       	mov	r24, r18
 758:	93 2f       	mov	r25, r19
 75a:	af 2f       	mov	r26, r31
 75c:	be 2f       	mov	r27, r30
 75e:	bc 01       	movw	r22, r24
 760:	cd 01       	movw	r24, r26
 762:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 766:	60 93 c6 00 	sts	0x00C6, r22
	}
	
	if(data == 0x35) //Unicode value of e
 76a:	60 91 39 02 	lds	r22, 0x0239
 76e:	70 91 3a 02 	lds	r23, 0x023A
 772:	80 91 3b 02 	lds	r24, 0x023B
 776:	90 91 3c 02 	lds	r25, 0x023C
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	44 e5       	ldi	r20, 0x54	; 84
 780:	52 e4       	ldi	r21, 0x42	; 66
 782:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 786:	88 23       	and	r24, r24
 788:	41 f5       	brne	.+80     	; 0x7da <__vector_25+0x280>
	{
		ki += 0.01;
 78a:	60 91 07 02 	lds	r22, 0x0207
 78e:	70 91 08 02 	lds	r23, 0x0208
 792:	80 91 09 02 	lds	r24, 0x0209
 796:	90 91 0a 02 	lds	r25, 0x020A
 79a:	2a e0       	ldi	r18, 0x0A	; 10
 79c:	37 ed       	ldi	r19, 0xD7	; 215
 79e:	43 e2       	ldi	r20, 0x23	; 35
 7a0:	5c e3       	ldi	r21, 0x3C	; 60
 7a2:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 7a6:	26 2f       	mov	r18, r22
 7a8:	37 2f       	mov	r19, r23
 7aa:	f8 2f       	mov	r31, r24
 7ac:	e9 2f       	mov	r30, r25
 7ae:	46 2f       	mov	r20, r22
 7b0:	57 2f       	mov	r21, r23
 7b2:	68 2f       	mov	r22, r24
 7b4:	79 2f       	mov	r23, r25
 7b6:	40 93 07 02 	sts	0x0207, r20
 7ba:	50 93 08 02 	sts	0x0208, r21
 7be:	60 93 09 02 	sts	0x0209, r22
 7c2:	70 93 0a 02 	sts	0x020A, r23
		UDR0 = ki;
 7c6:	82 2f       	mov	r24, r18
 7c8:	93 2f       	mov	r25, r19
 7ca:	af 2f       	mov	r26, r31
 7cc:	be 2f       	mov	r27, r30
 7ce:	bc 01       	movw	r22, r24
 7d0:	cd 01       	movw	r24, r26
 7d2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 7d6:	60 93 c6 00 	sts	0x00C6, r22
	}
	
	if(data == 0x36)	//Unicode value of r
 7da:	60 91 39 02 	lds	r22, 0x0239
 7de:	70 91 3a 02 	lds	r23, 0x023A
 7e2:	80 91 3b 02 	lds	r24, 0x023B
 7e6:	90 91 3c 02 	lds	r25, 0x023C
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	48 e5       	ldi	r20, 0x58	; 88
 7f0:	52 e4       	ldi	r21, 0x42	; 66
 7f2:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 7f6:	88 23       	and	r24, r24
 7f8:	41 f5       	brne	.+80     	; 0x84a <__vector_25+0x2f0>
	{
		ki -= 0.01;
 7fa:	60 91 07 02 	lds	r22, 0x0207
 7fe:	70 91 08 02 	lds	r23, 0x0208
 802:	80 91 09 02 	lds	r24, 0x0209
 806:	90 91 0a 02 	lds	r25, 0x020A
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	37 ed       	ldi	r19, 0xD7	; 215
 80e:	43 e2       	ldi	r20, 0x23	; 35
 810:	5c e3       	ldi	r21, 0x3C	; 60
 812:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 816:	26 2f       	mov	r18, r22
 818:	37 2f       	mov	r19, r23
 81a:	f8 2f       	mov	r31, r24
 81c:	e9 2f       	mov	r30, r25
 81e:	46 2f       	mov	r20, r22
 820:	57 2f       	mov	r21, r23
 822:	68 2f       	mov	r22, r24
 824:	79 2f       	mov	r23, r25
 826:	40 93 07 02 	sts	0x0207, r20
 82a:	50 93 08 02 	sts	0x0208, r21
 82e:	60 93 09 02 	sts	0x0209, r22
 832:	70 93 0a 02 	sts	0x020A, r23
		UDR0 = ki;
 836:	82 2f       	mov	r24, r18
 838:	93 2f       	mov	r25, r19
 83a:	af 2f       	mov	r26, r31
 83c:	be 2f       	mov	r27, r30
 83e:	bc 01       	movw	r22, r24
 840:	cd 01       	movw	r24, r26
 842:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 846:	60 93 c6 00 	sts	0x00C6, r22
	}
	
	if(data == 0x37)
 84a:	60 91 39 02 	lds	r22, 0x0239
 84e:	70 91 3a 02 	lds	r23, 0x023A
 852:	80 91 3b 02 	lds	r24, 0x023B
 856:	90 91 3c 02 	lds	r25, 0x023C
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	4c e5       	ldi	r20, 0x5C	; 92
 860:	52 e4       	ldi	r21, 0x42	; 66
 862:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 866:	88 23       	and	r24, r24
 868:	49 f4       	brne	.+18     	; 0x87c <__vector_25+0x322>
	{
		kc += 1;
 86a:	80 91 01 02 	lds	r24, 0x0201
 86e:	90 91 02 02 	lds	r25, 0x0202
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	90 93 02 02 	sts	0x0202, r25
 878:	80 93 01 02 	sts	0x0201, r24
	}
	
}
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	5f 91       	pop	r21
 892:	4f 91       	pop	r20
 894:	3f 91       	pop	r19
 896:	2f 91       	pop	r18
 898:	ff 90       	pop	r15
 89a:	ef 90       	pop	r14
 89c:	df 90       	pop	r13
 89e:	cf 90       	pop	r12
 8a0:	0f 90       	pop	r0
 8a2:	0b be       	out	0x3b, r0	; 59
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
	cli(); //Clears the global interrupts
 8ae:	f8 94       	cli
	port_init();  //Initializes all the ports
 8b0:	0e 94 8c 02 	call	0x518	; 0x518 <port_init>
	uart0_init(); //Initailize UART1 for serial communiaction
 8b4:	0e 94 9d 02 	call	0x53a	; 0x53a <uart0_init>
	adc_init();
 8b8:	0e 94 25 02 	call	0x44a	; 0x44a <adc_init>
	lcd_init();
 8bc:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
	timer5_init();
 8c0:	0e 94 0a 02 	call	0x414	; 0x414 <timer5_init>
	sei();   //Enables the global interrupts
 8c4:	78 94       	sei
}
 8c6:	08 95       	ret

000008c8 <main>:

//Main Function
int main(void)
{
	init_devices();
 8c8:	0e 94 57 04 	call	0x8ae	; 0x8ae <init_devices>
	lcd_set_4bit();
 8cc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 8d0:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		Setpoint = 0x28;
 8d4:	0f 2e       	mov	r0, r31
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	2f 2e       	mov	r2, r31
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	3f 2e       	mov	r3, r31
 8de:	f0 e2       	ldi	r31, 0x20	; 32
 8e0:	4f 2e       	mov	r4, r31
 8e2:	f2 e4       	ldi	r31, 0x42	; 66
 8e4:	5f 2e       	mov	r5, r31
 8e6:	f0 2d       	mov	r31, r0
	lcd_init();
	while(1)
	{
		
		
		Left_white_line = max - ADC_Conversion(3);	//Getting data of Left WL Sensor
 8e8:	c0 91 00 02 	lds	r28, 0x0200
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 8f2:	c8 1b       	sub	r28, r24
 8f4:	c0 93 2e 02 	sts	0x022E, r28
		Center_white_line = max - ADC_Conversion(2);	//Getting data of Center WL Sensor
 8f8:	c0 91 00 02 	lds	r28, 0x0200
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 902:	c8 1b       	sub	r28, r24
 904:	c0 93 2d 02 	sts	0x022D, r28
		Right_white_line = max - ADC_Conversion(1);	//Getting data of Right WL Sensor
 908:	c0 91 00 02 	lds	r28, 0x0200
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 32 02 	call	0x464	; 0x464 <ADC_Conversion>
 912:	c8 1b       	sub	r28, r24
 914:	c0 93 2c 02 	sts	0x022C, r28

		flag=0;
 918:	10 92 2f 02 	sts	0x022F, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	61 e0       	ldi	r22, 0x01	; 1
 920:	43 e0       	ldi	r20, 0x03	; 3
 922:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	65 e0       	ldi	r22, 0x05	; 5
 92a:	42 e0       	ldi	r20, 0x02	; 2
 92c:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	69 e0       	ldi	r22, 0x09	; 9
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	0e 94 4d 02 	call	0x49a	; 0x49a <print_sensor>
		
		Setpoint = 0x28;
 93a:	20 92 28 02 	sts	0x0228, r2
 93e:	30 92 29 02 	sts	0x0229, r3
 942:	40 92 2a 02 	sts	0x022A, r4
 946:	50 92 2b 02 	sts	0x022B, r5
		
		
		Processedvar = kc *Center_white_line -Left_white_line + Right_white_line;
 94a:	70 90 2e 02 	lds	r7, 0x022E
 94e:	20 91 2d 02 	lds	r18, 0x022D
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	80 91 01 02 	lds	r24, 0x0201
 958:	90 91 02 02 	lds	r25, 0x0202
 95c:	28 9f       	mul	r18, r24
 95e:	b0 01       	movw	r22, r0
 960:	29 9f       	mul	r18, r25
 962:	70 0d       	add	r23, r0
 964:	38 9f       	mul	r19, r24
 966:	70 0d       	add	r23, r0
 968:	11 24       	eor	r1, r1
 96a:	67 19       	sub	r22, r7
 96c:	71 09       	sbc	r23, r1
 96e:	80 91 2c 02 	lds	r24, 0x022C
 972:	68 0f       	add	r22, r24
 974:	71 1d       	adc	r23, r1
 976:	88 27       	eor	r24, r24
 978:	77 fd       	sbrc	r23, 7
 97a:	80 95       	com	r24
 97c:	98 2f       	mov	r25, r24
 97e:	0e 94 6d 06 	call	0xcda	; 0xcda <__floatsisf>
 982:	6b 01       	movw	r12, r22
 984:	7c 01       	movw	r14, r24
 986:	60 93 20 02 	sts	0x0220, r22
 98a:	70 93 21 02 	sts	0x0221, r23
 98e:	80 93 22 02 	sts	0x0222, r24
 992:	90 93 23 02 	sts	0x0223, r25
		
		if (Processedvar < 0)
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	a9 01       	movw	r20, r18
 99c:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
 9a0:	88 23       	and	r24, r24
 9a2:	8c f4       	brge	.+34     	; 0x9c6 <main+0xfe>
		{
			error = Setpoint - Processedvar;
 9a4:	c2 01       	movw	r24, r4
 9a6:	b1 01       	movw	r22, r2
 9a8:	a7 01       	movw	r20, r14
 9aa:	96 01       	movw	r18, r12
 9ac:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 9b0:	dc 01       	movw	r26, r24
 9b2:	cb 01       	movw	r24, r22
 9b4:	80 93 24 02 	sts	0x0224, r24
 9b8:	90 93 25 02 	sts	0x0225, r25
 9bc:	a0 93 26 02 	sts	0x0226, r26
 9c0:	b0 93 27 02 	sts	0x0227, r27
 9c4:	10 c0       	rjmp	.+32     	; 0x9e6 <main+0x11e>
		}
		else
		{
			error = Processedvar - Setpoint;
 9c6:	c7 01       	movw	r24, r14
 9c8:	b6 01       	movw	r22, r12
 9ca:	a2 01       	movw	r20, r4
 9cc:	91 01       	movw	r18, r2
 9ce:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 9d2:	dc 01       	movw	r26, r24
 9d4:	cb 01       	movw	r24, r22
 9d6:	80 93 24 02 	sts	0x0224, r24
 9da:	90 93 25 02 	sts	0x0225, r25
 9de:	a0 93 26 02 	sts	0x0226, r26
 9e2:	b0 93 27 02 	sts	0x0227, r27
		}			
		integral += error;
 9e6:	c0 90 24 02 	lds	r12, 0x0224
 9ea:	d0 90 25 02 	lds	r13, 0x0225
 9ee:	e0 90 26 02 	lds	r14, 0x0226
 9f2:	f0 90 27 02 	lds	r15, 0x0227
 9f6:	c7 01       	movw	r24, r14
 9f8:	b6 01       	movw	r22, r12
 9fa:	20 91 18 02 	lds	r18, 0x0218
 9fe:	30 91 19 02 	lds	r19, 0x0219
 a02:	40 91 1a 02 	lds	r20, 0x021A
 a06:	50 91 1b 02 	lds	r21, 0x021B
 a0a:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 a0e:	d6 2f       	mov	r29, r22
 a10:	c7 2f       	mov	r28, r23
 a12:	18 2f       	mov	r17, r24
 a14:	09 2f       	mov	r16, r25
 a16:	86 2f       	mov	r24, r22
 a18:	9c 2f       	mov	r25, r28
 a1a:	a1 2f       	mov	r26, r17
 a1c:	b0 2f       	mov	r27, r16
 a1e:	80 93 18 02 	sts	0x0218, r24
 a22:	90 93 19 02 	sts	0x0219, r25
 a26:	a0 93 1a 02 	sts	0x021A, r26
 a2a:	b0 93 1b 02 	sts	0x021B, r27
		derivative = -lasterror+error;
 a2e:	c7 01       	movw	r24, r14
 a30:	b6 01       	movw	r22, r12
 a32:	20 91 10 02 	lds	r18, 0x0210
 a36:	30 91 11 02 	lds	r19, 0x0211
 a3a:	40 91 12 02 	lds	r20, 0x0212
 a3e:	50 91 13 02 	lds	r21, 0x0213
 a42:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 a46:	b6 2e       	mov	r11, r22
 a48:	a7 2e       	mov	r10, r23
 a4a:	98 2e       	mov	r9, r24
 a4c:	89 2e       	mov	r8, r25
 a4e:	86 2f       	mov	r24, r22
 a50:	9a 2d       	mov	r25, r10
 a52:	a9 2d       	mov	r26, r9
 a54:	b8 2d       	mov	r27, r8
 a56:	80 93 14 02 	sts	0x0214, r24
 a5a:	90 93 15 02 	sts	0x0215, r25
 a5e:	a0 93 16 02 	sts	0x0216, r26
 a62:	b0 93 17 02 	sts	0x0217, r27
		lasterror = error;
 a66:	c0 92 10 02 	sts	0x0210, r12
 a6a:	d0 92 11 02 	sts	0x0211, r13
 a6e:	e0 92 12 02 	sts	0x0212, r14
 a72:	f0 92 13 02 	sts	0x0213, r15
		
		
		PID = kp * error + ki * integral + kd * derivative;
 a76:	c7 01       	movw	r24, r14
 a78:	b6 01       	movw	r22, r12
 a7a:	20 91 0b 02 	lds	r18, 0x020B
 a7e:	30 91 0c 02 	lds	r19, 0x020C
 a82:	40 91 0d 02 	lds	r20, 0x020D
 a86:	50 91 0e 02 	lds	r21, 0x020E
 a8a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
 a8e:	6b 01       	movw	r12, r22
 a90:	7c 01       	movw	r14, r24
 a92:	8d 2f       	mov	r24, r29
 a94:	9c 2f       	mov	r25, r28
 a96:	a1 2f       	mov	r26, r17
 a98:	b0 2f       	mov	r27, r16
 a9a:	bc 01       	movw	r22, r24
 a9c:	cd 01       	movw	r24, r26
 a9e:	20 91 07 02 	lds	r18, 0x0207
 aa2:	30 91 08 02 	lds	r19, 0x0208
 aa6:	40 91 09 02 	lds	r20, 0x0209
 aaa:	50 91 0a 02 	lds	r21, 0x020A
 aae:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
 ab2:	9b 01       	movw	r18, r22
 ab4:	ac 01       	movw	r20, r24
 ab6:	c7 01       	movw	r24, r14
 ab8:	b6 01       	movw	r22, r12
 aba:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 abe:	6b 01       	movw	r12, r22
 ac0:	7c 01       	movw	r14, r24
 ac2:	8b 2d       	mov	r24, r11
 ac4:	9a 2d       	mov	r25, r10
 ac6:	a9 2d       	mov	r26, r9
 ac8:	b8 2d       	mov	r27, r8
 aca:	bc 01       	movw	r22, r24
 acc:	cd 01       	movw	r24, r26
 ace:	20 91 03 02 	lds	r18, 0x0203
 ad2:	30 91 04 02 	lds	r19, 0x0204
 ad6:	40 91 05 02 	lds	r20, 0x0205
 ada:	50 91 06 02 	lds	r21, 0x0206
 ade:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
 ae2:	9b 01       	movw	r18, r22
 ae4:	ac 01       	movw	r20, r24
 ae6:	c7 01       	movw	r24, r14
 ae8:	b6 01       	movw	r22, r12
 aea:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 aee:	dc 01       	movw	r26, r24
 af0:	cb 01       	movw	r24, r22
 af2:	80 93 1c 02 	sts	0x021C, r24
 af6:	90 93 1d 02 	sts	0x021D, r25
 afa:	a0 93 1e 02 	sts	0x021E, r26
 afe:	b0 93 1f 02 	sts	0x021F, r27
		
		if(Left_white_line < 0x28){
 b02:	87 e2       	ldi	r24, 0x27	; 39
 b04:	87 15       	cp	r24, r7
 b06:	48 f1       	brcs	.+82     	; 0xb5a <main+0x292>
		forward();
 b08:	0e 94 80 02 	call	0x500	; 0x500 <forward>
		velocity(200+PID, 200-PID);
 b0c:	c0 90 1c 02 	lds	r12, 0x021C
 b10:	d0 90 1d 02 	lds	r13, 0x021D
 b14:	e0 90 1e 02 	lds	r14, 0x021E
 b18:	f0 90 1f 02 	lds	r15, 0x021F
 b1c:	c7 01       	movw	r24, r14
 b1e:	b6 01       	movw	r22, r12
 b20:	20 e0       	ldi	r18, 0x00	; 0
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	48 e4       	ldi	r20, 0x48	; 72
 b26:	53 e4       	ldi	r21, 0x43	; 67
 b28:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 b2c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 b30:	c6 2f       	mov	r28, r22
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	70 e0       	ldi	r23, 0x00	; 0
 b36:	88 e4       	ldi	r24, 0x48	; 72
 b38:	93 e4       	ldi	r25, 0x43	; 67
 b3a:	a7 01       	movw	r20, r14
 b3c:	96 01       	movw	r18, r12
 b3e:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 b42:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 b46:	8c 2f       	mov	r24, r28
 b48:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
 b4c:	83 ec       	ldi	r24, 0xC3	; 195
 b4e:	99 e0       	ldi	r25, 0x09	; 9
 b50:	01 97       	sbiw	r24, 0x01	; 1
 b52:	f1 f7       	brne	.-4      	; 0xb50 <main+0x288>
 b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x28e>
 b56:	00 00       	nop
 b58:	c7 ce       	rjmp	.-626    	; 0x8e8 <main+0x20>
		_delay_ms(10);
		}
		else
		
		{
			forward();
 b5a:	0e 94 80 02 	call	0x500	; 0x500 <forward>
			velocity(200-PID, 200+PID);
 b5e:	c0 90 1c 02 	lds	r12, 0x021C
 b62:	d0 90 1d 02 	lds	r13, 0x021D
 b66:	e0 90 1e 02 	lds	r14, 0x021E
 b6a:	f0 90 1f 02 	lds	r15, 0x021F
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	88 e4       	ldi	r24, 0x48	; 72
 b74:	93 e4       	ldi	r25, 0x43	; 67
 b76:	a7 01       	movw	r20, r14
 b78:	96 01       	movw	r18, r12
 b7a:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
 b7e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 b82:	c6 2f       	mov	r28, r22
 b84:	c7 01       	movw	r24, r14
 b86:	b6 01       	movw	r22, r12
 b88:	20 e0       	ldi	r18, 0x00	; 0
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	48 e4       	ldi	r20, 0x48	; 72
 b8e:	53 e4       	ldi	r21, 0x43	; 67
 b90:	0e 94 d7 05 	call	0xbae	; 0xbae <__addsf3>
 b94:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fixunssfsi>
 b98:	8c 2f       	mov	r24, r28
 b9a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <velocity>
 b9e:	83 ec       	ldi	r24, 0xC3	; 195
 ba0:	99 e0       	ldi	r25, 0x09	; 9
 ba2:	01 97       	sbiw	r24, 0x01	; 1
 ba4:	f1 f7       	brne	.-4      	; 0xba2 <main+0x2da>
 ba6:	00 c0       	rjmp	.+0      	; 0xba8 <main+0x2e0>
 ba8:	00 00       	nop
 baa:	9e ce       	rjmp	.-708    	; 0x8e8 <main+0x20>

00000bac <__subsf3>:
 bac:	50 58       	subi	r21, 0x80	; 128

00000bae <__addsf3>:
 bae:	bb 27       	eor	r27, r27
 bb0:	aa 27       	eor	r26, r26
 bb2:	0e d0       	rcall	.+28     	; 0xbd0 <__addsf3x>
 bb4:	08 c1       	rjmp	.+528    	; 0xdc6 <__fp_round>
 bb6:	f9 d0       	rcall	.+498    	; 0xdaa <__fp_pscA>
 bb8:	30 f0       	brcs	.+12     	; 0xbc6 <__addsf3+0x18>
 bba:	fe d0       	rcall	.+508    	; 0xdb8 <__fp_pscB>
 bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__addsf3+0x18>
 bbe:	31 f4       	brne	.+12     	; 0xbcc <__addsf3+0x1e>
 bc0:	9f 3f       	cpi	r25, 0xFF	; 255
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__addsf3+0x1a>
 bc4:	1e f4       	brtc	.+6      	; 0xbcc <__addsf3+0x1e>
 bc6:	ee c0       	rjmp	.+476    	; 0xda4 <__fp_nan>
 bc8:	0e f4       	brtc	.+2      	; 0xbcc <__addsf3+0x1e>
 bca:	e0 95       	com	r30
 bcc:	e7 fb       	bst	r30, 7
 bce:	e4 c0       	rjmp	.+456    	; 0xd98 <__fp_inf>

00000bd0 <__addsf3x>:
 bd0:	e9 2f       	mov	r30, r25
 bd2:	0a d1       	rcall	.+532    	; 0xde8 <__fp_split3>
 bd4:	80 f3       	brcs	.-32     	; 0xbb6 <__addsf3+0x8>
 bd6:	ba 17       	cp	r27, r26
 bd8:	62 07       	cpc	r22, r18
 bda:	73 07       	cpc	r23, r19
 bdc:	84 07       	cpc	r24, r20
 bde:	95 07       	cpc	r25, r21
 be0:	18 f0       	brcs	.+6      	; 0xbe8 <__addsf3x+0x18>
 be2:	71 f4       	brne	.+28     	; 0xc00 <__addsf3x+0x30>
 be4:	9e f5       	brtc	.+102    	; 0xc4c <__addsf3x+0x7c>
 be6:	22 c1       	rjmp	.+580    	; 0xe2c <__fp_zero>
 be8:	0e f4       	brtc	.+2      	; 0xbec <__addsf3x+0x1c>
 bea:	e0 95       	com	r30
 bec:	0b 2e       	mov	r0, r27
 bee:	ba 2f       	mov	r27, r26
 bf0:	a0 2d       	mov	r26, r0
 bf2:	0b 01       	movw	r0, r22
 bf4:	b9 01       	movw	r22, r18
 bf6:	90 01       	movw	r18, r0
 bf8:	0c 01       	movw	r0, r24
 bfa:	ca 01       	movw	r24, r20
 bfc:	a0 01       	movw	r20, r0
 bfe:	11 24       	eor	r1, r1
 c00:	ff 27       	eor	r31, r31
 c02:	59 1b       	sub	r21, r25
 c04:	99 f0       	breq	.+38     	; 0xc2c <__addsf3x+0x5c>
 c06:	59 3f       	cpi	r21, 0xF9	; 249
 c08:	50 f4       	brcc	.+20     	; 0xc1e <__addsf3x+0x4e>
 c0a:	50 3e       	cpi	r21, 0xE0	; 224
 c0c:	68 f1       	brcs	.+90     	; 0xc68 <__addsf3x+0x98>
 c0e:	1a 16       	cp	r1, r26
 c10:	f0 40       	sbci	r31, 0x00	; 0
 c12:	a2 2f       	mov	r26, r18
 c14:	23 2f       	mov	r18, r19
 c16:	34 2f       	mov	r19, r20
 c18:	44 27       	eor	r20, r20
 c1a:	58 5f       	subi	r21, 0xF8	; 248
 c1c:	f3 cf       	rjmp	.-26     	; 0xc04 <__addsf3x+0x34>
 c1e:	46 95       	lsr	r20
 c20:	37 95       	ror	r19
 c22:	27 95       	ror	r18
 c24:	a7 95       	ror	r26
 c26:	f0 40       	sbci	r31, 0x00	; 0
 c28:	53 95       	inc	r21
 c2a:	c9 f7       	brne	.-14     	; 0xc1e <__addsf3x+0x4e>
 c2c:	7e f4       	brtc	.+30     	; 0xc4c <__addsf3x+0x7c>
 c2e:	1f 16       	cp	r1, r31
 c30:	ba 0b       	sbc	r27, r26
 c32:	62 0b       	sbc	r22, r18
 c34:	73 0b       	sbc	r23, r19
 c36:	84 0b       	sbc	r24, r20
 c38:	ba f0       	brmi	.+46     	; 0xc68 <__addsf3x+0x98>
 c3a:	91 50       	subi	r25, 0x01	; 1
 c3c:	a1 f0       	breq	.+40     	; 0xc66 <__addsf3x+0x96>
 c3e:	ff 0f       	add	r31, r31
 c40:	bb 1f       	adc	r27, r27
 c42:	66 1f       	adc	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	c2 f7       	brpl	.-16     	; 0xc3a <__addsf3x+0x6a>
 c4a:	0e c0       	rjmp	.+28     	; 0xc68 <__addsf3x+0x98>
 c4c:	ba 0f       	add	r27, r26
 c4e:	62 1f       	adc	r22, r18
 c50:	73 1f       	adc	r23, r19
 c52:	84 1f       	adc	r24, r20
 c54:	48 f4       	brcc	.+18     	; 0xc68 <__addsf3x+0x98>
 c56:	87 95       	ror	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	f7 95       	ror	r31
 c60:	9e 3f       	cpi	r25, 0xFE	; 254
 c62:	08 f0       	brcs	.+2      	; 0xc66 <__addsf3x+0x96>
 c64:	b3 cf       	rjmp	.-154    	; 0xbcc <__addsf3+0x1e>
 c66:	93 95       	inc	r25
 c68:	88 0f       	add	r24, r24
 c6a:	08 f0       	brcs	.+2      	; 0xc6e <__addsf3x+0x9e>
 c6c:	99 27       	eor	r25, r25
 c6e:	ee 0f       	add	r30, r30
 c70:	97 95       	ror	r25
 c72:	87 95       	ror	r24
 c74:	08 95       	ret

00000c76 <__cmpsf2>:
 c76:	6c d0       	rcall	.+216    	; 0xd50 <__fp_cmp>
 c78:	08 f4       	brcc	.+2      	; 0xc7c <__cmpsf2+0x6>
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	08 95       	ret

00000c7e <__fixunssfsi>:
 c7e:	bc d0       	rcall	.+376    	; 0xdf8 <__fp_splitA>
 c80:	88 f0       	brcs	.+34     	; 0xca4 <__fixunssfsi+0x26>
 c82:	9f 57       	subi	r25, 0x7F	; 127
 c84:	90 f0       	brcs	.+36     	; 0xcaa <__fixunssfsi+0x2c>
 c86:	b9 2f       	mov	r27, r25
 c88:	99 27       	eor	r25, r25
 c8a:	b7 51       	subi	r27, 0x17	; 23
 c8c:	a0 f0       	brcs	.+40     	; 0xcb6 <__fixunssfsi+0x38>
 c8e:	d1 f0       	breq	.+52     	; 0xcc4 <__fixunssfsi+0x46>
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	1a f0       	brmi	.+6      	; 0xca0 <__fixunssfsi+0x22>
 c9a:	ba 95       	dec	r27
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__fixunssfsi+0x12>
 c9e:	12 c0       	rjmp	.+36     	; 0xcc4 <__fixunssfsi+0x46>
 ca0:	b1 30       	cpi	r27, 0x01	; 1
 ca2:	81 f0       	breq	.+32     	; 0xcc4 <__fixunssfsi+0x46>
 ca4:	c3 d0       	rcall	.+390    	; 0xe2c <__fp_zero>
 ca6:	b1 e0       	ldi	r27, 0x01	; 1
 ca8:	08 95       	ret
 caa:	c0 c0       	rjmp	.+384    	; 0xe2c <__fp_zero>
 cac:	67 2f       	mov	r22, r23
 cae:	78 2f       	mov	r23, r24
 cb0:	88 27       	eor	r24, r24
 cb2:	b8 5f       	subi	r27, 0xF8	; 248
 cb4:	39 f0       	breq	.+14     	; 0xcc4 <__fixunssfsi+0x46>
 cb6:	b9 3f       	cpi	r27, 0xF9	; 249
 cb8:	cc f3       	brlt	.-14     	; 0xcac <__fixunssfsi+0x2e>
 cba:	86 95       	lsr	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	b3 95       	inc	r27
 cc2:	d9 f7       	brne	.-10     	; 0xcba <__fixunssfsi+0x3c>
 cc4:	3e f4       	brtc	.+14     	; 0xcd4 <__fixunssfsi+0x56>
 cc6:	90 95       	com	r25
 cc8:	80 95       	com	r24
 cca:	70 95       	com	r23
 ccc:	61 95       	neg	r22
 cce:	7f 4f       	sbci	r23, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	08 95       	ret

00000cd6 <__floatunsisf>:
 cd6:	e8 94       	clt
 cd8:	09 c0       	rjmp	.+18     	; 0xcec <__floatsisf+0x12>

00000cda <__floatsisf>:
 cda:	97 fb       	bst	r25, 7
 cdc:	3e f4       	brtc	.+14     	; 0xcec <__floatsisf+0x12>
 cde:	90 95       	com	r25
 ce0:	80 95       	com	r24
 ce2:	70 95       	com	r23
 ce4:	61 95       	neg	r22
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	99 23       	and	r25, r25
 cee:	a9 f0       	breq	.+42     	; 0xd1a <__floatsisf+0x40>
 cf0:	f9 2f       	mov	r31, r25
 cf2:	96 e9       	ldi	r25, 0x96	; 150
 cf4:	bb 27       	eor	r27, r27
 cf6:	93 95       	inc	r25
 cf8:	f6 95       	lsr	r31
 cfa:	87 95       	ror	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f1 11       	cpse	r31, r1
 d04:	f8 cf       	rjmp	.-16     	; 0xcf6 <__floatsisf+0x1c>
 d06:	fa f4       	brpl	.+62     	; 0xd46 <__floatsisf+0x6c>
 d08:	bb 0f       	add	r27, r27
 d0a:	11 f4       	brne	.+4      	; 0xd10 <__floatsisf+0x36>
 d0c:	60 ff       	sbrs	r22, 0
 d0e:	1b c0       	rjmp	.+54     	; 0xd46 <__floatsisf+0x6c>
 d10:	6f 5f       	subi	r22, 0xFF	; 255
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	8f 4f       	sbci	r24, 0xFF	; 255
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	16 c0       	rjmp	.+44     	; 0xd46 <__floatsisf+0x6c>
 d1a:	88 23       	and	r24, r24
 d1c:	11 f0       	breq	.+4      	; 0xd22 <__floatsisf+0x48>
 d1e:	96 e9       	ldi	r25, 0x96	; 150
 d20:	11 c0       	rjmp	.+34     	; 0xd44 <__floatsisf+0x6a>
 d22:	77 23       	and	r23, r23
 d24:	21 f0       	breq	.+8      	; 0xd2e <__floatsisf+0x54>
 d26:	9e e8       	ldi	r25, 0x8E	; 142
 d28:	87 2f       	mov	r24, r23
 d2a:	76 2f       	mov	r23, r22
 d2c:	05 c0       	rjmp	.+10     	; 0xd38 <__floatsisf+0x5e>
 d2e:	66 23       	and	r22, r22
 d30:	71 f0       	breq	.+28     	; 0xd4e <__floatsisf+0x74>
 d32:	96 e8       	ldi	r25, 0x86	; 134
 d34:	86 2f       	mov	r24, r22
 d36:	70 e0       	ldi	r23, 0x00	; 0
 d38:	60 e0       	ldi	r22, 0x00	; 0
 d3a:	2a f0       	brmi	.+10     	; 0xd46 <__floatsisf+0x6c>
 d3c:	9a 95       	dec	r25
 d3e:	66 0f       	add	r22, r22
 d40:	77 1f       	adc	r23, r23
 d42:	88 1f       	adc	r24, r24
 d44:	da f7       	brpl	.-10     	; 0xd3c <__floatsisf+0x62>
 d46:	88 0f       	add	r24, r24
 d48:	96 95       	lsr	r25
 d4a:	87 95       	ror	r24
 d4c:	97 f9       	bld	r25, 7
 d4e:	08 95       	ret

00000d50 <__fp_cmp>:
 d50:	99 0f       	add	r25, r25
 d52:	00 08       	sbc	r0, r0
 d54:	55 0f       	add	r21, r21
 d56:	aa 0b       	sbc	r26, r26
 d58:	e0 e8       	ldi	r30, 0x80	; 128
 d5a:	fe ef       	ldi	r31, 0xFE	; 254
 d5c:	16 16       	cp	r1, r22
 d5e:	17 06       	cpc	r1, r23
 d60:	e8 07       	cpc	r30, r24
 d62:	f9 07       	cpc	r31, r25
 d64:	c0 f0       	brcs	.+48     	; 0xd96 <__fp_cmp+0x46>
 d66:	12 16       	cp	r1, r18
 d68:	13 06       	cpc	r1, r19
 d6a:	e4 07       	cpc	r30, r20
 d6c:	f5 07       	cpc	r31, r21
 d6e:	98 f0       	brcs	.+38     	; 0xd96 <__fp_cmp+0x46>
 d70:	62 1b       	sub	r22, r18
 d72:	73 0b       	sbc	r23, r19
 d74:	84 0b       	sbc	r24, r20
 d76:	95 0b       	sbc	r25, r21
 d78:	39 f4       	brne	.+14     	; 0xd88 <__fp_cmp+0x38>
 d7a:	0a 26       	eor	r0, r26
 d7c:	61 f0       	breq	.+24     	; 0xd96 <__fp_cmp+0x46>
 d7e:	23 2b       	or	r18, r19
 d80:	24 2b       	or	r18, r20
 d82:	25 2b       	or	r18, r21
 d84:	21 f4       	brne	.+8      	; 0xd8e <__fp_cmp+0x3e>
 d86:	08 95       	ret
 d88:	0a 26       	eor	r0, r26
 d8a:	09 f4       	brne	.+2      	; 0xd8e <__fp_cmp+0x3e>
 d8c:	a1 40       	sbci	r26, 0x01	; 1
 d8e:	a6 95       	lsr	r26
 d90:	8f ef       	ldi	r24, 0xFF	; 255
 d92:	81 1d       	adc	r24, r1
 d94:	81 1d       	adc	r24, r1
 d96:	08 95       	ret

00000d98 <__fp_inf>:
 d98:	97 f9       	bld	r25, 7
 d9a:	9f 67       	ori	r25, 0x7F	; 127
 d9c:	80 e8       	ldi	r24, 0x80	; 128
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	60 e0       	ldi	r22, 0x00	; 0
 da2:	08 95       	ret

00000da4 <__fp_nan>:
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	80 ec       	ldi	r24, 0xC0	; 192
 da8:	08 95       	ret

00000daa <__fp_pscA>:
 daa:	00 24       	eor	r0, r0
 dac:	0a 94       	dec	r0
 dae:	16 16       	cp	r1, r22
 db0:	17 06       	cpc	r1, r23
 db2:	18 06       	cpc	r1, r24
 db4:	09 06       	cpc	r0, r25
 db6:	08 95       	ret

00000db8 <__fp_pscB>:
 db8:	00 24       	eor	r0, r0
 dba:	0a 94       	dec	r0
 dbc:	12 16       	cp	r1, r18
 dbe:	13 06       	cpc	r1, r19
 dc0:	14 06       	cpc	r1, r20
 dc2:	05 06       	cpc	r0, r21
 dc4:	08 95       	ret

00000dc6 <__fp_round>:
 dc6:	09 2e       	mov	r0, r25
 dc8:	03 94       	inc	r0
 dca:	00 0c       	add	r0, r0
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_round+0xc>
 dce:	88 23       	and	r24, r24
 dd0:	52 f0       	brmi	.+20     	; 0xde6 <__fp_round+0x20>
 dd2:	bb 0f       	add	r27, r27
 dd4:	40 f4       	brcc	.+16     	; 0xde6 <__fp_round+0x20>
 dd6:	bf 2b       	or	r27, r31
 dd8:	11 f4       	brne	.+4      	; 0xdde <__fp_round+0x18>
 dda:	60 ff       	sbrs	r22, 0
 ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__fp_round+0x20>
 dde:	6f 5f       	subi	r22, 0xFF	; 255
 de0:	7f 4f       	sbci	r23, 0xFF	; 255
 de2:	8f 4f       	sbci	r24, 0xFF	; 255
 de4:	9f 4f       	sbci	r25, 0xFF	; 255
 de6:	08 95       	ret

00000de8 <__fp_split3>:
 de8:	57 fd       	sbrc	r21, 7
 dea:	90 58       	subi	r25, 0x80	; 128
 dec:	44 0f       	add	r20, r20
 dee:	55 1f       	adc	r21, r21
 df0:	59 f0       	breq	.+22     	; 0xe08 <__fp_splitA+0x10>
 df2:	5f 3f       	cpi	r21, 0xFF	; 255
 df4:	71 f0       	breq	.+28     	; 0xe12 <__fp_splitA+0x1a>
 df6:	47 95       	ror	r20

00000df8 <__fp_splitA>:
 df8:	88 0f       	add	r24, r24
 dfa:	97 fb       	bst	r25, 7
 dfc:	99 1f       	adc	r25, r25
 dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_splitA+0x20>
 e00:	9f 3f       	cpi	r25, 0xFF	; 255
 e02:	79 f0       	breq	.+30     	; 0xe22 <__fp_splitA+0x2a>
 e04:	87 95       	ror	r24
 e06:	08 95       	ret
 e08:	12 16       	cp	r1, r18
 e0a:	13 06       	cpc	r1, r19
 e0c:	14 06       	cpc	r1, r20
 e0e:	55 1f       	adc	r21, r21
 e10:	f2 cf       	rjmp	.-28     	; 0xdf6 <__fp_split3+0xe>
 e12:	46 95       	lsr	r20
 e14:	f1 df       	rcall	.-30     	; 0xdf8 <__fp_splitA>
 e16:	08 c0       	rjmp	.+16     	; 0xe28 <__fp_splitA+0x30>
 e18:	16 16       	cp	r1, r22
 e1a:	17 06       	cpc	r1, r23
 e1c:	18 06       	cpc	r1, r24
 e1e:	99 1f       	adc	r25, r25
 e20:	f1 cf       	rjmp	.-30     	; 0xe04 <__fp_splitA+0xc>
 e22:	86 95       	lsr	r24
 e24:	71 05       	cpc	r23, r1
 e26:	61 05       	cpc	r22, r1
 e28:	08 94       	sec
 e2a:	08 95       	ret

00000e2c <__fp_zero>:
 e2c:	e8 94       	clt

00000e2e <__fp_szero>:
 e2e:	bb 27       	eor	r27, r27
 e30:	66 27       	eor	r22, r22
 e32:	77 27       	eor	r23, r23
 e34:	cb 01       	movw	r24, r22
 e36:	97 f9       	bld	r25, 7
 e38:	08 95       	ret

00000e3a <__mulsf3>:
 e3a:	0b d0       	rcall	.+22     	; 0xe52 <__mulsf3x>
 e3c:	c4 cf       	rjmp	.-120    	; 0xdc6 <__fp_round>
 e3e:	b5 df       	rcall	.-150    	; 0xdaa <__fp_pscA>
 e40:	28 f0       	brcs	.+10     	; 0xe4c <__mulsf3+0x12>
 e42:	ba df       	rcall	.-140    	; 0xdb8 <__fp_pscB>
 e44:	18 f0       	brcs	.+6      	; 0xe4c <__mulsf3+0x12>
 e46:	95 23       	and	r25, r21
 e48:	09 f0       	breq	.+2      	; 0xe4c <__mulsf3+0x12>
 e4a:	a6 cf       	rjmp	.-180    	; 0xd98 <__fp_inf>
 e4c:	ab cf       	rjmp	.-170    	; 0xda4 <__fp_nan>
 e4e:	11 24       	eor	r1, r1
 e50:	ee cf       	rjmp	.-36     	; 0xe2e <__fp_szero>

00000e52 <__mulsf3x>:
 e52:	ca df       	rcall	.-108    	; 0xde8 <__fp_split3>
 e54:	a0 f3       	brcs	.-24     	; 0xe3e <__mulsf3+0x4>

00000e56 <__mulsf3_pse>:
 e56:	95 9f       	mul	r25, r21
 e58:	d1 f3       	breq	.-12     	; 0xe4e <__mulsf3+0x14>
 e5a:	95 0f       	add	r25, r21
 e5c:	50 e0       	ldi	r21, 0x00	; 0
 e5e:	55 1f       	adc	r21, r21
 e60:	62 9f       	mul	r22, r18
 e62:	f0 01       	movw	r30, r0
 e64:	72 9f       	mul	r23, r18
 e66:	bb 27       	eor	r27, r27
 e68:	f0 0d       	add	r31, r0
 e6a:	b1 1d       	adc	r27, r1
 e6c:	63 9f       	mul	r22, r19
 e6e:	aa 27       	eor	r26, r26
 e70:	f0 0d       	add	r31, r0
 e72:	b1 1d       	adc	r27, r1
 e74:	aa 1f       	adc	r26, r26
 e76:	64 9f       	mul	r22, r20
 e78:	66 27       	eor	r22, r22
 e7a:	b0 0d       	add	r27, r0
 e7c:	a1 1d       	adc	r26, r1
 e7e:	66 1f       	adc	r22, r22
 e80:	82 9f       	mul	r24, r18
 e82:	22 27       	eor	r18, r18
 e84:	b0 0d       	add	r27, r0
 e86:	a1 1d       	adc	r26, r1
 e88:	62 1f       	adc	r22, r18
 e8a:	73 9f       	mul	r23, r19
 e8c:	b0 0d       	add	r27, r0
 e8e:	a1 1d       	adc	r26, r1
 e90:	62 1f       	adc	r22, r18
 e92:	83 9f       	mul	r24, r19
 e94:	a0 0d       	add	r26, r0
 e96:	61 1d       	adc	r22, r1
 e98:	22 1f       	adc	r18, r18
 e9a:	74 9f       	mul	r23, r20
 e9c:	33 27       	eor	r19, r19
 e9e:	a0 0d       	add	r26, r0
 ea0:	61 1d       	adc	r22, r1
 ea2:	23 1f       	adc	r18, r19
 ea4:	84 9f       	mul	r24, r20
 ea6:	60 0d       	add	r22, r0
 ea8:	21 1d       	adc	r18, r1
 eaa:	82 2f       	mov	r24, r18
 eac:	76 2f       	mov	r23, r22
 eae:	6a 2f       	mov	r22, r26
 eb0:	11 24       	eor	r1, r1
 eb2:	9f 57       	subi	r25, 0x7F	; 127
 eb4:	50 40       	sbci	r21, 0x00	; 0
 eb6:	8a f0       	brmi	.+34     	; 0xeda <__mulsf3_pse+0x84>
 eb8:	e1 f0       	breq	.+56     	; 0xef2 <__mulsf3_pse+0x9c>
 eba:	88 23       	and	r24, r24
 ebc:	4a f0       	brmi	.+18     	; 0xed0 <__mulsf3_pse+0x7a>
 ebe:	ee 0f       	add	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	bb 1f       	adc	r27, r27
 ec4:	66 1f       	adc	r22, r22
 ec6:	77 1f       	adc	r23, r23
 ec8:	88 1f       	adc	r24, r24
 eca:	91 50       	subi	r25, 0x01	; 1
 ecc:	50 40       	sbci	r21, 0x00	; 0
 ece:	a9 f7       	brne	.-22     	; 0xeba <__mulsf3_pse+0x64>
 ed0:	9e 3f       	cpi	r25, 0xFE	; 254
 ed2:	51 05       	cpc	r21, r1
 ed4:	70 f0       	brcs	.+28     	; 0xef2 <__mulsf3_pse+0x9c>
 ed6:	60 cf       	rjmp	.-320    	; 0xd98 <__fp_inf>
 ed8:	aa cf       	rjmp	.-172    	; 0xe2e <__fp_szero>
 eda:	5f 3f       	cpi	r21, 0xFF	; 255
 edc:	ec f3       	brlt	.-6      	; 0xed8 <__mulsf3_pse+0x82>
 ede:	98 3e       	cpi	r25, 0xE8	; 232
 ee0:	dc f3       	brlt	.-10     	; 0xed8 <__mulsf3_pse+0x82>
 ee2:	86 95       	lsr	r24
 ee4:	77 95       	ror	r23
 ee6:	67 95       	ror	r22
 ee8:	b7 95       	ror	r27
 eea:	f7 95       	ror	r31
 eec:	e7 95       	ror	r30
 eee:	9f 5f       	subi	r25, 0xFF	; 255
 ef0:	c1 f7       	brne	.-16     	; 0xee2 <__mulsf3_pse+0x8c>
 ef2:	fe 2b       	or	r31, r30
 ef4:	88 0f       	add	r24, r24
 ef6:	91 1d       	adc	r25, r1
 ef8:	96 95       	lsr	r25
 efa:	87 95       	ror	r24
 efc:	97 f9       	bld	r25, 7
 efe:	08 95       	ret

00000f00 <__udivmodhi4>:
 f00:	aa 1b       	sub	r26, r26
 f02:	bb 1b       	sub	r27, r27
 f04:	51 e1       	ldi	r21, 0x11	; 17
 f06:	07 c0       	rjmp	.+14     	; 0xf16 <__udivmodhi4_ep>

00000f08 <__udivmodhi4_loop>:
 f08:	aa 1f       	adc	r26, r26
 f0a:	bb 1f       	adc	r27, r27
 f0c:	a6 17       	cp	r26, r22
 f0e:	b7 07       	cpc	r27, r23
 f10:	10 f0       	brcs	.+4      	; 0xf16 <__udivmodhi4_ep>
 f12:	a6 1b       	sub	r26, r22
 f14:	b7 0b       	sbc	r27, r23

00000f16 <__udivmodhi4_ep>:
 f16:	88 1f       	adc	r24, r24
 f18:	99 1f       	adc	r25, r25
 f1a:	5a 95       	dec	r21
 f1c:	a9 f7       	brne	.-22     	; 0xf08 <__udivmodhi4_loop>
 f1e:	80 95       	com	r24
 f20:	90 95       	com	r25
 f22:	bc 01       	movw	r22, r24
 f24:	cd 01       	movw	r24, r26
 f26:	08 95       	ret

00000f28 <_exit>:
 f28:	f8 94       	cli

00000f2a <__stop_program>:
 f2a:	ff cf       	rjmp	.-2      	; 0xf2a <__stop_program>
